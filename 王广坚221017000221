基于文本挖掘的电商产品评论数据情感分析
王广坚 221017000221
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ——  基于文本挖掘的电商产品评论数据情感分析  ——"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.案例简介\n",
    "\n",
    "    1、利用文本挖掘技术，对碎片化、非结构化的电商网站评论数据进行清洗与处理，转化为结构化数据。\n",
    "    2、参考知网发布的情感分析用词语集，统计评论数据的正负情感指数，然后进行情感分析,通过词云图直观查看正负评论的关键词。\n",
    "    3、比较“机器挖掘的正负情感”与“人工打标签的正负情感”，精度达到89%。\n",
    "    4、采用LDA主题模型提取评论关键信息，以了解用户的需求、意见、购买原因、产品的优缺点等。\n",
    "    \n",
    "####    说明：本案例侧重分析思路及代码实现，不深入展开分析结果的业务解释与决策指导！\n",
    "\n",
    "    \n",
    "    参考材料《Python数据分析与挖掘实战》"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.框架\n",
    "\n",
    "    工具准备\n",
    "    \n",
    "    一、导入数据\n",
    "    二、数据预处理\n",
    "        （一）去重\n",
    "        （二）数据清洗\n",
    "        （三）分词、词性标注、去除停用词、词云图\n",
    "    三、模型构建\n",
    "        （一）决策树\n",
    "        （二）情感分析\n",
    "        （三）基于LDA模型的主题分析"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 工具准备"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from matplotlib.pylab import style #自定义图表风格\n",
    "style.use('ggplot')\n",
    "from IPython.core.interactiveshell import InteractiveShell\n",
    "InteractiveShell.ast_node_interactivity = \"all\"\n",
    "plt.rcParams['font.sans-serif'] = ['Simhei'] # 解决中文乱码问题\n",
    "\n",
    "import re\n",
    "import jieba.posseg as psg\n",
    "import itertools\n",
    "#conda install -c anaconda gensim\n",
    "from gensim import corpora,models #主题挖掘，提取关键信息\n",
    "\n",
    "# pip install wordcloud\n",
    "from wordcloud import WordCloud,ImageColorGenerator\n",
    "from collections import Counter\n",
    "\n",
    "from sklearn import tree\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import accuracy_score\n",
    "import graphviz"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 注意\n",
    "\n",
    "    以下方法，是为了帮助我们直观查看对象处理的结果。是辅助代码，非必要代码！\n",
    "    .head()\n",
    "    print()\n",
    "    len()\n",
    "    .shape\n",
    "    .unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 一、导入数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>content</th>\n",
       "      <th>creationTime</th>\n",
       "      <th>nickname</th>\n",
       "      <th>referenceName</th>\n",
       "      <th>content_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>东西收到这么久，都忘了去好评，美的大品牌，值得信赖，东西整体来看，个人感觉还不错，没有出现什...</td>\n",
       "      <td>2017-04-17 13:01:54</td>\n",
       "      <td>鑫***辰</td>\n",
       "      <td>美的（Midea）60升预约洗浴 无线遥控 电热水器 F60-15WB5(Y)</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>安装师傅很给力，热水器也好用，感谢美的。</td>\n",
       "      <td>2017-04-17 10:45:33</td>\n",
       "      <td>切***药</td>\n",
       "      <td>美的（Midea）60升预约洗浴 无线遥控 电热水器 F60-15WB5(Y)</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>还没安装，基本满意</td>\n",
       "      <td>2017-04-17 10:58:33</td>\n",
       "      <td>j***x</td>\n",
       "      <td>美的（Midea）60升预约洗浴 无线遥控 电热水器 F60-15WB5(Y)</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>电热水器收到了，京东自营商品就是好，发货速度快，品质有保障，安装效果好，宝贝非常喜欢，冬天可...</td>\n",
       "      <td>2017-10-18 20:22:33</td>\n",
       "      <td>j***2</td>\n",
       "      <td>美的（Midea）60升预约洗浴 无线遥控 电热水器 F60-15WB5(Y)</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>用了几次才来评价，对产品非常满意，加热快保温时间长，售后服务特别好，主动打电话询问送货情况帮...</td>\n",
       "      <td>2017-04-17 09:19:16</td>\n",
       "      <td>j***6</td>\n",
       "      <td>美的（Midea）60升预约洗浴 无线遥控 电热水器 F60-15WB5(Y)</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             content         creationTime  \\\n",
       "0  东西收到这么久，都忘了去好评，美的大品牌，值得信赖，东西整体来看，个人感觉还不错，没有出现什...  2017-04-17 13:01:54   \n",
       "1                               安装师傅很给力，热水器也好用，感谢美的。  2017-04-17 10:45:33   \n",
       "2                                          还没安装，基本满意  2017-04-17 10:58:33   \n",
       "3  电热水器收到了，京东自营商品就是好，发货速度快，品质有保障，安装效果好，宝贝非常喜欢，冬天可...  2017-10-18 20:22:33   \n",
       "4  用了几次才来评价，对产品非常满意，加热快保温时间长，售后服务特别好，主动打电话询问送货情况帮...  2017-04-17 09:19:16   \n",
       "\n",
       "  nickname                            referenceName content_type  \n",
       "0    鑫***辰  美的（Midea）60升预约洗浴 无线遥控 电热水器 F60-15WB5(Y)          pos  \n",
       "1    切***药  美的（Midea）60升预约洗浴 无线遥控 电热水器 F60-15WB5(Y)          pos  \n",
       "2    j***x  美的（Midea）60升预约洗浴 无线遥控 电热水器 F60-15WB5(Y)          pos  \n",
       "3    j***2  美的（Midea）60升预约洗浴 无线遥控 电热水器 F60-15WB5(Y)          pos  \n",
       "4    j***6  美的（Midea）60升预约洗浴 无线遥控 电热水器 F60-15WB5(Y)          pos  "
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data=pd.read_csv('./reviews.csv')\n",
    "raw_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2000 entries, 0 to 1999\n",
      "Data columns (total 5 columns):\n",
      "content          2000 non-null object\n",
      "creationTime     2000 non-null object\n",
      "nickname         2000 non-null object\n",
      "referenceName    2000 non-null object\n",
      "content_type     2000 non-null object\n",
      "dtypes: object(5)\n",
      "memory usage: 78.2+ KB\n"
     ]
    }
   ],
   "source": [
    "raw_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['content', 'creationTime', 'nickname', 'referenceName', 'content_type'], dtype='object')"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2016-06-24 22:35:42    2\n",
       "2015-06-25 17:36:36    2\n",
       "2016-06-24 17:42:26    2\n",
       "2016-06-20 16:03:00    2\n",
       "2017-10-06 13:12:19    1\n",
       "                      ..\n",
       "2017-10-22 08:08:35    1\n",
       "2017-03-25 15:59:46    1\n",
       "2017-10-01 10:13:38    1\n",
       "2017-07-03 13:10:14    1\n",
       "2017-03-19 10:19:17    1\n",
       "Name: creationTime, Length: 1996, dtype: int64"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "j***1    34\n",
       "j***6    30\n",
       "j***2    25\n",
       "j***b    25\n",
       "j***f    23\n",
       "         ..\n",
       "a***1     1\n",
       "切***药     1\n",
       "无***主     1\n",
       "小***热     1\n",
       "费***能     1\n",
       "Name: nickname, Length: 1190, dtype: int64"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "美的（Midea）60升预约洗浴 无线遥控 电热水器 F60-15WB5(Y)    2000\n",
       "Name: referenceName, dtype: int64"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "neg    1000\n",
       "pos    1000\n",
       "Name: content_type, dtype: int64"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#取值分布\n",
    "for cate in ['creationTime', 'nickname', 'referenceName', 'content_type']:\n",
    "    raw_data[cate].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 二、数据预处理"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### （一）去重\n",
    "\n",
    "删除系统自动为客户做出的评论。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "去重之前： 2000\n",
      "去重之后： 1974\n"
     ]
    }
   ],
   "source": [
    "reviews=raw_data.copy()\n",
    "reviews=reviews[['content', 'content_type']]\n",
    "print('去重之前：',reviews.shape[0])\n",
    "reviews=reviews.drop_duplicates()\n",
    "print('去重之后：',reviews.shape[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### （二）数据清洗"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "物美价廉啊，特别划算的，而且加热速度快。家里用着不错特别方便\n",
      "-----------\n",
      "价格合理，配置挺高，物美价值\n",
      "-----------\n",
      "老师按装是快的，装修中。没试。希望是正常的！\n",
      "-----------\n",
      "五分是习惯\r\n",
      "送的快，装的也快，很好，不过装修进行中，为了吊顶只装了热水器，其它后话吧。\r\n",
      "我也是醉了，热水器遥控器没电池，还是安装哥车里有一个备用的给装上了。\r\n",
      "要赠送的电动牙刷，空气净化器等待配送中&hellip;&hellip;。\r\n",
      "一天时间冰箱降100、洗衣机降40、热水器降100、小厨宝降30、烟灶套降100。不过客服说上报解决，电话通知等待中&hellip;&hellip;\n",
      "-----------\n",
      "安装的小哥非常好，工作很尽心，我们家是老房子，安装比一般家要费力。安装的非常不错。因为整栋楼要用热水，裙子只能这样装。给小哥点个赞。热水器已经买二个了，一如既往地好用。美的大品牌，质量非常好\n",
      "-----------\n"
     ]
    }
   ],
   "source": [
    "# 清洗之前\n",
    "content=reviews['content']\n",
    "for i in range(5,10):\n",
    "    print(content[i])\n",
    "    print('-----------')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "物美价廉啊，特别划算的，而且加热速度快。家里用着不错特别方便\n",
      "-----------\n",
      "价格合理，配置挺高，物美价值\n",
      "-----------\n",
      "老师按装是快的，装修中。没试。希望是正常的！\n",
      "-----------\n",
      "五分是习惯\r\n",
      "送的快，装的也快，很好，不过装修进行中，为了吊顶只装了，其它后话吧。\r\n",
      "我也是醉了，遥控器没电池，还是安装哥车里有一个备用的给装上了。\r\n",
      "要赠送的电动牙刷，空气净化器等待配送中&;&;。\r\n",
      "一天时间冰箱降、洗衣机降、降、小厨宝降、烟灶套降。不过客服说上报解决，电话通知等待中&;&;\n",
      "-----------\n",
      "安装的小哥非常好，工作很尽心，我们家是老房子，安装比一般家要费力。安装的非常不错。因为整栋楼要用热水，裙子只能这样装。给小哥点个赞。已经买二个了，一如既往地好用。大品牌，质量非常好\n",
      "-----------\n"
     ]
    }
   ],
   "source": [
    "#清洗之后，将数字、字母、京东美的电热水器字样都删除\n",
    "info=re.compile('[0-9a-zA-Z]|京东|美的|电热水器|热水器|')\n",
    "content=content.apply(lambda x: info.sub('',x))  #替换所有匹配项\n",
    "\n",
    "for i in range(5,10):\n",
    "    print(content[i])\n",
    "    print('-----------')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### （三）分词、词性标注、去除停用词、词云图"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(1)分词"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "目标\n",
    "   \n",
    "    输入：\n",
    "    - content、content_type\n",
    "    - 共有1974条评论句子\n",
    "    输出：\n",
    "    - 构造DF，包含： 分词、对应词性、分词所在原句子的id、分词所在原句子的content_type\n",
    "    - 共有6万多行\n",
    "    \n",
    "    非结构化数据——>结构化数据\n",
    "![image.png](attachment:image.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1974,)"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "1974"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('物美价廉', 'l'), ('啊', 'zg'), ('，', 'x'), ('特别', 'd'), ('划算', 'v'), ('的', 'uj'), ('，', 'x'), ('而且', 'c'), ('加热', 'v'), ('速度', 'n'), ('快', 'a'), ('。', 'x'), ('家里', 's'), ('用', 'p'), ('着', 'uz'), ('不错', 'a'), ('特别', 'd'), ('方便', 'a')]\n"
     ]
    }
   ],
   "source": [
    "#分词，由元组组成的list\n",
    "seg_content=content.apply( lambda s:  [(x.word,x.flag) for x in psg.cut(s)] )  \n",
    "\n",
    "seg_content.shape\n",
    "len(seg_content)\n",
    "print(seg_content[5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1974"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "0    32\n",
       "1    11\n",
       "2     6\n",
       "3    39\n",
       "4    44\n",
       "5    18\n",
       "Name: content, dtype: int64"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#统计评论词数\n",
    "n_word=seg_content.apply(lambda s: len(s))\n",
    "\n",
    "len(n_word)\n",
    "n_word.head(6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "63794"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#得到各分词在第几条评论\n",
    "n_content=[ [x+1]*y for x,y in zip(list(seg_content.index),list(n_word))] #[x+1]*y,表示复制y份，由list组成的list\n",
    "index_content_long=sum(n_content,[]) #表示去掉[]，拉平,返回list\n",
    "len(index_content_long)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2, 2, 3, 3, 3]"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum([[2,2],[3,3,3]],[])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    [(东西, ns), (收到, v), (这么久, r), (，, x), (都, d), ...\n",
       "1    [(安装, v), (师傅, nr), (很, d), (给, p), (力, n), (，...\n",
       "2    [(还, d), (没, v), (安装, v), (，, x), (基本, n), (满意...\n",
       "3    [(收到, v), (了, ul), (，, x), (自营, vn), (商品, n), ...\n",
       "4    [(用, p), (了, ul), (几次, m), (才, d), (来, v), (评价...\n",
       "Name: content, dtype: object"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[('东西', 'ns'),\n",
       " ('收到', 'v'),\n",
       " ('这么久', 'r'),\n",
       " ('，', 'x'),\n",
       " ('都', 'd'),\n",
       " ('忘', 'v'),\n",
       " ('了', 'ul'),\n",
       " ('去', 'v'),\n",
       " ('好评', 'v'),\n",
       " ('，', 'x'),\n",
       " ('大', 'a'),\n",
       " ('品牌', 'n'),\n",
       " ('，', 'x'),\n",
       " ('值得', 'v'),\n",
       " ('信赖', 'n'),\n",
       " ('，', 'x'),\n",
       " ('东西', 'ns'),\n",
       " ('整体', 'n'),\n",
       " ('来看', 'u'),\n",
       " ('，', 'x'),\n",
       " ('个人感觉', 'n'),\n",
       " ('还', 'd'),\n",
       " ('不错', 'a'),\n",
       " ('，', 'x'),\n",
       " ('没有', 'v'),\n",
       " ('出现', 'v'),\n",
       " ('什么', 'r'),\n",
       " ('问题', 'n'),\n",
       " ('，', 'x'),\n",
       " ('值得', 'v'),\n",
       " ('拥有', 'v'),\n",
       " ('！', 'x'),\n",
       " ('安装', 'v'),\n",
       " ('师傅', 'nr'),\n",
       " ('很', 'd'),\n",
       " ('给', 'p'),\n",
       " ('力', 'n'),\n",
       " ('，', 'x'),\n",
       " ('也好', 'y'),\n",
       " ('用', 'p'),\n",
       " ('，', 'x'),\n",
       " ('感谢', 'v'),\n",
       " ('。', 'x'),\n",
       " ('还', 'd'),\n",
       " ('没', 'v'),\n",
       " ('安装', 'v'),\n",
       " ('，', 'x'),\n",
       " ('基本', 'n'),\n",
       " ('满意', 'v'),\n",
       " ('收到', 'v'),\n",
       " ('了', 'ul'),\n",
       " ('，', 'x'),\n",
       " ('自营', 'vn'),\n",
       " ('商品', 'n'),\n",
       " ('就是', 'd'),\n",
       " ('好', 'a'),\n",
       " ('，', 'x'),\n",
       " ('发货', 'n'),\n",
       " ('速度', 'n'),\n",
       " ('快', 'a'),\n",
       " ('，', 'x'),\n",
       " ('品质', 'n'),\n",
       " ('有', 'v'),\n",
       " ('保障', 'v'),\n",
       " ('，', 'x'),\n",
       " ('安装', 'v'),\n",
       " ('效果', 'n'),\n",
       " ('好', 'a'),\n",
       " ('，', 'x'),\n",
       " ('宝贝', 'nr'),\n",
       " ('非常', 'd'),\n",
       " ('喜欢', 'v'),\n",
       " ('，', 'x'),\n",
       " ('冬天', 't'),\n",
       " ('可以', 'c'),\n",
       " ('小时', 'n'),\n",
       " ('有', 'v'),\n",
       " ('热水', 'n'),\n",
       " ('了', 'ul'),\n",
       " ('，', 'x'),\n",
       " ('自营', 'vn'),\n",
       " ('值得', 'v'),\n",
       " ('信赖', 'n'),\n",
       " ('，', 'x'),\n",
       " ('值得', 'v'),\n",
       " ('推荐', 'v'),\n",
       " ('自营', 'vn'),\n",
       " ('。', 'x'),\n",
       " ('用', 'p'),\n",
       " ('了', 'ul'),\n",
       " ('几次', 'm'),\n",
       " ('才', 'd'),\n",
       " ('来', 'v'),\n",
       " ('评价', 'n'),\n",
       " ('，', 'x'),\n",
       " ('对', 'p'),\n",
       " ('产品', 'n'),\n",
       " ('非常', 'd'),\n",
       " ('满意', 'v'),\n",
       " ('，', 'x'),\n",
       " ('加热', 'v'),\n",
       " ('快', 'a'),\n",
       " ('保温', 'n'),\n",
       " ('时间', 'n'),\n",
       " ('长', 'a'),\n",
       " ('，', 'x'),\n",
       " ('售后服务', 'l'),\n",
       " ('特别', 'd'),\n",
       " ('好', 'a'),\n",
       " ('，', 'x'),\n",
       " ('主动', 'b'),\n",
       " ('打电话', 'l'),\n",
       " ('询问', 'v'),\n",
       " ('送货', 'v'),\n",
       " ('情况', 'n'),\n",
       " ('帮', 'v'),\n",
       " ('我', 'r'),\n",
       " ('联系', 'n'),\n",
       " ('安装', 'v'),\n",
       " ('，', 'x'),\n",
       " ('非常感谢', 'i'),\n",
       " ('售后', 'n'),\n",
       " ('大姐', 'n'),\n",
       " ('的', 'uj'),\n",
       " ('服务', 'vn'),\n",
       " ('！', 'x'),\n",
       " ('下次', 't'),\n",
       " ('购买', 'v'),\n",
       " ('还', 'd'),\n",
       " ('会', 'v'),\n",
       " ('考虑', 'v'),\n",
       " ('！', 'x'),\n",
       " ('物美价廉', 'l'),\n",
       " ('啊', 'zg'),\n",
       " ('，', 'x'),\n",
       " ('特别', 'd'),\n",
       " ('划算', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('，', 'x'),\n",
       " ('而且', 'c'),\n",
       " ('加热', 'v'),\n",
       " ('速度', 'n'),\n",
       " ('快', 'a'),\n",
       " ('。', 'x'),\n",
       " ('家里', 's'),\n",
       " ('用', 'p'),\n",
       " ('着', 'uz'),\n",
       " ('不错', 'a'),\n",
       " ('特别', 'd'),\n",
       " ('方便', 'a'),\n",
       " ('价格合理', 'n'),\n",
       " ('，', 'x'),\n",
       " ('配置', 'v'),\n",
       " ('挺', 'd'),\n",
       " ('高', 'a'),\n",
       " ('，', 'x'),\n",
       " ('物美', 'nz'),\n",
       " ('价值', 'n'),\n",
       " ('老师', 'n'),\n",
       " ('按', 'p'),\n",
       " ('装', 'v'),\n",
       " ('是', 'v'),\n",
       " ('快', 'a'),\n",
       " ('的', 'uj'),\n",
       " ('，', 'x'),\n",
       " ('装修', 'v'),\n",
       " ('中', 'f'),\n",
       " ('。', 'x'),\n",
       " ('没', 'v'),\n",
       " ('试', 'v'),\n",
       " ('。', 'x'),\n",
       " ('希望', 'v'),\n",
       " ('是', 'v'),\n",
       " ('正常', 'd'),\n",
       " ('的', 'uj'),\n",
       " ('！', 'x'),\n",
       " ('五分', 'm'),\n",
       " ('是', 'v'),\n",
       " ('习惯', 'n'),\n",
       " ('\\r\\n', 'x'),\n",
       " ('送', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('快', 'a'),\n",
       " ('，', 'x'),\n",
       " ('装', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('也', 'd'),\n",
       " ('快', 'a'),\n",
       " ('，', 'x'),\n",
       " ('很', 'd'),\n",
       " ('好', 'a'),\n",
       " ('，', 'x'),\n",
       " ('不过', 'c'),\n",
       " ('装修', 'v'),\n",
       " ('进行', 'v'),\n",
       " ('中', 'f'),\n",
       " ('，', 'x'),\n",
       " ('为了', 'p'),\n",
       " ('吊顶', 'n'),\n",
       " ('只', 'd'),\n",
       " ('装', 'v'),\n",
       " ('了', 'ul'),\n",
       " ('，', 'x'),\n",
       " ('其它', 'r'),\n",
       " ('后', 'f'),\n",
       " ('话', 'n'),\n",
       " ('吧', 'y'),\n",
       " ('。', 'x'),\n",
       " ('\\r\\n', 'x'),\n",
       " ('我', 'r'),\n",
       " ('也', 'd'),\n",
       " ('是', 'v'),\n",
       " ('醉', 'v'),\n",
       " ('了', 'ul'),\n",
       " ('，', 'x'),\n",
       " ('遥控器', 'n'),\n",
       " ('没', 'v'),\n",
       " ('电池', 'n'),\n",
       " ('，', 'x'),\n",
       " ('还是', 'c'),\n",
       " ('安装', 'v'),\n",
       " ('哥', 'n'),\n",
       " ('车里', 's'),\n",
       " ('有', 'v'),\n",
       " ('一个', 'm'),\n",
       " ('备用', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('给装', 'v'),\n",
       " ('上', 'f'),\n",
       " ('了', 'ul'),\n",
       " ('。', 'x'),\n",
       " ('\\r\\n', 'x'),\n",
       " ('要', 'v'),\n",
       " ('赠送', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('电动牙刷', 'l'),\n",
       " ('，', 'x'),\n",
       " ('空气', 'n'),\n",
       " ('净化器', 'n'),\n",
       " ('等待', 'v'),\n",
       " ('配送', 'v'),\n",
       " ('中', 'ns'),\n",
       " ('&', 'x'),\n",
       " (';', 'x'),\n",
       " ('&', 'x'),\n",
       " (';', 'x'),\n",
       " ('。', 'x'),\n",
       " ('\\r\\n', 'x'),\n",
       " ('一天', 'm'),\n",
       " ('时间', 'n'),\n",
       " ('冰箱', 'n'),\n",
       " ('降', 'v'),\n",
       " ('、', 'x'),\n",
       " ('洗衣机', 'n'),\n",
       " ('降', 'v'),\n",
       " ('、', 'x'),\n",
       " ('降', 'v'),\n",
       " ('、', 'x'),\n",
       " ('小厨', 'n'),\n",
       " ('宝降', 'nr'),\n",
       " ('、', 'x'),\n",
       " ('烟灶', 'n'),\n",
       " ('套降', 'v'),\n",
       " ('。', 'x'),\n",
       " ('不过', 'c'),\n",
       " ('客服', 'n'),\n",
       " ('说', 'v'),\n",
       " ('上报', 'v'),\n",
       " ('解决', 'v'),\n",
       " ('，', 'x'),\n",
       " ('电话', 'n'),\n",
       " ('通知', 'v'),\n",
       " ('等待', 'v'),\n",
       " ('中', 'ns'),\n",
       " ('&', 'x'),\n",
       " (';', 'x'),\n",
       " ('&', 'x'),\n",
       " (';', 'x'),\n",
       " ('安装', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('小哥', 'n'),\n",
       " ('非常', 'd'),\n",
       " ('好', 'a'),\n",
       " ('，', 'x'),\n",
       " ('工作', 'vn'),\n",
       " ('很', 'zg'),\n",
       " ('尽心', 'd'),\n",
       " ('，', 'x'),\n",
       " ('我们', 'r'),\n",
       " ('家', 'm'),\n",
       " ('是', 'v'),\n",
       " ('老房子', 'n'),\n",
       " ('，', 'x'),\n",
       " ('安装', 'v'),\n",
       " ('比', 'p'),\n",
       " ('一般', 'a'),\n",
       " ('家', 'm'),\n",
       " ('要', 'v'),\n",
       " ('费力', 'n'),\n",
       " ('。', 'x'),\n",
       " ('安装', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('非常', 'd'),\n",
       " ('不错', 'a'),\n",
       " ('。', 'x'),\n",
       " ('因为', 'c'),\n",
       " ('整栋', 'm'),\n",
       " ('楼', 'n'),\n",
       " ('要', 'v'),\n",
       " ('用', 'p'),\n",
       " ('热水', 'n'),\n",
       " ('，', 'x'),\n",
       " ('裙子', 'n'),\n",
       " ('只能', 'v'),\n",
       " ('这样', 'r'),\n",
       " ('装', 'v'),\n",
       " ('。', 'x'),\n",
       " ('给', 'p'),\n",
       " ('小哥', 'n'),\n",
       " ('点', 'm'),\n",
       " ('个', 'm'),\n",
       " ('赞', 'v'),\n",
       " ('。', 'x'),\n",
       " ('已经', 'd'),\n",
       " ('买', 'v'),\n",
       " ('二个', 'm'),\n",
       " ('了', 'ul'),\n",
       " ('，', 'x'),\n",
       " ('一如既往', 'i'),\n",
       " ('地', 'uv'),\n",
       " ('好用', 'v'),\n",
       " ('。', 'x'),\n",
       " ('大', 'a'),\n",
       " ('品牌', 'n'),\n",
       " ('，', 'x'),\n",
       " ('质量', 'n'),\n",
       " ('非常', 'd'),\n",
       " ('好', 'a'),\n",
       " ('前', 'f'),\n",
       " ('天下', 's'),\n",
       " ('单买', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('今天', 't'),\n",
       " ('就', 'd'),\n",
       " ('用上', 'v'),\n",
       " ('了', 'ul'),\n",
       " ('，', 'x'),\n",
       " ('目前', 't'),\n",
       " ('没有', 'v'),\n",
       " ('发现', 'v'),\n",
       " ('问题', 'n'),\n",
       " ('，', 'x'),\n",
       " ('比', 'p'),\n",
       " ('街上', 's'),\n",
       " ('卖', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('便宜', 'a'),\n",
       " ('很多', 'm'),\n",
       " ('，', 'x'),\n",
       " ('店家', 'n'),\n",
       " ('都', 'd'),\n",
       " ('说', 'v'),\n",
       " ('和', 'c'),\n",
       " ('网上', 's'),\n",
       " ('比', 'p'),\n",
       " ('他家', 'r'),\n",
       " ('贵', 'a'),\n",
       " ('很多', 'm'),\n",
       " ('，', 'x'),\n",
       " ('我', 'r'),\n",
       " ('当', 'p'),\n",
       " ('老板', 'n'),\n",
       " ('面', 'n'),\n",
       " ('直接', 'ad'),\n",
       " ('在', 'p'),\n",
       " ('网上', 's'),\n",
       " ('比', 'p'),\n",
       " ('的', 'uj'),\n",
       " ('?', 'x'),\n",
       " ('冲着', 'p'),\n",
       " ('元', 'm'),\n",
       " ('以内', 'f'),\n",
       " ('.', 'x'),\n",
       " ('变频', 'vn'),\n",
       " ('级', 'q'),\n",
       " ('能效', 'n'),\n",
       " ('，', 'x'),\n",
       " ('制冷', 'v'),\n",
       " ('效果', 'n'),\n",
       " ('还', 'd'),\n",
       " ('不错', 'a'),\n",
       " ('。', 'x'),\n",
       " ('很', 'd'),\n",
       " ('好', 'a'),\n",
       " ('以后', 'f'),\n",
       " ('还', 'd'),\n",
       " ('在', 'p'),\n",
       " ('购物', 'n'),\n",
       " ('，', 'x'),\n",
       " ('我', 'r'),\n",
       " ('去', 'v'),\n",
       " ('别的', 'r'),\n",
       " ('电器', 'n'),\n",
       " ('问', 'v'),\n",
       " ('我', 'r'),\n",
       " ('这', 'r'),\n",
       " ('型号', 'n'),\n",
       " ('，', 'x'),\n",
       " ('说', 'v'),\n",
       " ('没有', 'v'),\n",
       " ('我', 'r'),\n",
       " ('这个', 'r'),\n",
       " ('型号', 'n'),\n",
       " ('，', 'x'),\n",
       " ('有', 'v'),\n",
       " ('相识', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('，', 'x'),\n",
       " ('元', 'm'),\n",
       " ('\\r\\n', 'x'),\n",
       " ('，', 'x'),\n",
       " ('\\r\\n', 'x'),\n",
       " ('买', 'v'),\n",
       " ('家电', 'j'),\n",
       " ('的', 'uj'),\n",
       " ('还', 'd'),\n",
       " ('说', 'v'),\n",
       " ('我', 'r'),\n",
       " ('这', 'r'),\n",
       " ('下线', 'n'),\n",
       " ('了', 'ul'),\n",
       " ('，', 'x'),\n",
       " ('安装', 'v'),\n",
       " ('师傅', 'nr'),\n",
       " ('说', 'v'),\n",
       " ('，', 'x'),\n",
       " ('我', 'r'),\n",
       " ('是', 'v'),\n",
       " ('普通', 'nz'),\n",
       " ('的', 'uj'),\n",
       " ('挺好', 'a'),\n",
       " ('的', 'uj'),\n",
       " ('。', 'x'),\n",
       " ('加热', 'v'),\n",
       " ('很快', 'd'),\n",
       " ('，', 'x'),\n",
       " ('购物', 'n'),\n",
       " ('很', 'zg'),\n",
       " ('满意', 'v'),\n",
       " ('，', 'x'),\n",
       " ('还', 'd'),\n",
       " ('没', 'd'),\n",
       " ('走用', 'v'),\n",
       " ('，', 'x'),\n",
       " ('安装费', 'n'),\n",
       " ('花元', 'nr'),\n",
       " ('，', 'x'),\n",
       " ('带', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('喷头', 'v'),\n",
       " ('不能', 'v'),\n",
       " ('用', 'p'),\n",
       " ('槊', 'g'),\n",
       " ('料', 'n'),\n",
       " ('的', 'uj'),\n",
       " ('，', 'x'),\n",
       " ('得', 'ud'),\n",
       " ('自己', 'r'),\n",
       " ('买', 'v'),\n",
       " ('花', 'v'),\n",
       " ('伞', 'n'),\n",
       " ('。', 'x'),\n",
       " ('安装', 'v'),\n",
       " ('还', 'd'),\n",
       " ('得', 'ud'),\n",
       " (' ', 'x'),\n",
       " ('元', 'm'),\n",
       " ('。', 'x'),\n",
       " ('\\r\\n', 'x'),\n",
       " ('麻烦', 'an'),\n",
       " ('啊', 'zg'),\n",
       " ('，', 'x'),\n",
       " ('物流', 'n'),\n",
       " ('非常', 'd'),\n",
       " ('快', 'a'),\n",
       " ('，', 'x'),\n",
       " ('早上', 't'),\n",
       " ('送来', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('，', 'x'),\n",
       " ('中午', 't'),\n",
       " ('就', 'd'),\n",
       " ('可以', 'c'),\n",
       " ('安装', 'v'),\n",
       " ('了', 'ul'),\n",
       " ('，', 'x'),\n",
       " ('安装', 'v'),\n",
       " ('时候', 'n'),\n",
       " ('也', 'd'),\n",
       " ('非常', 'd'),\n",
       " ('认真', 'ad'),\n",
       " ('安装', 'v'),\n",
       " ('师傅', 'nr'),\n",
       " ('非常', 'd'),\n",
       " ('认真', 'ad'),\n",
       " ('，', 'x'),\n",
       " ('负责', 'v'),\n",
       " ('任', 'r'),\n",
       " ('，', 'x'),\n",
       " ('刚', 'd'),\n",
       " ('开始', 'v'),\n",
       " ('用', 'p'),\n",
       " ('，', 'x'),\n",
       " ('还', 'd'),\n",
       " ('不', 'd'),\n",
       " ('知道', 'v'),\n",
       " ('效果', 'n'),\n",
       " ('怎么样', 'r'),\n",
       " ('，', 'x'),\n",
       " ('但是', 'c'),\n",
       " ('售后', 'n'),\n",
       " ('确实', 'ad'),\n",
       " ('挺', 'd'),\n",
       " ('好', 'a'),\n",
       " ('各', 'r'),\n",
       " ('方面', 'n'),\n",
       " ('都', 'd'),\n",
       " ('很', 'd'),\n",
       " ('满意', 'v'),\n",
       " ('，', 'x'),\n",
       " ('从', 'p'),\n",
       " ('价格', 'n'),\n",
       " ('，', 'x'),\n",
       " ('产品质量', 'n'),\n",
       " ('，', 'x'),\n",
       " ('货运', 'n'),\n",
       " ('，', 'x'),\n",
       " ('安装', 'v'),\n",
       " ('调试', 'vn'),\n",
       " ('，', 'x'),\n",
       " ('工作人员', 'n'),\n",
       " ('服务态度', 'n'),\n",
       " ('方面', 'n'),\n",
       " ('，', 'x'),\n",
       " ('还有', 'v'),\n",
       " ('售后服务', 'l'),\n",
       " ('。', 'x'),\n",
       " ('挺', 'd'),\n",
       " ('好', 'a'),\n",
       " ('的', 'uj'),\n",
       " ('，', 'x'),\n",
       " ('收费', 'n'),\n",
       " ('安装', 'v'),\n",
       " ('速度', 'n'),\n",
       " ('很快', 'd'),\n",
       " ('，', 'x'),\n",
       " ('管道', 'n'),\n",
       " ('走', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('也', 'd'),\n",
       " ('整齐', 'd'),\n",
       " ('，', 'x'),\n",
       " ('不错', 'a'),\n",
       " ('用', 'p'),\n",
       " ('了', 'ul'),\n",
       " ('好', 'a'),\n",
       " ('几天', 'm'),\n",
       " ('了', 'ul'),\n",
       " ('，', 'x'),\n",
       " ('才', 'd'),\n",
       " ('想', 'v'),\n",
       " ('起来', 'v'),\n",
       " ('晒', 'v'),\n",
       " ('单', 'n'),\n",
       " ('，', 'x'),\n",
       " ('差点', 'n'),\n",
       " ('忘', 'v'),\n",
       " ('了', 'ul'),\n",
       " ('，', 'x'),\n",
       " ('这款', 'r'),\n",
       " ('很', 'd'),\n",
       " ('好', 'a'),\n",
       " ('，', 'x'),\n",
       " ('我', 'r'),\n",
       " ('很', 'd'),\n",
       " ('喜欢', 'v'),\n",
       " ('?', 'x'),\n",
       " ('已经', 'd'),\n",
       " ('安装', 'v'),\n",
       " ('但', 'c'),\n",
       " ('还', 'd'),\n",
       " ('没用', 'v'),\n",
       " (' ', 'x'),\n",
       " ('看上去', 'v'),\n",
       " ('这样', 'r'),\n",
       " (' ', 'x'),\n",
       " ('不多', 'd'),\n",
       " ('做', 'v'),\n",
       " ('评价', 'n'),\n",
       " (' ', 'x'),\n",
       " ('凑', 'v'),\n",
       " ('字', 'n'),\n",
       " ('的', 'uj'),\n",
       " ('非常', 'd'),\n",
       " ('不错', 'a'),\n",
       " ('，', 'x'),\n",
       " ('安装', 'v'),\n",
       " ('人员', 'n'),\n",
       " ('也', 'd'),\n",
       " ('很', 'd'),\n",
       " ('专业', 'n'),\n",
       " ('，', 'x'),\n",
       " ('值得', 'v'),\n",
       " ('信赖', 'n'),\n",
       " ('！', 'x'),\n",
       " ('给', 'p'),\n",
       " ('家里', 's'),\n",
       " ('买', 'v'),\n",
       " ('的', 'uj'),\n",
       " (' ', 'x'),\n",
       " ('挺好用', 'a'),\n",
       " ('的', 'uj'),\n",
       " (' ', 'x'),\n",
       " ('没', 'v'),\n",
       " ('在家', 'r'),\n",
       " (' ', 'x'),\n",
       " ('安装', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('很好', 'a'),\n",
       " ('之前', 'f'),\n",
       " ('装', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('太阳能', 'n'),\n",
       " ('。', 'x'),\n",
       " ('坏掉', 'v'),\n",
       " ('了', 'ul'),\n",
       " ('，', 'x'),\n",
       " ('现在', 't'),\n",
       " ('换', 'v'),\n",
       " ('了', 'ul'),\n",
       " ('还', 'd'),\n",
       " ('方便', 'a'),\n",
       " ('一些', 'm'),\n",
       " ('。', 'x'),\n",
       " ('真心', 'd'),\n",
       " ('感觉', 'n'),\n",
       " ('不错', 'a'),\n",
       " ('，', 'x'),\n",
       " ('装', 'v'),\n",
       " ('好', 'a'),\n",
       " ('当晚', 't'),\n",
       " ('三个', 'm'),\n",
       " ('人', 'n'),\n",
       " ('冲凉', 'a'),\n",
       " ('还有', 'v'),\n",
       " ('热水', 'n'),\n",
       " ('没用', 'v'),\n",
       " ('完', 'v'),\n",
       " ('，', 'x'),\n",
       " ('好评', 'v'),\n",
       " ('真心', 'd'),\n",
       " ('不错', 'a'),\n",
       " ('！', 'x'),\n",
       " ('很', 'zg'),\n",
       " ('喜欢', 'v'),\n",
       " ('，', 'x'),\n",
       " ('大', 'a'),\n",
       " ('品牌', 'n'),\n",
       " ('！', 'x'),\n",
       " ('！', 'x'),\n",
       " ('！', 'x'),\n",
       " ('啊', 'y'),\n",
       " ('赞', 'v'),\n",
       " ('一个', 'm'),\n",
       " ('！', 'x'),\n",
       " ('！', 'x'),\n",
       " ('已经', 'd'),\n",
       " ('安装', 'v'),\n",
       " ('好', 'a'),\n",
       " ('了', 'ul'),\n",
       " ('，', 'x'),\n",
       " ('希望', 'v'),\n",
       " ('没什么', 'l'),\n",
       " ('问题', 'n'),\n",
       " ('。', 'x'),\n",
       " ('就是', 'd'),\n",
       " ('这么', 'r'),\n",
       " ('完美', 'a'),\n",
       " ('。', 'x'),\n",
       " ('以后', 'f'),\n",
       " ('不用', 'v'),\n",
       " ('天天', 't'),\n",
       " ('等', 'u'),\n",
       " ('太阳', 'ns'),\n",
       " ('了', 'ul'),\n",
       " ('。', 'x'),\n",
       " ('售后', 'n'),\n",
       " ('好', 'a'),\n",
       " ('，', 'x'),\n",
       " ('预约', 'v'),\n",
       " ('安装', 'v'),\n",
       " ('挺', 'd'),\n",
       " ('方便', 'a'),\n",
       " ('的', 'uj'),\n",
       " ('！', 'x'),\n",
       " ('质量', 'n'),\n",
       " ('不错', 'a'),\n",
       " ('，', 'x'),\n",
       " ('暖水', 'n'),\n",
       " ('挺快', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('，', 'x'),\n",
       " ('支持', 'v'),\n",
       " ('不错', 'a'),\n",
       " ('，', 'x'),\n",
       " ('物超所值', 'i'),\n",
       " ('凌晨', 't'),\n",
       " ('一点', 'm'),\n",
       " ('下单', 'n'),\n",
       " ('，', 'x'),\n",
       " ('点', 'm'),\n",
       " ('多', 'm'),\n",
       " ('送到', 'v'),\n",
       " ('，', 'x'),\n",
       " ('点', 'm'),\n",
       " ('员工', 'n'),\n",
       " ('上门', 'ns'),\n",
       " ('安装', 'v'),\n",
       " ('，', 'x'),\n",
       " ('速度', 'n'),\n",
       " ('效率', 'n'),\n",
       " ('扛', 'v'),\n",
       " ('扛', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('！', 'x'),\n",
       " ('特别', 'd'),\n",
       " ('是', 'v'),\n",
       " ('赞扬', 'v'),\n",
       " ('安装', 'v'),\n",
       " ('师傅', 'nr'),\n",
       " ('，', 'x'),\n",
       " ('特别', 'd'),\n",
       " ('专业', 'n'),\n",
       " ('，', 'x'),\n",
       " ('一', 'm'),\n",
       " ('进门', 'v'),\n",
       " ('就', 'd'),\n",
       " ('换上', 'v'),\n",
       " ('自己', 'r'),\n",
       " ('的', 'uj'),\n",
       " ('鞋套', 'n'),\n",
       " ('，', 'x'),\n",
       " ('安装', 'v'),\n",
       " ('过程', 'n'),\n",
       " ('的', 'uj'),\n",
       " ('弄脏', 'n'),\n",
       " ('的', 'uj'),\n",
       " ('地方', 'n'),\n",
       " ('全部', 'n'),\n",
       " ('擦', 'v'),\n",
       " ('干净', 'a'),\n",
       " ('，', 'x'),\n",
       " ('好评', 'v'),\n",
       " ('！', 'x'),\n",
       " ('试用', 'vn'),\n",
       " ('了', 'ul'),\n",
       " ('，', 'x'),\n",
       " ('这个', 'r'),\n",
       " ('量', 'n'),\n",
       " ('，', 'x'),\n",
       " ('两三个', 'm'),\n",
       " ('人用', 'n'),\n",
       " ('刚好', 'd'),\n",
       " ('合适', 'a'),\n",
       " ('。', 'x'),\n",
       " ('东西', 'ns'),\n",
       " ('不错', 'a'),\n",
       " ('，', 'x'),\n",
       " ('价格', 'n'),\n",
       " ('很', 'zg'),\n",
       " ('实惠', 'vn'),\n",
       " ('，', 'x'),\n",
       " ('试', 'v'),\n",
       " ('了', 'ul'),\n",
       " ('下', 'v'),\n",
       " ('，', 'x'),\n",
       " ('加热', 'v'),\n",
       " ('很快', 'd'),\n",
       " ('，', 'x'),\n",
       " ('还', 'd'),\n",
       " ('省', 'n'),\n",
       " ('电', 'n'),\n",
       " ('，', 'x'),\n",
       " ('老爸', 'n'),\n",
       " ('说', 'v'),\n",
       " ('看起来', 'v'),\n",
       " ('很大', 'a'),\n",
       " ('气', 'n'),\n",
       " ('，', 'x'),\n",
       " ('遥控', 'vn'),\n",
       " ('挺', 'd'),\n",
       " ('灵敏', 'nr'),\n",
       " ('的', 'uj'),\n",
       " ('，', 'x'),\n",
       " ('客服', 'n'),\n",
       " ('很', 'zg'),\n",
       " ('负责', 'v'),\n",
       " ('，', 'x'),\n",
       " ('安装', 'v'),\n",
       " ('才', 'd'),\n",
       " ('花', 'v'),\n",
       " ('了', 'ul'),\n",
       " ('多', 'm'),\n",
       " ('，', 'x'),\n",
       " ('很', 'zg'),\n",
       " ('规范', 'n'),\n",
       " ('，', 'x'),\n",
       " ('强烈推荐', 'i'),\n",
       " ('！', 'x'),\n",
       " ('*', 'x'),\n",
       " ('下', 'f'),\n",
       " ('的', 'uj'),\n",
       " ('单', 'n'),\n",
       " ('。', 'x'),\n",
       " ('十四号', 'm'),\n",
       " ('送到', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('，', 'x'),\n",
       " ('打', 'v'),\n",
       " ('了', 'ul'),\n",
       " ('电话', 'n'),\n",
       " ('，', 'x'),\n",
       " ('今天', 't'),\n",
       " ('师傅', 'nr'),\n",
       " ('就', 'd'),\n",
       " ('来', 'v'),\n",
       " ('安装', 'v'),\n",
       " ('了', 'ul'),\n",
       " ('。', 'x'),\n",
       " ('师傅', 'nr'),\n",
       " ('态度', 'n'),\n",
       " ('不错', 'a'),\n",
       " ('，', 'x'),\n",
       " ('干活', 'a'),\n",
       " ('细致', 'a'),\n",
       " ('，', 'x'),\n",
       " ('拆', 'v'),\n",
       " ('了', 'ul'),\n",
       " ('老', 'n'),\n",
       " ('，', 'x'),\n",
       " ('连', 'nr'),\n",
       " ('后面', 'f'),\n",
       " ('几年', 'm'),\n",
       " ('没擦', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('墙面', 'n'),\n",
       " ('都', 'd'),\n",
       " ('给', 'p'),\n",
       " ('擦', 'v'),\n",
       " ('干净', 'a'),\n",
       " ('了', 'ul'),\n",
       " ('。', 'x'),\n",
       " ('赞', 'v'),\n",
       " ('一个', 'm'),\n",
       " ('。', 'x'),\n",
       " ('收费', 'n'),\n",
       " ('也', 'd'),\n",
       " ('比较', 'd'),\n",
       " ('合理', 'vn'),\n",
       " ('，', 'x'),\n",
       " ('*', 'x'),\n",
       " ('块钱', 'n'),\n",
       " ('。', 'x'),\n",
       " ('刚', 'd'),\n",
       " ('装', 'v'),\n",
       " ('上', 'f'),\n",
       " ('，', 'x'),\n",
       " ('还', 'd'),\n",
       " ('没用', 'v'),\n",
       " ('。', 'x'),\n",
       " ('之前', 'f'),\n",
       " ('海尔', 'nrt'),\n",
       " ('的', 'uj'),\n",
       " ('用', 'p'),\n",
       " ('了', 'ul'),\n",
       " ('四年', 'm'),\n",
       " ('多', 'm'),\n",
       " ('，', 'x'),\n",
       " ('漏水', 'n'),\n",
       " ('了', 'ul'),\n",
       " ('。', 'x'),\n",
       " ('售后', 'n'),\n",
       " ('来看', 'u'),\n",
       " ('说', 'v'),\n",
       " ('是', 'v'),\n",
       " ('内胆', 'n'),\n",
       " ('漏', 'v'),\n",
       " ('了', 'ul'),\n",
       " ('，', 'x'),\n",
       " ('修', 'v'),\n",
       " ('不如', 'c'),\n",
       " ('买', 'v'),\n",
       " ('新', 'a'),\n",
       " ('的', 'uj'),\n",
       " ('。', 'x'),\n",
       " ('现在', 't'),\n",
       " ('保修', 'v'),\n",
       " ('八年', 't'),\n",
       " ('。', 'x'),\n",
       " ('总体', 'n'),\n",
       " ('不错', 'a'),\n",
       " ('，', 'x'),\n",
       " ('给', 'p'),\n",
       " ('好评', 'v'),\n",
       " ('。', 'x'),\n",
       " ('非常', 'd'),\n",
       " ('让', 'v'),\n",
       " ('人', 'n'),\n",
       " ('非常', 'd'),\n",
       " ('满意', 'v'),\n",
       " ('，', 'x'),\n",
       " ('售后', 'n'),\n",
       " ('非常', 'd'),\n",
       " ('认真负责', 'n'),\n",
       " ('，', 'x'),\n",
       " ('从', 'p'),\n",
       " ('货物', 'n'),\n",
       " ('到达', 'v'),\n",
       " ('目的地', 'n'),\n",
       " ('开始', 'v'),\n",
       " ('就', 'd'),\n",
       " ('咨询', 'vn'),\n",
       " ('安装', 'v'),\n",
       " ('事宜', 'n'),\n",
       " ('！', 'x'),\n",
       " ('指导', 'n'),\n",
       " ('安装', 'v'),\n",
       " ('人员', 'n'),\n",
       " ('到场', 'd'),\n",
       " ('，', 'x'),\n",
       " ('一直', 'd'),\n",
       " ('都', 'd'),\n",
       " ('是', 'v'),\n",
       " ('大', 'a'),\n",
       " ('厂家', 'n'),\n",
       " ('的', 'uj'),\n",
       " ('感觉', 'n'),\n",
       " ('！', 'x'),\n",
       " ('不愧', 'a'),\n",
       " ('销量', 'n'),\n",
       " ('那么', 'r'),\n",
       " ('高', 'a'),\n",
       " ('！', 'x'),\n",
       " ('安装', 'v'),\n",
       " ('人员', 'n'),\n",
       " ('讲解', 'v'),\n",
       " ('细致', 'a'),\n",
       " ('，', 'x'),\n",
       " ('从头到尾', 'i'),\n",
       " ('满分', 'd'),\n",
       " ('好评', 'v'),\n",
       " ('！', 'x'),\n",
       " ('质量', 'n'),\n",
       " ('非常', 'd'),\n",
       " ('好', 'a'),\n",
       " ('，', 'x'),\n",
       " ('与', 'p'),\n",
       " ('卖家', 'n'),\n",
       " ('描述', 'v'),\n",
       " ('的', 'uj'),\n",
       " ('完全一致', 'i'),\n",
       " ('，', 'x'),\n",
       " ('非常', 'd'),\n",
       " ('满意', 'v'),\n",
       " (',', 'x'),\n",
       " ('真的', 'd'),\n",
       " ('很', 'zg'),\n",
       " ('喜欢', 'v'),\n",
       " ('，', 'x'),\n",
       " ('完全', 'ad'),\n",
       " ('超出', 'v'),\n",
       " ('期望值', 'n'),\n",
       " ('，', 'x'),\n",
       " (' ', 'x'),\n",
       " ('发货', 'n'),\n",
       " ('速度', 'n'),\n",
       " (' ', 'x'),\n",
       " ('非常', 'd'),\n",
       " ('快', 'a'),\n",
       " ('，', 'x'),\n",
       " ('包装', 'v'),\n",
       " ('非常', 'd'),\n",
       " ('仔细', 'ad'),\n",
       " ('、', 'x'),\n",
       " ('严实', 'ad'),\n",
       " ('，', 'x'),\n",
       " (' ', 'x'),\n",
       " ('物流', 'n'),\n",
       " ('公司', 'n'),\n",
       " (' ', 'x'),\n",
       " ...]"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "63794"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#分词及词性，去掉[]，拉平\n",
    "seg_content.head()\n",
    "\n",
    "seg_content_long=sum(seg_content,[])\n",
    "\n",
    "seg_content_long\n",
    "\n",
    "type(seg_content_long)\n",
    "len(seg_content_long)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('东西', 'ns')"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "seg_content_long[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "63794"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "63794"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#得到加长版的分词、词性\n",
    "word_long=[x[0] for x in seg_content_long]\n",
    "nature_long=[x[1] for x in seg_content_long]\n",
    "\n",
    "len(word_long)\n",
    "len(nature_long)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "63794"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#content_type拉长\n",
    "n_content_type=[ [x]*y for x,y in zip(list(reviews['content_type']),list(n_word))] #[x+1]*y,表示复制y份\n",
    "content_type_long=sum(n_content_type,[]) #表示去掉[]，拉平\n",
    "\n",
    "len(content_type_long)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(63794, 4)"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index_content</th>\n",
       "      <th>word</th>\n",
       "      <th>nature</th>\n",
       "      <th>content_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>东西</td>\n",
       "      <td>ns</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>收到</td>\n",
       "      <td>v</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>这么久</td>\n",
       "      <td>r</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>，</td>\n",
       "      <td>x</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>都</td>\n",
       "      <td>d</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index_content word nature content_type\n",
       "0              1   东西     ns          pos\n",
       "1              1   收到      v          pos\n",
       "2              1  这么久      r          pos\n",
       "3              1    ，      x          pos\n",
       "4              1    都      d          pos"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "review_long=pd.DataFrame({'index_content':index_content_long,\n",
    "                        'word':word_long,\n",
    "                        'nature':nature_long,\n",
    "                        'content_type':content_type_long})\n",
    "review_long.shape\n",
    "review_long.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "（2）去除标点符号、去除停用词"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['ns', 'v', 'r', 'x', 'd', 'ul', 'a', 'n', 'u', 'nr', 'p', 'y',\n",
       "       'vn', 't', 'c', 'm', 'l', 'b', 'i', 'uj', 'zg', 's', 'uz', 'nz',\n",
       "       'f', 'uv', 'ad', 'q', 'j', 'g', 'ud', 'an', 'nrt', 'vg', 'ng', 'k',\n",
       "       'o', 'mq', 'df', 'e', 'vd', 'z', 'nt', 'tg', 'rz', 'ug', 'yg', 'h',\n",
       "       'vq', 'ag', 'rr'], dtype=object)"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "review_long['nature'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(51436, 4)"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#去除标点符号\n",
    "review_long_clean=review_long[review_long['nature']!='x'] #x表示标点符合\n",
    "review_long_clean.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5748"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "['\\ufeff \\n', '说\\n', '人\\n', '元\\n', 'hellip\\n']"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#导入停用词\n",
    "stop_path=open('./stoplist.txt','r',encoding='UTF-8')\n",
    "stop_words=stop_path.readlines()\n",
    "\n",
    "len(stop_words)\n",
    "stop_words[0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['\\ufeff ', '说', '人', '元', 'hellip']"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#停用词，预处理\n",
    "stop_words=[word.strip('\\n') for word in stop_words]\n",
    "stop_words[0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4455"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(25172, 4)"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#得到不含停用词的分词表\n",
    "word_long_clean=list(set(word_long)-set(stop_words))\n",
    "len(word_long_clean)\n",
    "\n",
    "review_long_clean=review_long_clean[review_long_clean['word'].isin(word_long_clean)]\n",
    "review_long_clean.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(3)在原df中，再增加一列，该分词在本条评论的位置"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "index_content\n",
       "1       14\n",
       "2        4\n",
       "3        2\n",
       "4       20\n",
       "5       23\n",
       "        ..\n",
       "1996     6\n",
       "1997    20\n",
       "1998     3\n",
       "1999    10\n",
       "2000     4\n",
       "Name: word, Length: 1964, dtype: int64"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "25172"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#再次统计每条评论的分词数量\n",
    "n_word=review_long_clean.groupby('index_content').count()['word']\n",
    "n_word\n",
    "\n",
    "index_word=[ list(np.arange(1,x+1)) for x in list(n_word)] \n",
    "index_word_long=sum(index_word,[]) #表示去掉[]，拉平\n",
    "\n",
    "len(index_word_long)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index_content</th>\n",
       "      <th>word</th>\n",
       "      <th>nature</th>\n",
       "      <th>content_type</th>\n",
       "      <th>index_word</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>东西</td>\n",
       "      <td>ns</td>\n",
       "      <td>pos</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>收到</td>\n",
       "      <td>v</td>\n",
       "      <td>pos</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>这么久</td>\n",
       "      <td>r</td>\n",
       "      <td>pos</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>忘</td>\n",
       "      <td>v</td>\n",
       "      <td>pos</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>好评</td>\n",
       "      <td>v</td>\n",
       "      <td>pos</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index_content word nature content_type  index_word\n",
       "0              1   东西     ns          pos           1\n",
       "1              1   收到      v          pos           2\n",
       "2              1  这么久      r          pos           3\n",
       "5              1    忘      v          pos           4\n",
       "8              1   好评      v          pos           5"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "review_long_clean['index_word']=index_word_long\n",
    "review_long_clean.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "review_long_clean.to_csv('./1_review_long_clean.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(4)提取名词"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10189, 5)"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index_content</th>\n",
       "      <th>word</th>\n",
       "      <th>nature</th>\n",
       "      <th>content_type</th>\n",
       "      <th>index_word</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>东西</td>\n",
       "      <td>ns</td>\n",
       "      <td>pos</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>品牌</td>\n",
       "      <td>n</td>\n",
       "      <td>pos</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>信赖</td>\n",
       "      <td>n</td>\n",
       "      <td>pos</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "      <td>东西</td>\n",
       "      <td>ns</td>\n",
       "      <td>pos</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>整体</td>\n",
       "      <td>n</td>\n",
       "      <td>pos</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    index_content word nature content_type  index_word\n",
       "0               1   东西     ns          pos           1\n",
       "11              1   品牌      n          pos           6\n",
       "14              1   信赖      n          pos           8\n",
       "16              1   东西     ns          pos           9\n",
       "17              1   整体      n          pos          10"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_review_long_clean=review_long_clean[[ 'n' in nat for nat in review_long_clean.nature]]\n",
    "n_review_long_clean.shape\n",
    "n_review_long_clean.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "n      8086\n",
       "nr      724\n",
       "vn      699\n",
       "ns      416\n",
       "nz      136\n",
       "ng       60\n",
       "nrt      36\n",
       "an       25\n",
       "nt        7\n",
       "Name: nature, dtype: int64"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_review_long_clean.nature.value_counts()\n",
    "n_review_long_clean.to_csv('./1_n_review_long_clean.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "（5）词云图"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<wordcloud.wordcloud.WordCloud at 0x1c4286ecd08>"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<wordcloud.wordcloud.WordCloud at 0x1c4286ecd08>"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1440x720 with 0 Axes>"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1c428edef48>"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(-0.5, 1023.5, 857.5, -0.5)"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "font=r\"C:\\Windows\\Fonts\\msyh.ttc\"\n",
    "\n",
    "background_image=plt.imread('./pl.jpg')\n",
    "wordcloud = WordCloud(font_path=font, max_words = 100, background_color='white',mask=background_image) #width=1600,height=1200, mode='RGBA'\n",
    "wordcloud.generate_from_frequencies(Counter(review_long_clean.word.values))\n",
    "wordcloud.to_file('1_分词后的词云图.png')\n",
    "\n",
    "plt.figure(figsize=(20,10))\n",
    "plt.imshow(wordcloud)\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<wordcloud.wordcloud.WordCloud at 0x1c429f11088>"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<wordcloud.wordcloud.WordCloud at 0x1c429f11088>"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1440x720 with 0 Axes>"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1c428eae348>"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(-0.5, 688.5, 583.5, -0.5)"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "font=r\"C:\\Windows\\Fonts\\msyh.ttc\"\n",
    "\n",
    "background_image=plt.imread('./p4.jpg')\n",
    "wordcloud = WordCloud(font_path=font, max_words = 100, mode='RGBA' ,background_color='white',mask=background_image) #width=1600,height=1200\n",
    "wordcloud.generate_from_frequencies(Counter(n_review_long_clean.word.values))\n",
    "wordcloud.to_file('1_分词后的词云图(名词）.png')\n",
    "\n",
    "plt.figure(figsize=(20,10))\n",
    "plt.imshow(wordcloud)\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 三、模型构建"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### （一）基于决策树的情感分类"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1964"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "1964"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "['东西 收到 这么久 忘 好评 品牌 值得 信赖 东西 整体 个人感觉 不错 值得 拥有',\n",
       " '安装 师傅 力 感谢',\n",
       " '安装 满意',\n",
       " '收到 自营 商品 发货 速度 品质 保障 安装 效果 宝贝 喜欢 冬天 小时 热水 自营 值得 信赖 值得 推荐 自营',\n",
       " '几次 评价 产品 满意 加热 保温 时间 长 售后服务 特别 主动 打电话 询问 送货 情况 帮 安装 非常感谢 售后 大姐 服务 下次 购买',\n",
       " '物美价廉 特别 划算 加热 速度 家里 不错 特别',\n",
       " '价格合理 配置 高 物美 价值',\n",
       " '老师 装 装修 中 试 希望',\n",
       " '五分 习惯 送 装 装修 中 吊顶 装 话 醉 遥控器 电池 安装 哥 车里 备用 给装 赠送 电动牙刷 空气 净化器 等待 配送 中 时间 冰箱 降 洗衣机 降 降 小厨 宝降 烟灶 套降 客服 上报 解决 电话 通知 等待 中',\n",
       " '安装 小哥 工作 尽心 家 老房子 安装 家 费力 安装 不错 整栋 楼 热水 裙子 只能 装 小哥 点 赞 二个 一如既往 好用 品牌 质量',\n",
       " '前 天下 单买 用上 发现 街上 卖 便宜 店家 网上 他家 贵 老板 面 网上',\n",
       " '冲着 以内 变频 级 能效 制冷 效果 不错',\n",
       " '购物 电器 问 型号 型号 相识 家电 下线 安装 师傅 挺好 加热 很快 购物 满意 走用 安装费 花元 喷头 槊 料 花 伞 安装 麻烦',\n",
       " '物流 早上 送来 中午 安装 安装 安装 师傅 负责 效果 售后 确实',\n",
       " '满意 价格 产品质量 货运 安装 调试 工作人员 服务态度 售后服务',\n",
       " '收费 安装 速度 很快 管道 走 整齐 不错',\n",
       " '几天 想 晒 差点 忘 这款 喜欢',\n",
       " '安装 没用 不多 做 评价 凑 字',\n",
       " '不错 安装 人员 专业 值得 信赖',\n",
       " '家里 挺好用 在家 安装 很好',\n",
       " '装 太阳能 坏掉 换',\n",
       " '真心 感觉 不错 装 当晚 三个 冲凉 热水 没用 好评',\n",
       " '真心 不错 喜欢 品牌 赞',\n",
       " '安装 希望 没什么',\n",
       " '完美 不用 天天 太阳',\n",
       " '售后 预约 安装',\n",
       " '质量 不错 暖水 挺快 支持',\n",
       " '不错 物超所值',\n",
       " '凌晨 一点 下单 点 送到 点 员工 上门 安装 速度 效率 扛 扛 特别 赞扬 安装 师傅 特别 专业 进门 换上 鞋套 安装 过程 弄脏 地方 擦 干净 好评 试用 量 两三个 人用 合适',\n",
       " '东西 不错 价格 实惠 试 加热 很快 省 电 老爸 很大 气 遥控 灵敏 客服 负责 安装 花 规范 强烈推荐',\n",
       " '十四号 送到 电话 师傅 安装 师傅 态度 不错 干活 细致 拆 几年 没擦 墙面 擦 干净 赞 收费 块钱 装 没用 海尔 四年 漏水 售后 内胆 漏 修 新 保修 八年 总体 不错 好评',\n",
       " '满意 售后 认真负责 货物 到达 目的地 咨询 安装 事宜 指导 安装 人员 到场 厂家 感觉 不愧 销量 高 安装 人员 讲解 细致 从头到尾 满分 好评',\n",
       " '质量 卖家 描述 完全一致 满意 真的 喜欢 超出 期望值 发货 速度 包装 仔细 严实 物流 公司 服务态度 运送 速度 很快 满意 购物',\n",
       " '速度 服务 安装 师傅 悲 催 号到 号 便宜 安装 材料费 花',\n",
       " '收到 安装 挺好用 质量 不错 安装工人 服务态度 教给 快递 挺快 满意',\n",
       " '一段时间 总体 感觉 不错 保温 性能 遥控器 功能 小孩子 值得 推荐',\n",
       " '非常感谢 商城 给予 优质 服务 仓储 管理 物流配送 做 送货 配送 员 热情 有时候 收件 安排 时间 配送 商城 售后 管理 解 客户 忧患 排除万难 给予 购物 体验',\n",
       " '国庆 活动 农村 送货上门 送到 装上 试用 很好 烧水 水量 足 压力 使用方便 遥控器 操作',\n",
       " '速度 第一次 订单 点 事故 地址 选错 区域 幸好 客服 帮忙 活动 价格比 平时 优惠 安装 热水 很快 功耗 牌子 安装 师傅 安装 材料 报表 报表 打勾 完美',\n",
       " '每次 喜欢 东西 几天 几天 特别 放心 品牌 简单 漂亮 喜欢 侧面 安装 主动 打电话 问 价格 明 我家 旧 拆下来 换 新 安装 师傅 很快 弄 态度 手脚 麻利 花 块钱 拆 旧机 管子 钱 仔细 算 反正 效果 无所谓 旧 年 没坏 品牌 没了 希望 经久耐用',\n",
       " '满意 送货 师傅 搬到 楼 安装 师傅 不错',\n",
       " '昨天 装 第一次 烧水 很快 性价比 超高',\n",
       " '高端 大气 上档次',\n",
       " '下单 安装 正品 值得 推荐',\n",
       " '期盼 之中 终于 心爱 东东 谢谢',\n",
       " '产品 师傅 安装 负责',\n",
       " '还防 干烧',\n",
       " '外观 时尚 简约 白色 显 大气 一键 快速 升温 省 时 一键 中温 保温 省力 远红外 遥控 控制 便捷 液晶 大屏 一目了然 安装 师傅 细心 周到 服务 温暖 送 小花 洒 正好 我家 坏 无微不至 品牌 值得 信赖',\n",
       " '线 拍下 产品 发货 速度 很快 预约 上门 安装 安装 人员 业务 熟练 素质 高 牌子 值得 信赖 加热 升水 够 两个 人用 愉快 购物 体验 性价比 极高 一款',\n",
       " '产品 没得说 包括 洗衣机 安装 师傅 装 逼 免费 安装 材料 装完 自带 几个 接头 收 我块 材料费 变着法 收费',\n",
       " '购物 快递 力 购物 快递 力 理解 送货 量 大师傅 忙不过来 宝贝 留心 客服 人员 告知 算 倒霉 安装 安装 师傅 很好 顾客 安装 好看 周到 关心 收费 两个 脚法 管子 收费 满意 购物 下次 用后感',\n",
       " '品牌 值得 信赖 就用 新房子 装修 售后 特别 正规 安装 人员 进门 穿鞋 套 耐心 谅解 贴心 满意 购物',\n",
       " '购买 自营 商品 拥有 七天 理由 退换货 消费者 无忧 购买 送货 电 电子 百货 厂品 购买 信赖 自营',\n",
       " '家里 是用 好多年 换 不错',\n",
       " '升 预约 洗浴 无线 遥控 不错 送货 安装 不错 家里人 满意 升 预约 洗浴 无线 遥控 不错 行 价格 总 波动',\n",
       " '很好 包装 完整 外形 大气 简洁 卫生间 颜色 搭配 热水 速度 大容量 足够 一家 三口 真的 太号 太好了 欧 天 不敢相信 日子 坐上 幸福 列车 奔 幸福 海洋 哈哈哈哈 哈哈哈 哈哈哈',\n",
       " '师傅 安装 服务态度 不错 品牌 送货上门 速度 很快',\n",
       " '品牌 值得 信赖 第二回 购买 加热 速度 洗澡 不用 送货 安装 安装 师傅 气 讲解 到位 师傅 还给 收拾 卫生 真的 满意 不的 满分',\n",
       " '购买 自营 商品 拥有 天无 理由 退换货 消费者 无忧 购买 关键 入门 门槛 质量 高 电子 百货 产品 购买 自营 产品 信赖 自营',\n",
       " '确实 不错 收到 安装 水温 不错 冬天 洗澡 不用 愁',\n",
       " '不错 太棒了 一级 变频 出热 水量 价格 合适',\n",
       " '牌子 买回来 值得 撇开 价格 牌子 摆在 就让 放心 收到 第一 感觉 升 容积 足够 三个 洗 试 不错 满意 购物 五星 好评',\n",
       " '收到 外观 颜值 高 简洁 大方 预约 安装 很快 到货 第二天 师傅 一大早 免费 安装 收 材料费 品牌 值得 信赖',\n",
       " '东西 不错 质量 实用 后悔 外观 大气 颜色 漂亮 喜欢 多款 款 性价比 物流 师傅 热情',\n",
       " '品牌 可以信赖 物流 安装 完美 隔天 预约 安装 安装 服务 不错 花 材料费 材料 包 三年',\n",
       " '家 储水量 好几个 下次 来买 品牌 介绍 朋友 希望 越做越',\n",
       " '非常感谢 商城 给予 优质 服务 仓储 管理 物流配送 做 送货 配送 员 热情 有时候 收件 安排 时间 配送 商城 售后 管理 解 客户 忧患 排除万难 给予 购物 体验 顺颂 商祺',\n",
       " '尺寸 大小 正好 质量 不错 品牌 值得 信赖 安装 师傅 专业 美观 实用',\n",
       " '正品 无疑 信奈 第一次 网购 电 售后服务 很快 上门 安装 安装 费用 太贵 热水 接到 洗脸盆 太阳能 管道 改造 总共 花 安装 材料 详细 单子 坑 商城 封顶 太 高 语 感觉 宰 安装 材料 透明 换 混 水阀 很贵 划算 机器 倒 便宜 热水 倒 从度 度用 小时 分钟 洗澡 费水 升 太小 洗 半小时 三十度 空间 有限 要买 大点 容量',\n",
       " '电视 装修 十月 囤货 期待 一万 送 空气 净化器',\n",
       " '喜欢 值得 信任 服务 实在 一流 谢谢',\n",
       " '品牌 值得 信赖 送货 晚上 点 下单 第二天 下午 收到 外箱 外观 完好 外观 不错 很大 操作 面板 不错 装 再来 追评 总体 满意',\n",
       " '产品 不错 外观 漂亮 实惠 号 拍 留错 电话 没收 到货 客服 客服 态度 效率 后号 到货 号 安排 安装 太阳能 转换 材料费 一共 收 感觉 贵 安装 小哥 态度 安装 仔细 小哥 实在 款 物美价廉 感觉 不错 评论',\n",
       " '不错 中午 送来 下午 师傅 安装 加热 很快',\n",
       " '品牌 选择 品牌 售后 质量 保障 千元 购买 经济 实惠 电脑 控 温带 遥控 实体店 便宜 级 能耗 加热 稍微 慢 推荐 购买 加热',\n",
       " '价格合理 卫生间 点 建议 买前 先量 尺寸 安装 师傅 负责 安装 材料价格 透明 贵 一共 安装 材料费 花 期待 新房 装修',\n",
       " '安装 比较满意 送货 安装 免费 材料 收费 购买 材料 九折 材料 费用 地方 管件 情况 打折 安装 师傅 态度 点 赞',\n",
       " '依然 棒棒 信赖 家电 售后 师傅 一级 棒',\n",
       " '第次 电器 一如既往 物流 安装 服务 更是 无话可说 第四个 质量 信得过 支持 支持 电器 希望 更好',\n",
       " '一个月 评价 安装 师傅 认真负责 质量 不错 后期 咨询 安装 师傅 登门 指导 售后 不错 安装费 小贵 五星 好评',\n",
       " '售后 不错 海尔 海尔 到货 送货 打电话 推 退 颜值 颜值 高大 尚 很漂亮 插座 换 开关 加热 洗澡 关掉 开关 省去 拔 插头 安全隐患 安装 人员 态度 材料费 收 块',\n",
       " '第一次 买大 东西 感觉 宝贝 不错 实惠 加热 慢 一点 度 加热 更慢 总体 性价比 高',\n",
       " '机子 不错 装 特 通水 通电 试 下才 评价 美观 大方 使用方便 牌子 赞',\n",
       " '快递 力 收到 宝贝 打开 质量 不错 原因 安装 售后 打电话 解决 感觉 满意 下次 光临',\n",
       " '家电 家电 选择 品牌 值得 信赖 正品 低价 无假货 售后服务 一体化 态度',\n",
       " '特别 搞 速度 性价比 高 物流 安装 很快 声音 热 速度 赞',\n",
       " '发货 包装 完整 价格 实惠 客服 态度 收到 货 迫不及待 打开 时 兴奋 包装 破损 超级 棒 质量 物有所值 宝贝儿 真心 不错 说实话 真的 喜欢 正品 性价比 高 便宜 真的 赚 真的 值得 购买 包装 无法形容 店家 售后 力 服务态度 特别 发货 速度 客服 特别 热情 物流 超级 好评 好评 喜欢 真心 谢谢 店家 客服 售后 人员 耐心 回复 回复 态度 发货 快递 送到 很快 一点 实惠 店家 细心 包裹 结实 赞 快递 哥 态度 超级 棒 超赞 ....',\n",
       " '昨天 下单 送货 快递 员 厉害 帮 扛 楼 辛苦 快递 员',\n",
       " '配送 物流 辣 款式 好看 大方 安装 装 一个多 礼拜 回来 评论 加热 速度 赞美 年 质保 放心 售后服务',\n",
       " '安装 颜值 满分 东西 力 这回 洗菜 洗手 用到 热水 满意 服务 不错 安装 师傅 技术 分 技术 娴熟 辅料 一共 花',\n",
       " '物流 速度 值得 信赖 安装',\n",
       " '装修 几天 总体 美观大方 实用 价格便宜',\n",
       " '安装 师傅 不错 帮 扫地 解决问题 真心 谢谢 大赞',\n",
       " '昨天 收到 拆开 错 我家 电器 老家 修路 特 不好 走 快递 员 帮忙 搬 家里 太 感谢',\n",
       " '安装 师傅 上门 安装 移花 洒 墙 开 洞 问 好几个 水管 走向 试 还好 爆管 切割 管子 安装 试水 水 洗手台 出水 上满 不用 温度 设在 度 一个多 小时 到度 线 长度 表 明码标价 收 安装费 师傅 打扫 工作 现场 走 晚上 断电',\n",
       " '东西 实用 家里人 满意 喜欢 朋友 犹豫 品牌 金 公公 东西 不错 选择',\n",
       " '跟得上 步伐 温度 显示 清晰可见 人性化 遥控器 东西 不用 站 高 用手 按了 安排 安装 师傅 热情 安装 仔细 周全 赞',\n",
       " '价格 实惠 师傅 安装 挺好',\n",
       " '安装 比较满意 安装 免费 材料 收费 购买 材料 九折 材料 费用 地方 管件 情况 打折 安装 师傅 态度 点 赞',\n",
       " '满意',\n",
       " '物流 挺快 昨天下午 刚刚 买下 收到 货 包装 完整 破损 师傅 安装 不错',\n",
       " '收到 几天 安装',\n",
       " '在家 当天 到货 电话 预约 当天 安装 装修 工人 看着 安装 安装 水 调试 照片 只能 回家 追加 整体 服务 物流 特别 准时 好评',\n",
       " '送货 很快 预约 安装 师傅 安装 安装 师傅 专业 安装 很快 没用 效果',\n",
       " '品牌 选择 品牌 售后 质量 保障 一千元 购买 经济 实惠 电脑 控 温带 遥控 实体店 便宜 唯一 瓦 加热 稍慢 一点点',\n",
       " '不错 很好 包装 结实 送货上门 我家 楼 电梯 师傅 送上来 服务 操作 简洁 家里 老人 一学 不错 品牌 值得 信赖',\n",
       " '平房 安装 师傅 安装 哥们 安装 增压泵 水压 图片 哥们 改 水路 接 电线 加 水泵 全能 人才',\n",
       " '数字 显示 准确 有没有 热水 插座 得用 免费 安装 换 根新 水管 安装 师傅 熟练 装好',\n",
       " '家里 品牌 性价比 高 值得 信赖 家电 搞定 配送 快捷 打电话 预约 安装 安装 师傅 统一 着装 干活 效率高 满意',\n",
       " '真心 不错 品牌 值得 信赖 安装 师傅 态度 速度 很快 不到 小时 安装 管件 收费 质量 不错 赞 效果',\n",
       " '收到 当天 下午 安装 人员 上门 安装 老婆 满意 容量 外观 大气 上档次 满意 购物 服务 没话说 物流 速度 客户 客服 安装 回 电话 问安 装满 满意 售后 电话 服务 满分',\n",
       " '快递 小哥 服务 特别 到位 送到 八楼 辛苦 外面 下着 大雨 安装 人员 唯一 配件 小贵 包装',\n",
       " '配送 安装 快捷 服务态度 不错 请客 服 款 机子 需 电源插座 商品 规格 表里 却是 加热 速度 分钟 度 节奏 十多 度烧 到度 分钟 洗澡水 足够 两个 洗 洗 过程 中 水温表 下降 出水 温度 依然 很热 表象 说明书 里 提到 补充 一段时间 再来 追评 家里 微波炉 电饭煲 豆浆机 烧 水壶 全 国产 质量 越来越',\n",
       " '不错 服务',\n",
       " '订货 第二天 到货 发货 速度 超快 货到 客服 电话 安装 老家 乡村 售后 安装 人员 小时 家 安装 服务',\n",
       " '安装 比较复杂 师傅 弄 好久 成品 效果 不错 唯一 卫生间 弄 乱 看着',\n",
       " '宝贝 安装 师傅 太 叼 强 奸 角阀 安装 硬 角阀 好久 不肯 安装 办法',\n",
       " '第二天 送到 很棒 安装 师傅 感谢',\n",
       " '品质 值得 信赖 服务 值得 点 赞 感谢 曹 师傅 安装 专业 下雨天 衣服 湿 非常感谢 信赖',\n",
       " '质量 可靠 大功率 舒服 不错 安装 安 花 一百块 钱 省心',\n",
       " '每次 不错 经济 实惠',\n",
       " '家里 电器 品牌 放心 安装 特别 购物 舒服',\n",
       " '很棒 牌子 八年 质保 值得 信赖 安装 师傅 有心 安装 还给 打扫卫生 满意 五星 好评',\n",
       " '不错 安装 昨天晚上 早上 下午 安装 完毕 洗澡 澡',\n",
       " '物流 两天 价格 回到 自营 满意 安装 师傅 服务周到 功率 瓦 烧水 慢点',\n",
       " '安装 上午 送货 售后 电话 预约 安装 午门 安装 辅料 共元',\n",
       " '收到 货 上门 安装 服务态度 超好 安装 花钱 花 钱 实体店 强多 便宜',\n",
       " '快递 这块 服 说好 号 下午 晚上 下单 安装 只用 天 服气',\n",
       " '东西 收到 几天 东西 挺好用 不错 下次 光顾',\n",
       " '加热 太阳能 安装 师傅 功夫 安装 很快 不错 推荐 价格便宜',\n",
       " '品牌 值得 信任 送货 速度 超快 安装 师傅 非常热心 五星 好评',\n",
       " '好长时间 昨天 加热 速度 挺快 简单 遥控 没给 送 客服 补发 卖家 总会 亲 找 找 朋友 扔 外面 不错 前天 推荐 我家 楼上',\n",
       " '产品 不错 够用 美观 家人 满意 老家 近期 购买 一台',\n",
       " '装 不错 暂时 管子 没用 追加 总体 不错',\n",
       " '安装 师傅 安装 很好 机器 不错 送货 很快 安装 很快 满意',\n",
       " '很好 服务 力 家里 一下子 两个',\n",
       " '帅气 安装 人员 礼貌 安装 手续 产品 没用 发表 言论',\n",
       " '挺不错 一款 机器 性价比 高 安装 师傅 力 中午 打电话 半小时',\n",
       " '很好 不知 电费 安装 师傅 用心 加装 第三 图 态度 给钱 没什么',\n",
       " '装 小时 漏水 喊 师傅 维修 修好 浪费 顾客 时间 半夜 粗心 商家',\n",
       " '品质 外观 美 性能 更是 厉害 喜欢',\n",
       " '安装 行 安装 师傅 力 总共 材料费 花 大洋',\n",
       " '机器 服务 帮 安装 到位 师傅 热心 考究 值得 拥有',\n",
       " '安装 师傅 态度 几天 发现',\n",
       " '品牌 值得 信赖 实惠 好用 家人 喜欢',\n",
       " '家电 样样 值得 信任',\n",
       " '一阵 安装 俩个 密封 皮圈 漏用',\n",
       " '很好 很好 服务 送货 速度 质量 再接再厉',\n",
       " '不错 哥们 推荐 点 赞 哥们 满意',\n",
       " '安装 师傅 耐心 点 插孔 不错 信赖',\n",
       " '感觉 超大 安装 啥样 等待 安装 图',\n",
       " '感觉 不错 水流',\n",
       " '高端 大气 上档次 快递 师傅 送货上门 安装 师傅 技术 一流',\n",
       " '不错 烧水 很快 安装 洗 热水澡',\n",
       " '很好 东西 小巧 占 地方 希望 五年',\n",
       " '不错 洗上 安装 到位',\n",
       " '品牌 值得 信赖 热水 质量保证',\n",
       " '顶上 明珠 照明 最新 安装 快讯 感谢 双语 高层 楼 业主 本店 支持 简约 时尚 大气 顶上 明珠 照明 装修 买灯 看完 顶上 明珠 做 优惠活动 持续 天天 特价 产品',\n",
       " '漂亮 加热 挺快 安装 师傅 产品 外 管子 费 花 多元 总体 行',\n",
       " '到货 安装 安装 人员 服务周到 期待 质量 杠杠',\n",
       " '价格公道 安装 师傅 不错 好评 价格公道 安装 师傅 不错 好评 价格公道 安装 师傅 不错 好评 价格公道 安装 师傅 不错 好评 价格公道 安装 师傅 不错 好评 价格公道 安装 师傅 不错 好评',\n",
       " '物美价廉 加热 安装 师傅 力 安装 到位 服务 热情 到位 安装 还给 测 漏电 值得 信赖',\n",
       " '家里 藤县 快递 员 客服 大大的 赞赞 赞 责任心 家里 老妈 在家 干活 收货 快递 员 客服 厌烦 打电话 确认 态度 满意',\n",
       " '热水 很快 保温 智能 价格便宜',\n",
       " '简单 够用 设置 花里胡哨 高科技 华而不实 功能 简简单单 一款 洗澡 变得 遥控 一建 保温 省心',\n",
       " '东西 力 第二天 送到 师傅 安装 配件 一共 安装 几天',\n",
       " '九九 感觉 还好',\n",
       " '升 大容量 遥控',\n",
       " '品牌 值得 信赖 好好',\n",
       " '好评 活动 购买 价格 实惠 送货',\n",
       " '安装 很快 专业 一百个 赞',\n",
       " '送货 很快 安装 师傅 速度',\n",
       " '产品 五星级 图片 美观',\n",
       " '烧水 挺快 师傅 安装',\n",
       " '看去 美观 好不好',\n",
       " '没用 换 插座 高大',\n",
       " '关电 热水 冲凉 满意',\n",
       " '安装 师傅 用心 东西 不错',\n",
       " '满意 安装 师傅 收费',\n",
       " '满意 五个 星',\n",
       " '棒 安装 很心',\n",
       " '满意 货一 发出 时 收到 售后服务 电话 货到后 送货员 送到 楼 售后 安装 安装 员 棒 安装 花 银子 多元 最终 花 还给 列 列 明细 真不错',\n",
       " '送货 服务 周到 外观 高端 大气 上档次 远程 遥控 控制 官方 客服 预约 安装 反馈 当天 确认 时间 第二天 派 安装 师傅 安装 师傅 专业 耐心 热心 讲解 注意事项 当天 试用 了下 触屏 效果 加热 容量 足够 一家人 真心 品牌 性价比 高 后续 效果 第二台 推荐 身边 家人 朋友 购买',\n",
       " '东西 遥控 智能 控制 省 电 喜欢 液晶屏幕 显示 温度 感觉 好看 电器 确实 没话说 品牌 值得 信赖',\n",
       " '宝贝 住 地方 旧 房子 收货 第一天 安装 师傅 师傅 墙壁 老式 挂不住 掉下来 砸 当天 下午 申请 退货 隔壁 装 安装 师傅 帮忙 装 第二天 换 师傅 帅哥 装 特别 满意 安装 帅哥 赞',\n",
       " '发货 速度 产品 不错 试用 评价 很好 大大的 赞 介绍 朋友 莱买 信赖',\n",
       " '物流 送货 满意 安装 过程 折磨 服务 队伍 海口 莫大 质疑 安装时间 难约 约定 时间 主动 电话 一次次 确认 不上 师傅 师傅 辞退 换人 明天 装 下雨 明天 安装 那天 客服 预约 时间 师傅 门前 时 师傅 安装 过程 顺利 水路 布置 死板 沟通 困难 过程 愉快 感谢 师傅 最终 建议 师傅 喊 很忙 忘 开 水阀 电源 接上 报警 说明书 解决 收费 明细 口头 问 收据 放心 拍照 上报 帮 整理 卫生 师傅 卫生间 抽 支烟 烟头 扔 地上 一句 话 等不及 确认 收拾 工具 走 喊 很忙 丢下 一句 走 试用 算 理想 两处 混 水阀 噪音 不小 遥控 电池 盖 不知 未 研究 明白 打开 盖 麻烦 实事求是 陈述 仅供参考',\n",
       " '物流 挺快 第天 第天 早上 下午 安装 购物 品牌 值得 信任 维有 一点 不好 安装 师傅 地道 条 公分 条 公分 波浪 铜 三通 材料 老婆 查 公司 收费 标准 语 希望 公司 完善 有个 形象',\n",
       " '刚刚 安装 试用 不错 升温 挺快 平时 热水 容量 全家 够用 遥控器 面板 不太好 操作 乱',\n",
       " '机器 不错 加热 安装 师傅 熟练 安装 标准 材料费 师傅 耐心 好评',\n",
       " '满意 购物 准时 送达 安装 师傅 当天 下午 安装 完毕 收 三十 拆旧 费 安装 免费 特别 送货 小哥 安装 师傅 点 赞',\n",
       " '不错 价格 实惠 下单 三天 送到 家 到货 安装 时间 满意',\n",
       " '第一次 网上 家电 真的 值得 每户 家庭 拥有 安装 师傅 主动 问 安装 态度',\n",
       " '送货 没什么 服务 客服 尽责 提 用户 着想 安装 人员 安装 又快又好 卫生 配件 收费 透明 很好 购物 体验',\n",
       " '还好 到货 有人 打电话 安装 服务 不错 满意 好评',\n",
       " '不错 瑕疵 配送 遥控 损坏 客服 补发 总体 算 满意',\n",
       " '产品 不错 很漂亮 功能 功能 后续 来评',\n",
       " '价格便宜 安装 师傅 负责',\n",
       " '夫妻 档 上阵 改进 地方 服务 没得说 安装 人员 征求 用户 意见 打孔 还给 偏 距离 顶部 相差 七八 公分 晚上 乞丐 版 着用',\n",
       " '东西 暂时 材料费 收 当天 送货 不到 两 小时 安装 不错',\n",
       " '速度 昨天 下单 到货 安装 速度 很快 客服 态度 送货 师傅 服务 帮 送到 家 安装 师傅 不错 外面 便宜 划算',\n",
       " '乡下 送货上门 上门 安装 力 送完 货 安装 师傅 来电 安装 不错 好评 加持',\n",
       " '装上 很好 热 很快 安装 时 配件 花 贵 懒得 就用 安装 人员 带来',\n",
       " '安装 安装 曹勤智 师付 服务态度 专业 帮 拆除 旧 重新安排 线路 美观 家人 满意 表示感谢 产品 放心 买大 品牌 价康 物美 售后服务 值得 信赖',\n",
       " '支持 安装 师傅 服务 送货 师傅 服务 送到 楼 安装 固定 实惠 满意',\n",
       " '东西 不错 安装工人 太 差劲 家里 老人 懂 旧 开关 喷头 换掉',\n",
       " '安装 安装 师傅 真的 很棒 试 机子 一切正常',\n",
       " '安装 力 老牌子 值得 信赖 我家 墙壁 矮 一点 师傅 耐心 帮忙 改',\n",
       " '外观 漂亮 水量 正好 适合 合 女儿 不用 需不需要 关 电源',\n",
       " '价格 贵 一共 花 一百块 钱 搞定 安装 人员 专业 工作 牌 穿 工作服',\n",
       " '好看 东西 不错 安装 师傅 用心 服务 超级',\n",
       " '容量 安装 位置 有限 刚刚 暂时 发现',\n",
       " '快递 很快 包装 精美 商品质量 服务',\n",
       " '快递 很快 给力 实物 不错',\n",
       " '送货 很快 安装 师傅 热情 服务 比较满意',\n",
       " '物流 货到 打电话 安装 品牌 值得 信赖',\n",
       " '特别 满意 很快 物流 服务 安装 配件 感觉 贵 点',\n",
       " '物流 物美价廉 值得 信赖 选择',\n",
       " '支持 送货 质量 家里 东西 全部都是',\n",
       " '不错 性价比 超高 大件 商品 值得 信赖 电商 平台',\n",
       " '安装 小伙子 负责 热情 礼貌 看起 专业 送货 师傅 素质 低 晚 分钟 家门口 大呼小叫 真个 楼 听到 感觉 安装 后期 评价 值得 信赖',\n",
       " '满意 五星 好评 下次',\n",
       " '卖家 服务 满意 购物 两个',\n",
       " '物流 没的说 安装 过程 中 安装 技术 太 过关 烫个 两根 烫好 烫 两次 醉 溢水 找 安装 管件 也了',\n",
       " '国庆 假期 送货 隔天 效果 温度 很快 价格 涨 希望 产品 经久耐用 不负 期望',\n",
       " '一如既往 安装 师傅 服务 到位 家里 家用电器',\n",
       " '质量 服务 很棒 送货员 用心',\n",
       " '物品 质量 不错 东西 大气 物流 很快 服务 满意',\n",
       " '信赖 超级 棒 外馆 好看 性价比 高 安装 师傅 好评',\n",
       " '不错 安装 师傅 很快 安装 用心 实在 太 感谢',\n",
       " '头 评论 紧张 字 显 文采 好不好 成 热门 写 太 招遥 写 深奥 看不懂 怎样才能 写出 飘逸 潇洒 水平 半小时 写 太 激动',\n",
       " '安装',\n",
       " '物流 超快 安装 五星 好评',\n",
       " '正品 行货 送货 特别 实在 太 赞',\n",
       " '家里 装 一台 强排 煤气 十年 打不着 火怕 装 一台 试试看 好不好 好用 淘汰 台 煤气 喜欢 售后服务 昨天 收到 货 打电话 售后 预约 早上 装好 装机 师 说好 材料 安装 调试 全包 这位 安装 师傅 服务 热情 特别 交待 一年 换镁 棒',\n",
       " '品牌 值得 信赖 值得 购买 烧水 很快 生活 必需品',\n",
       " '装上 管道 辛苦 安装 师傅 刚试 挺好 好评',\n",
       " '快递 小哥 服务 正品 质量 保障',\n",
       " '总体 不错 一段时间',\n",
       " '东西 整体 看好 不错',\n",
       " '送 安装 两位 小哥 辛苦 东西 没用 小哥 满分',\n",
       " '完美 品牌 物美价廉 值得 拥有',\n",
       " '不错 唯一 满意 安装 师傅 安装 时 收 材料费 安装 时 小心 放置 灶 墙渣 致使 旁边 墙渣 刮 花',\n",
       " '质量 挺不错 物流 力 安装 师傅 挺不错 点 赞',\n",
       " '物美价廉 配送 速度 安装 师傅 细心 值得 信赖',\n",
       " '不错 价格 实惠 服务 安装 师傅 特别 细心 服务态度',\n",
       " '装好 不错 出水 挺大 两三个 洗',\n",
       " '安装 师傅 力 东西 很好 品牌 值得 信赖',\n",
       " '买回来 好多天 评价 不错',\n",
       " '物流 师傅 送货 又快又好 家住 院子 里 不太好 找 送货 师傅 约 好找 地方 师傅 惊讶 想 安排 接 找到 灰 惊讶 师傅 幽默 赞 送货 师傅 看着 不错 遥控 板 预约 试 过后 评价',\n",
       " '品牌 值得 信赖 烧 热水 速度 很快 总体 满意',\n",
       " '安装 速度慢 要死 电话 接',\n",
       " '安装 师傅 专业 效率高 值得 购买',\n",
       " '品牌 感觉 不错 价格公道',\n",
       " '机器 不错 做工 优良 送货 快捷 安装 到位',\n",
       " '牌子 用过',\n",
       " '不错 外观 好看 想要 追加',\n",
       " '没装 装好 试试看',\n",
       " '美观大方 价格 实惠 追加 评价',\n",
       " '整体 不错 磕碰 安装 师傅 不错',\n",
       " '送货 昨天 能用 力',\n",
       " '不错 品牌 值得 信赖',\n",
       " '商品 看重 服务 支持',\n",
       " '安装 值得 拥有',\n",
       " '家里 家人 比较满意 愉快 购物',\n",
       " '使用方便 保温 声音 洗',\n",
       " '东西 感觉 不错 服务态度 不错',\n",
       " '品牌 放心 点 安装 没想到 安装 钱 材料费 材料 管加 弯头 安装 管子 花 图',\n",
       " '东西 号 早上 拍下 号 送货到 家 点 插曲 总体 不错 物流 很快 安装 师傅 服务态度 特别 安完 试好 卫生 收拾 走 总体 五分 好评',\n",
       " '安装 加热 速度 热水 充足',\n",
       " '一年 整体 不错 排水管 水滴 海尔',\n",
       " '水压 期待 高 加收',\n",
       " '尽寸比 想象 稍 一点 还行',\n",
       " '升 够用 很棒 预约 功能 恒温 功能',\n",
       " '波折 令人满意',\n",
       " '不错 性价比',\n",
       " '正品 店家 耐心 客服 超赞',\n",
       " '没的说 安装 没的说 没用',\n",
       " '加热 速度 很快 不错',\n",
       " '拆开 接',\n",
       " '刚刚 安装 晒',\n",
       " '物流 安装 专业 品牌',\n",
       " '品牌 确实',\n",
       " '买来 安装 东西',\n",
       " '送 很快 装 没用过',\n",
       " '服务 师傅 安装 工艺 不错',\n",
       " '洗澡',\n",
       " '质量 不错 安装 师傅 用心 接 地线 保证 唯一 不爽 遥控器 挂 盒 回头 想 办法 强烈建议 厂家 标配 遥控器 盒子',\n",
       " '不错 高大 快捷 安装 师傅 打完 孔装 细心 帮 用水 干净 卫生间 信赖 牌子 家里 电器 牌子 推荐',\n",
       " '安装 追加 评论',\n",
       " '安装 挺好用',\n",
       " '收到 货后 满意 质量 不错',\n",
       " '安装 服务 产品 赞',\n",
       " '速度 态度 商品',\n",
       " '活动 选购 这款 下单 付款 送达 安装 速度 棒 快递 大叔 安装 小弟 服务 不错 刮目相看',\n",
       " '升 小巧 外观 漂亮 水 很快',\n",
       " '家电 浯 口 专卖店 网购 家电 新体验 电视 空调 冰箱 洗衣机 品类 价格低 产品质量 保障 送货到 家 帮 安装 线 上线 价 店里 选 家里 验 家电 专卖店 购物 服务周到 可靠 购物 省事 放心 免 烦恼 家电 地址 浯 口镇 浯 口 大道 中段',\n",
       " '安装 评价',\n",
       " '时间 安装 大气',\n",
       " '产品 不错 下次 购买',\n",
       " '材料费 高 还好',\n",
       " '送货 支持 多年 失望 服务 到位 价格 实惠 关键 送货 超快 有时候 解决 赞赞 赞',\n",
       " '师傅 安装 力 态度 负责 提醒 注意事项 开心 购物 体验 家电 选',\n",
       " '超 实惠 一款 产品',\n",
       " '土豪 赶脚',\n",
       " '划算 实体店 便宜',\n",
       " '送货 速度 服务态度',\n",
       " '满意 款 够用 整机 保修 年 良心 满意 安装 师傅 赞',\n",
       " '安装 师傅 服务态度',\n",
       " '加热 很快 水量',\n",
       " '第一次 购买 半个 月 感觉 不错 特别 阴天 下雨 太阳能 水 热 不好 洗澡 值得 信赖',\n",
       " '配送 送货 师傅 小心 电视 送到 家 嘱咐 拆掉 包装 检查 电视机 外观 完好 签收 没想到 国产 电视 一流 设计 感强 做工 精良 遥控器 手感 连接 流畅 视频 影响 效果 棒 细节 完美 值得 拥有 感谢',\n",
       " '热水 机 看着 上档次 外观 漂亮 送货 安装 人员 第一天 预约 第二天 早上 安装 感觉 划算 总体 满意',\n",
       " '不错 安装 师傅 负责 乱 接 配件 错 介绍 插座 预留 错 办法 漏电 保护 插座',\n",
       " '装机 师傅 专业 收费',\n",
       " '喜欢 商品 送货 东西 便宜 家里 大大小小 商品 周边 朋友 帮买 东西 加油',\n",
       " '购物 惊喜 真的 特别 物流 小哥 真的 太好了 希望 越做越',\n",
       " '厂家 配 混 水阀 安装 人员 建议 换 带来 混 水阀 一条 进水管 米 共元 还好',\n",
       " '没用',\n",
       " '特别 安排 师傅 安装 不用 安装 安 插板 麻烦 配',\n",
       " '好好 好好 好好 好好 好好 好好 好好 好好 好好 好好 好好 好好 好好 好好',\n",
       " '冬天 洗澡 物流 售后 安装 父母 不错',\n",
       " '购物 东西 自营 质量 快递 特别 着急 东西 快递 速度',\n",
       " '遥控 安装 高 遥控 升 家庭 四五个 人用',\n",
       " '烧水 很快 外观 很漂亮 安装 花 安装 员 服务态度 细心 花洒 位置 第一次 装 歪 重装 歪 处女座',\n",
       " '试用 中 快递 不用说 一如既往 安装 师傅 热情 收到 货 预约 电话 降价 申请 了价 保 退款 成功',\n",
       " '师父 负责',\n",
       " '物流 力 当天 下单 第二天 送到 家 预约 安装 师傅 装 一共 收取 块 材料费 总体 算 满意 一段时间 追平',\n",
       " '品牌 值得 信赖 实惠 价格 便宜 没用 看着 不错 反正 家人 喜欢 满意',\n",
       " '物品 满分 安装 师傅 事先 说好 材料 水管 接 挂上去 电器 辅材 不装 交代 材料 一句 话 电器 包装 收 其他费用',\n",
       " '购物 体验 送货 速度 配送 员 态度 超级 棒棒 机器 很漂亮 便宜 划算',\n",
       " '安装 小哥 我家 安装 时 发现 几个 接口 漏水 小哥 弄 衣袖 湿 总共 收 安装费 良心',\n",
       " '不错 感觉 天蓬 割开 好不容易 安装 师傅 收 六零',\n",
       " '加热 速度 安装 时 表面 磕 家里 老太太 追究 收费 插座',\n",
       " '快递 速度 商家 服务态度 价格 经济 实惠 质量 不错 家电 购买 感谢',\n",
       " '满意 特别 安装 师傅 安装 顺便 卫生 打扫 教 售后服务 做 挺好 分',\n",
       " '物流 很快 上午 下单 下午 送货 到货 安装 安装 师傅 力 服务态度 真的 赞 插 电',\n",
       " '回家 爸妈 实物 老爸 挺好用 发货 很快',\n",
       " '漂亮 不算 很大 占 空间 出水量 装 太阳能 冬天 太阳 热水 少 再也 热水',\n",
       " '不错 送货 安装 师傅 敬业',\n",
       " '送货 速度 很快 第二天 到货 预约 安装 师傅 第二天 师傅 提前 电话 预约 时间 师傅 服务态度 安装 专业 进门 鞋套 工具箱 垫 东西 安装 结束 告诉 耐心 热情 箱子 收拾 售后 安装 师傅 满意 值得 信赖',\n",
       " '产品 螺丝 烂 有没有 出品 遥控 不行',\n",
       " '满意 购物 家里人 喜欢 送 喷头 水压 冲洗 爽快 安装 费用 块钱',\n",
       " '三个 房间 住人 买升 多块 看清',\n",
       " '安装 师傅 收 管子 钱 钱 总体 高 后续 观察',\n",
       " '安装 成功 还好 客服 不错 寄来 遥控器 电池 电 客服 补发 一块儿 赞',\n",
       " '售后 预约 安装 提醒 安装 售后 电话 冬天 父母 棒',\n",
       " '收到 宝贝 真心 不错 安装 人员 特别 服务 到位 当天 下午 热水',\n",
       " '不错 遥控 安装 不用 请 省去 材料费 防电墙 灯 不亮',\n",
       " '没用 安装 感觉 还行',\n",
       " '服务 不错 工作人员 态度',\n",
       " '值得 信赖 送货 看着 质量 售后服务 很棒 打算 家电 家具',\n",
       " '正好 价格 真的 实惠 便宜 下次 来到 谢谢 谢谢',\n",
       " '材料 安装 管子 歪 没用 配 花 洒 洗澡间 明天 安装 完美',\n",
       " '几次 评价 产品 满意 加热 保温 时间 长 售后 安装 服务 特别 下次 选择',\n",
       " '物流 不用说 力 美得大 牌子 装修 师傅 来回 跑 趟 感激 师傅 赞',\n",
       " '装 满意 安装 师傅 服务 特别 满意 购物',\n",
       " '我家 奶奶家 支持 国货 喜欢 东西',\n",
       " '收到 安装 便宜 服务 满意',\n",
       " '东西 一如既往 支持 唯一 默认 电子 发票 不好 产品 纸质 发票',\n",
       " '升 家里人 洗澡 四个 六个 质量 保证 三年 希望 我用 时间 够 长 质量 烧 整桶 水 分钟 开关 插 电上 好像 插 省 电',\n",
       " '强大',\n",
       " '还好 安装工 实在 力 自来水管 米 材料 电是 一米 距离 接 个线 插座 安装工 无能为力 弄 挂 两百块 混饭吃 安装工',\n",
       " '这款 太 恒温 烫到 外观 漂亮',\n",
       " '这款 预想 安装 师傅 辛苦 早上 不到 点 五星 好评',\n",
       " '升 预约 洗浴 无线 遥控 第二天 安装 加装 支架',\n",
       " '第二次 安装费 太 高 一共 块 明明 安装费 超过',\n",
       " '质量 没得说 配送 员 服务态度 品牌 信赖',\n",
       " '挺好用 第一次 烧水 设置 度 烧水 时间 稍微 长点 关机 保温 久 装机 师傅 客服 打电话 安排 装机 总共 花 价格 材料 清单 送 混 水阀 淋浴 头 不好 混 水阀 只能 暂时 先用 不好 价格 太 稳定 忽高忽低 价格 保障 郁闷',\n",
       " '品牌 商品 看着 外观 不错 试 烧水 很快 遥控 实用 希望 几年',\n",
       " '装好 大气 挺不错 售后 师傅 尽心 客户 角度 建议',\n",
       " '送货 安装 态度 速度 热水 好评',\n",
       " '不错 装 不错 专业 不服 装 很快 名牌 名牌',\n",
       " '功能 还好 热水 很快 品牌 容量 很大',\n",
       " '价格便宜 实惠',\n",
       " '安装 物流 安装 服务态度 洗澡 全程 热水 操作 简单',\n",
       " '东西 不错 安装 帅哥 不错 装好 收 材料费 后续 追评',\n",
       " '很多年 东西 电 电器 米面 粮油 生活 日用 每次 满意 价格 优 送货 俨然 固定 选择 首选 后悔',\n",
       " '不错 购物 体验 希望 做 更好 诚信 经营 比做 广告 强',\n",
       " '外观 很漂亮 品牌 评价 安装 师傅 速度 很快 专业',\n",
       " '搬 新 家 家里 家 电器 选到 满意 价格 实惠 质量 保障 家里 特别 满意 铁杆 粉丝 东西 对了',\n",
       " '配送 速度 效率高 品牌 商品 值得 信赖 支持 正品',\n",
       " '安装费 花 一百多 加固 费用 超过',\n",
       " '安装 师傅 服务到位 东西 装 师傅 交代 明',\n",
       " '不错 外形 漂亮 加热 慢 特别 此款 插头 安',\n",
       " '两个 物流 挺快 隔天 售后 安装 不错 赞',\n",
       " '物流 安装 师傅 专业 送货 师傅 满意',\n",
       " '送货 很快 准时 不错 划算 安装 师傅 整体 体验 不错',\n",
       " '品牌 值得 信赖 服务态度 实体店 便宜 不错 满意',\n",
       " '信赖 品牌 安装 师傅 服务态度 插座 试用 等用 补 评价',\n",
       " '不错 安装 费用 感觉 加热 速度 很快',\n",
       " '第一次 网购 电器 想到 第一 产品 正品 价格便宜',\n",
       " '外形 很漂亮 价格 实惠 质量 力',\n",
       " '第一次 购物 下单 送货 入户 安装 满意 希望 越来越',\n",
       " '几天 在家 昨天 回来 安装 挺好 收 材料费',\n",
       " '送货 上门 安装 准时 服务 不错 感受 一段时间 再来 追评',\n",
       " '安装 费用 贵 实验 明天 试一试',\n",
       " '家电 省心 送货 安装 服务 周到 力给力 力给力 力给力 力给力 力给力 力给力 力给力 力给力 力给力 力',\n",
       " '快递 送到 家 一会 上门 安装 家里 插头 插座',\n",
       " '品牌 放心 价格合理 配置',\n",
       " '家里 旧 坏 赖得修 容量 太 一家 三口 用不完 发现 性价比',\n",
       " '漂亮 实用 物流 力 安装 力 踏实 放心',\n",
       " '不错 一分 价钱 一分货 一点 没错 老婆 喜欢 喜欢',\n",
       " '机器 安装 好多 东西 收费 写 超过 块钱 安装 好多 东西 不算 这块 钱 里 安装工 家里 弄 可脏 墙上 打眼 我家 毛巾 弄 扔',\n",
       " '东西 收到 查看 发现 图片 描述 超级 喜欢 卖家 发货 速度 很快 服务 到位 老板 点 赞 下次 购买 .........',\n",
       " '领券 商场 便宜 送货 安装',\n",
       " '活动 不错 物美价廉 不错',\n",
       " '挺好用 烧水 速度 保温 效果 是升 安装 墙面 承重墙 师傅 担心 墙 承重 能力 买升 墙 顺利 安装 希望 购买 朋友 情况 选择 型号',\n",
       " '很好 品牌 确实 不错 家里人 喜欢',\n",
       " '东西 不错 显示屏 缝隙 活动 少 螺丝 安装 售后 专业',\n",
       " '想象 中 品牌 值得 信赖',\n",
       " '收到 信赖 品牌 不错',\n",
       " '跟得上 步伐 温度 显示 清晰可见 人性化 遥控器 东西 不用 站 高 用手 按了 安排 安装 师傅 热情 安装 仔细 周全',\n",
       " '外观 漂亮 加热 速度 物流 速度 挺快 安装 师傅 工作',\n",
       " '东西 棒 信赖 品牌 安装 师傅 年纪 专业 结束 帮忙 高 卫生 赞',\n",
       " '商品价格 实惠 质量 过硬 喜欢 购物 支持',\n",
       " '烧水 时 老翁 翁 响 几秒 一响 声音 难听',\n",
       " '到货 未 安装 几天 追评',\n",
       " '东西 收到 送货 速度 挺快 漂亮 好评',\n",
       " '冲凉 加热 想装 多台 优惠',\n",
       " '没装 包装 里 掉 纽扣 电池 没事',\n",
       " '安装 评价 美观 送货 安装 不错',\n",
       " '安装 师傅 服务 很快 安完 晚上 试试',\n",
       " '发货 很快 装修 师傅 当天 上门 安装 速度 很快 服务',\n",
       " '品牌 价格 不错 安装 师傅 态度 满意',\n",
       " '不错 快递 师傅 态度 安装 师傅 收费 满意',\n",
       " '遥控 控制 温水 孩子 洗澡 不用 纠结 水温 合不 合适 不错',\n",
       " '叔叔 说用 问 过后 追加 评论',\n",
       " '家电 无忧 服务 送货上门 货到付款 五星',\n",
       " '质量 描述 完全一致 满意 真的 喜欢 超出 期望值 发货 速度 包装 仔细 严实 送货 人员 服务态度 运送 速度 很快 满意 购物',\n",
       " '安装 师傅 点 赞 活儿 很细 实在',\n",
       " '物流 速度 很快 送货 师傅 态度 不错 东西 不错 效果',\n",
       " '速度 太 想 想 周六 下午 安装 周五 下午 装上 安装 师傅 态度 工作到位 号 上午 点 订单 点 接到 客服 电话 接到 电话 沟通 安装 到货 商场 商场 里 星期 估计 装 效率 太 高 第一天 下单 第二天 收货 第三天 安装',\n",
       " '外观 美观 大方 简约 东西 质量 值得 拥有',\n",
       " '信赖 品牌 价格 合适 订 两台 实体 店里 产品 一模一样 价格比 实体 店里 便宜 好多 满意 购物 推荐 朋友',\n",
       " '东西 安装 人员 不错 满意 网购',\n",
       " '帮 功率 还好 农村 送货上门 安装 好评',\n",
       " '不错 信赖 品牌 一如既往',\n",
       " '安装 师傅 力 有效率 喜欢 款',\n",
       " '样式 不错 安装 力 品牌 值得 信赖 后期 做 评价',\n",
       " '满意 物美价廉 水量 送货 速度 超快',\n",
       " '颜值 不错 遥控器 为啥 纠结',\n",
       " '东西 东西 东西 东西 东西 东西 东西 东西',\n",
       " '外观 漂亮 品牌 放心 值得 信赖',\n",
       " '挺好用 安装 师傅 安装 仔细 价格合理',\n",
       " '送货 安装 服务 满意 天 冷 孩子 洗 热水澡',\n",
       " '很好 价格便宜 质量 真好',\n",
       " '爸妈 换 新 不错 水热 很快 安装 师傅 力',\n",
       " '不错 安装费 花 块钱 品牌 值得 信赖',\n",
       " '发货 很快 过程 中 暂时',\n",
       " '昨天 送货到 家 四楼 箱子 感觉 陈旧 放 好久 样子 想 快递 小哥 走 想想 总 滋味 打开 发现 泡沫 碎 掉 还好 机器 损伤 安装',\n",
       " '刚刚 收到 要过 几天 安转 希望',\n",
       " '太 尺寸 合适 给退 退 件 人员 上门 取 件 服务 超好 新 前前后后 跑 好几趟 楼 上上下下 怨言 狂点 赞',\n",
       " '产品 收到 安装 服务 人员 热情',\n",
       " '父母 这款 不错 新家 好评',\n",
       " '品质 太 安装 服务 到位 赞',\n",
       " '物流配送 力 安装 师傅 服务态度 下次 回来',\n",
       " '质量 不错 价格 合适 性价比 高 太棒了',\n",
       " '加热 慢 冬天 不好 放水 买来 一个多月 没用 几次',\n",
       " '信赖 信赖 一如既往 地好',\n",
       " '安装 快递 小哥 安装 师傅 服务态度 满意',\n",
       " '不错 价格 保护 贴心 品牌 值得 信奈',\n",
       " '中 感觉 谢谢 谢谢 谢谢 谢谢',\n",
       " '购物 快捷 服务',\n",
       " '活动 期间 购买 不错 物流 专业 安装 人员 服务 不错 产品质量 差距 服务',\n",
       " '没装 送货 很快 快递 员 辛苦',\n",
       " '经济 实惠 放心 安装 师傅 细心 赞赞 赞',\n",
       " '一段时间 省事 订单 安装 一路 顺畅',\n",
       " '价格 便宜 希望 能用 得住',\n",
       " '服务 发货 安装 效率 满意 好评',\n",
       " '物流 服务 值得 信赖 品牌 值得 信赖',\n",
       " '家里 值得 信赖',\n",
       " '几天 没装 品牌',\n",
       " '商品 超好 安装 师傅 服务态度',\n",
       " '快递 很快 爸妈 喜欢',\n",
       " '品牌 值得 信赖 物流 服务 家电 正品',\n",
       " '自营 店 新款 包 安装 超赞',\n",
       " '物流 价格 实惠 购买 支持',\n",
       " '预想 送货 师傅 帮 送到 家 辛苦 安装 师傅 用心 安装 帮 试 水温 妥当 后才 离开 白菜价 买到 品牌 实在 物超所值 一系列 服务 点 大大的 赞',\n",
       " '安装 人员 水管 接反 搞定',\n",
       " '不错 满意 满意 满意 性价比 高 材料 安装',\n",
       " '不错 品牌 气 收到 货 刚刚 价格 便宜 百多 装上去 忘记 退货',\n",
       " '外观 送货 安装 师傅 专业',\n",
       " '操作 简单 热水 速度',\n",
       " '不错 物流 超快 配送 家 安装 棒棒 哒',\n",
       " '想 好评',\n",
       " '售后服务 安装 师傅 送货 师傅 负责',\n",
       " '朋友 东西 好不好',\n",
       " '师傅 态度 安装 到位 解释 详细 果断 五星',\n",
       " '安装 师傅 不错 好评 价格公道 安装 师傅 不错 好评 价格公道 安装 师傅 不错 好评 价格公道',\n",
       " '购物 物美价廉 品质 优',\n",
       " '产品 安装 师傅 不错 好评',\n",
       " '产品 不错',\n",
       " '安装 赞 值得 信赖',\n",
       " '东西 不错 值得 信赖 快递 隔天 力 赞',\n",
       " '第二次 购买 东西 放心 售后服务 超给 力',\n",
       " '发货 很快 包装 玩 赞',\n",
       " '送到 很快 安装 不错 性价比 高',\n",
       " '没用 看着 行',\n",
       " '不错 一段时间 评价 配件 贵',\n",
       " '热 洗澡 够 棒 值得 购买',\n",
       " '不错 花洒 太小 水压 高 水太 密集',\n",
       " '帮 朋友 当天 付款 第二天 送货 安装',\n",
       " '没用 过段时间 追评',\n",
       " '不错 两天 降价',\n",
       " '售后服务 安装 技术 服务态度 满意',\n",
       " '品牌 信得过 质量 热水 充足 容量',\n",
       " '品牌',\n",
       " '热 很快 外观 漂亮 省 时 爱',\n",
       " '收到 质量 外观 漂亮 大气',\n",
       " '东西 收到 物流 很快 价位 东西',\n",
       " '东西 值得 购买 容量 出水量',\n",
       " '不错 样子 好看 不错 样子 好看',\n",
       " '满意 一个月 评论 安装 师',\n",
       " '商城 网 购物 流 安装 天 搞定',\n",
       " '服务 太度 主机 装 一段时间 先知 质量 主机 外观 安装 师傅 专业性 服务性 提高 点',\n",
       " '升 预留 位置 换 服务 拍 师傅 很快 上门 装',\n",
       " '满意 购物 安装 人员 力 五分',\n",
       " '省 家电',\n",
       " '棒 服务 贴心 安装 顺利 支持',\n",
       " '东西 买回来 咋么',\n",
       " '收到 装好 评',\n",
       " '安装 师傅 安装 到位',\n",
       " '装上 很好 冬天 热水',\n",
       " '儿子 宿舍 里用 效果 值得 信赖',\n",
       " '一款 产品 价格 实惠 品牌 毛病',\n",
       " '质量 卖家 描述 完全一致 满意 真的 喜欢 超出 期望值 发货 速度 包装 仔细 严实 物流 公司 服务态度 运送 速度 很快 满意 购物',\n",
       " '墙上 挂勾 升 够用',\n",
       " '送货 速度 很快 安装 师傅 服务态度',\n",
       " '数字 显示 配合 遥控 实用',\n",
       " '实惠 性价比 高',\n",
       " '这么久 评价 加热 五星',\n",
       " '安装 师傅 认真负责 安装 整洁',\n",
       " '原坏 正好 换 装上去 尺寸 正好 美观 老款',\n",
       " '安装 师傅 负责 装 赞',\n",
       " '送货 物流 速度 很快 安装 师傅 力',\n",
       " '昨天 安装 升温 很快 遥控器 电池',\n",
       " '力给力 力给力 力',\n",
       " '没装 昨天 到货 速度',\n",
       " '天气 越来越 凉 温暖 度过 冬天 特意 家里 备 收货 惊喜 物美价廉 不错 不错 购物 选 棒棒',\n",
       " '非常适合 性格',\n",
       " '挺好用 安装 师傅 安装 专业',\n",
       " '质量 满意 真的 喜欢 超出 期望值 发货 速度 包装 仔细 严实 物流 公司 服务态度 运送 速度 很快 满意 购物',\n",
       " '好看 优惠 暂时 没用',\n",
       " '看着 不错 购物 体验',\n",
       " '价格 送货 安装 省心',\n",
       " '东西 不错 声音 很小 出门在外',\n",
       " '终于 搞定 送货 售后服务',\n",
       " '太好了 安装 师傅 力 支持',\n",
       " '安装 装修 试试 实际效果',\n",
       " '装好 师傅 装 蛮快 谢谢',\n",
       " '不错 物流 太度 货 装上去 没用 美观',\n",
       " '物美价廉',\n",
       " '装',\n",
       " '哈哈哈哈',\n",
       " '安装 师傅 服务',\n",
       " '收到 搞 活动 物美价廉',\n",
       " '服务态度 值得 信赖',\n",
       " '先是 实体店 机械式 干脆 网上 抢 拉倒 正好 赶上 活动 不到 一千块 钱 拿下 辅材 收费 干嘛 贵 反正 假货',\n",
       " '安装 牌子 放心',\n",
       " '不错 送货 速度 爱',\n",
       " '家里 搬 新家 一台',\n",
       " '不错 产品 质量',\n",
       " '不错 实体店 便宜',\n",
       " '看着 很小 空间 安装',\n",
       " '安装 服务 满意 送货 力',\n",
       " '送货 安装 真心 不错 完美',\n",
       " '送到 安装 安装 评价',\n",
       " '安装 速度 出水 安装 人员 服务周到',\n",
       " '产品 安装 送货 太慢',\n",
       " '看着 很棒',\n",
       " '服务态度 安装 技术 满意',\n",
       " '一如既往 卖 电器 放心',\n",
       " '送货 师傅 上门 安装 态度',\n",
       " '到货 未 安装 安装 补充 评价',\n",
       " '外观设计 外壳 材质 不愧 大厂 品牌 质保 年 数字 显示 直观 安装 师傅 乱收费 我家 坏 帮忙 安装',\n",
       " '价格 贵 希望 一分钱 一分货',\n",
       " '装 段时间 上次 试',\n",
       " '收到 一段时间 特地 一段时间 评论 特别 没想到 花 钱 买来 实用 东西 物有所值 快递 很快 安装 师傅 到位 满意',\n",
       " '不错 安装 师傅',\n",
       " '确实 不错 售后服务 满分',\n",
       " '质量 值得 推荐 购买 效果 不错',\n",
       " '东西 家里人 喜欢 热水',\n",
       " '装完 感觉 不错 安装 师傅 非常热心',\n",
       " '东西 简洁 大方 媳妇 特别 喜欢',\n",
       " '第一天 晚上 拍 第二天 第三天 师傅 安装 师傅 服务 接 太阳能 另一面 墙 接 管子 安装费 挺好',\n",
       " '不错 感觉 力 购买',\n",
       " '到货 安装 效率 高',\n",
       " '外观 好看 实体店 款 便宜',\n",
       " '很好 天气 总 下雨 太阳能 二线',\n",
       " '货 收到 安装 服务态度',\n",
       " '蛮好 蛮好 蛮好 蛮好 蛮好 蛮好 蛮好 蛮好',\n",
       " '帮 朋友 产品 安装 满意',\n",
       " '整体 行 唯一 一点 舒服 机子 侧面 脏兮兮 两块 斑 倒 洗掉 计较 希望 点 细节 客户 第一 映像',\n",
       " '外观设计 不错 师傅 安装',\n",
       " '装 值得 价格',\n",
       " '物流 力 拍 第二天 收到 售后 安装 力 收到 第二天 安装 安装 魏 师傅 认真仔细 干活 利索 管线 走 漂亮 晚上 用上 保温 时间 长 满意',\n",
       " '安装 业 物流 特别 力',\n",
       " '服务态度 安装 快捷 满分',\n",
       " '装修 师傅 力 服务态度',\n",
       " '安装 负责 到货 服务 满意',\n",
       " '送货 安装 专业 很快',\n",
       " '安装 师傅 特别 热心',\n",
       " '购物 放心 产品包装 质量 到货 没想到 售后服务 到位 网上 实体店 价位 实惠 购物 选 踏实',\n",
       " '好用',\n",
       " '外观 很漂亮 装修 新家 感觉 不错 装 上试 家里 装完',\n",
       " '质量 不错 安装 服务 到位',\n",
       " '满意 安装 师傅 力',\n",
       " '不错 物有所值 美观大方',\n",
       " '很好 安装 值得 购买',\n",
       " '不错 售后服务',\n",
       " '物流 速度 当天 下单 第二天 送到 第三天 上门 安装 安装 师傅 认真负责 安装 完事 收拾 干净 满意 东西 值 水热 蛮快 花洒 洗 时间 长 建议 大花 洒 水用 费 总体 感觉',\n",
       " '第三次 购买 安装 师傅 耐心',\n",
       " '当天 收货 安装 特别',\n",
       " '服务态度 安装 效果 正好',\n",
       " '师傅 态度 物流 不错',\n",
       " '物流 东西 服务 到位 星',\n",
       " '物流 安装 力 加热 很快',\n",
       " '第二次',\n",
       " '货 收到',\n",
       " '太阳能 谱 舒服',\n",
       " '价格 实惠 品牌 值得 信赖',\n",
       " '热水 舒服 用用',\n",
       " '师傅 服务态度 特别',\n",
       " '安装 师傅 不错',\n",
       " '超级 热水 特快',\n",
       " '不错 上门 安装 免 服务费',\n",
       " '电脑板 遥控 外观 漂亮 大方',\n",
       " '东西 评价',\n",
       " '正品 购',\n",
       " '不错 服务',\n",
       " '一段时间 不错',\n",
       " '东西 不错 安装 师傅 不错',\n",
       " '物流 很快 昨天 订货 售后服务 不错 当天 安装 完毕 花费 满意',\n",
       " '感觉 不错',\n",
       " '在家 过段时间 回家',\n",
       " '安装 师傅 负责',\n",
       " '没试 试过 追加 评价',\n",
       " '没装 装好 追评',\n",
       " '辛苦 师傅 好评',\n",
       " '货 收到 安装',\n",
       " '品牌 实惠 值得 拥有',\n",
       " '安装 师傅 态度 技术 专业',\n",
       " '来货 安装 服务周到',\n",
       " '安装 师傅 上门 不错',\n",
       " '美观大方 实用',\n",
       " '服务 安装 师傅',\n",
       " '家庭 父母 和子 远亲不如近邻 地处 远 互相间 显得 生活 关系 左邻右舍 之间 密',\n",
       " '满意 安装 师傅',\n",
       " '价格 适中',\n",
       " '物流 超快 晚上 下单 上午 送货上门 外形 漂亮 功能 强大 价格 低点 完美 点 赞 物流 小哥 态度 下次',\n",
       " '不错',\n",
       " '物流 很快 服务',\n",
       " '谢谢 安装 师傅 辛苦',\n",
       " '师傅 辛苦 满意',\n",
       " '感觉 不错',\n",
       " '昨天 下单',\n",
       " '安装费',\n",
       " '不错 还好 家 老人 安装 员 主意 花 洒 正好 安装 正上方 每次 洗澡 郁闷 同情',\n",
       " '老房子 安上',\n",
       " '完美 服务 安装',\n",
       " '物流 服务 制热 效果',\n",
       " '不错 家人 喜欢',\n",
       " '实惠',\n",
       " '好评',\n",
       " '不错',\n",
       " '东西 自营 快递 第二天 京 东西 送来 包装 客服 不错 不懂 耐心 解答 售后 师傅 安装 第二天 赶上 第三天 帮 安装 态度 安装费 贵',\n",
       " '安装 满意 服务 认可',\n",
       " '快递 速度 物品 质量',\n",
       " '满意 真的 喜欢 超出 期望值 发货 速度 包装 仔细 严实 配送 人员 态度 速度 很快 满意 购物',\n",
       " '速度 很快 服務',\n",
       " '时间 长 坏 号 一台 月 日 收到 月 号 早就 安装 当天 洗上 热水澡 十一 长假 心情 满意',\n",
       " '收到 等待 安装',\n",
       " '装好 没试 感觉 还好',\n",
       " '快递 不错 速度 很快',\n",
       " '早上 下单 下午 货到 次日 安装 顺畅 网购 不错 希望 耐用',\n",
       " '东西 不错 操作 简单',\n",
       " '不错 两件',\n",
       " '好评 服务 不错',\n",
       " '价位 不错 安装 收费 感觉 贵 就用 一点 几个 接头 感觉 卡 价钱 装 太 满意',\n",
       " '价格 服务 不错 安装 遥控 要贴 安装 花',\n",
       " '一段时间 评价 体验 很好 超值 一款 适合 家庭 安装 人员素质 高 收费 标准 透明 整体 不错 购物',\n",
       " '两个 月 评价 自营 店 购买 电器产品 放心 担心 容量 尺寸 原位 安装 请 安装 师傅 上门 查看 机型 收 服务费 不贵 旧件 取下 安装 新机 花',\n",
       " '安装',\n",
       " '当天 安装 简单 试 安装 师傅 耐心 讲解 遥控 距离 短点 情况 用不上 信赖',\n",
       " '服务态度',\n",
       " '东西 不错 做工 全国 联保 售后 安装 师傅 热情 安装费 高 块 减 零头 师傅 坎 大山 上推 八辈 祖宗 师傅 够够',\n",
       " '体面 服务 周到',\n",
       " '刚刚 几次 不错',\n",
       " '安装 力 师傅 帅哥',\n",
       " '不错 很好 产品',\n",
       " '外观 很大 气 喜欢',\n",
       " '安装 地道 满意',\n",
       " '喜欢 安装 才用 管子 产品 一共 花 价格 划算 安装 师傅 不错 安装 打扫 卫生 服务 没话说 产品',\n",
       " '第二次 大型 家电 安装 师傅 约定 时间 装 材料费 接受 款 值得 买回来 下次 减价',\n",
       " '款 性价比 真的 超高 千挑万 选 选择 送货 快递 小哥 服务态度 售后 响应 十星 好评',\n",
       " '商城 购买 送货 没的说 太 家人 难以置信 网上 购买 质量 稳定 安装 服务 专业 好评',\n",
       " '朋友 不错 服务 到货 很快 晚上 试试看 好用',\n",
       " '送货 速度 很快 第一天 下单 约 第三天 送到 送到 约 隔天 安装 售后 态度 其他配件 质量 价格 整体 满意',\n",
       " '送货 速度 电梯 搬 四楼 太 感谢 安装 后期 追评',\n",
       " '忙 装修 房子 装 邻居 我家 卖 家电 牌子 卖 价格比 十年 前 便宜 品牌 值得 拥有',\n",
       " '头 大件 服务 产品 值得 信赖 配货 送货 正规 段 插曲 售后 第一 时间 解决 谢谢',\n",
       " '信赖 自营 东西 安装 师傅 追 好评 事情 烦人 明白 好评 安装 师傅 理解',\n",
       " '几天 评论 感谢 安装 师傅 耐心 安装 新 我家 讲解 新 足够 日常 家里 一家 三口 用水 需求 电源插座 超过 额外 大功率 电源插座 一如既往 信任 希望 带来 更多 实用 便捷 产品 介绍',\n",
       " '升 预约 洗浴 无线 遥控 安装 安上 试试',\n",
       " '第一天 价格 掉价 吃惊 申请 保价 几分钟 退回来 神 速度 机子 装 期待 效果',\n",
       " '送货 小哥 准时 售后服务 特别 安装 师父 满意',\n",
       " '不错 值得 点 赞',\n",
       " '师傅 服务',\n",
       " '送货 安装 工整',\n",
       " '外观 高大 遥控器 电池 不太好 装 装水 两桶 力 关键 老人家 不太会 操作 安装 只管 装 费用 接近 大洋',\n",
       " '配送 很快 等待 安装',\n",
       " '不错 支持',\n",
       " '适合 一家 三口 活动 期间 性价比 高',\n",
       " '没用',\n",
       " '购买 第二个 物流 力 配送 力 安装 服务',\n",
       " '升 一家 三口 足够 样式 漂亮 好看',\n",
       " '家里 电器 一段时间 推荐 朋友 遥控器 控制 储水量 外观 满意',\n",
       " '好多天 时间 装 预约 安装 师傅 给装 安装 速度 挺快 简单 搞 特价 八百多 便宜',\n",
       " '效果 墙 承重墙 做 支架 底下 多出 两个 铁条 不太好 更好 安装 方法',\n",
       " '东西 到货 速度 很快 安装 师傅 热心 插口 插座 换 排插',\n",
       " '老家 老家 老家 老家',\n",
       " '商城 网上 家电 家电 买好 正品 放心 质量 保障 快递 家电 选',\n",
       " '收到 货 喜欢 款 满满的 科技 感 才刚 预约 功能 强 电源 插 不用 担心 不用 热水 时 无时无刻 加热 费电',\n",
       " '宝贝 很久 安装 服务 棒棒 哒',\n",
       " '品牌 质量 可靠 老婆 评价 高 新房 配置 高端 大气 智能 控制 加热 安全可靠 国庆节 订 号 到货 号 安装 到位 几次 老婆 喜欢 五星 评价',\n",
       " '价格合理 物流 很快 售后 安装 规范 总 流程 满意 提醒 买家 款 型号 分瓦 瓦 安 安 家里 插座 哪种 需 下单',\n",
       " '力 速度',\n",
       " '很好 信赖 信赖 快递 哥 服务态度 赞赏 一句 话 十星 好评',\n",
       " '机器 安装 师傅 细心 唯一 不太好 地方 预约 上门 安装 主动 安装 预约 电话 不好 打通',\n",
       " '购物 一种 享受 服务到位 省钱 省力 省心 电器 推荐 朋友',\n",
       " '不错 机器',\n",
       " '发货 忘 发 淋浴 头 找 客服 补发 发过来 原装 破损 太 负责 差',\n",
       " '满意 楼 送货上门 快递 贴心 一点点 预约 安装 安装 人员 打电话 确认 安装 师傅 辛苦 谢谢',\n",
       " '到货 很快 安装 师傅 准时 服务态度 满意',\n",
       " '一家人 段时间 外形 上档次 价位 东西 老婆 骂',\n",
       " '不错 价格 实惠 服务态度 材料费 花',\n",
       " '送货 师傅 敬业 雨 依然 售后 打电话 确认 负责 安装 师傅 收费 便宜 不错',\n",
       " '递给 力 隔 售后服务 人员 服务态度 五星 好评 上带 花 洒 出水 实在 太小 美中不足',\n",
       " '东西 不错 满意 舒服 送货 很快 师傅 服务态度 下次 介绍 朋友',\n",
       " '机器 搞 活动 便宜 回复 是升 总体 机器',\n",
       " '安装 师傅 不行 安装费 花 块钱 花钱 花 钱',\n",
       " '中秋节 收到 第二次 六年 年 新 家用 中秋 送货 小哥 辛苦 品牌 值得 信赖',\n",
       " '不错 物流 很快 安装 师傅 服务 到位 电话 沟通 老公 嫌弃 升 够 两个',\n",
       " '服务 没的说 头天 下午 下单 第二天 安装 实体店 太棒了 产品 没用 看着 评',\n",
       " '服务满意 家电 便宜 质量 送货 特别 家里 购买',\n",
       " '安装 收费 一次性 安装费 家里 老人',\n",
       " '东西 收到 送货 第二天 安装 人员 整体 不错 效果',\n",
       " '家电 正品 保障 真的 售后 无忧 快递 力 第二天',\n",
       " '装 机 师傅 简单 试 机 要装 水管 安装 师傅 迟点 再装 管试 追加 评论',\n",
       " '自营 购买 值得 信赖 送货 放心 好评',\n",
       " '几次 帮 同事 朋友 购买 价格 超级 实惠 信赖 品牌 支持',\n",
       " '宝贝 收到 安装 十多天 效果 商城 产品 保障 物流 很快 农村 送货上门',\n",
       " '质量 不错 用过 好用 预约 洗浴 不用 提前 开 追加 评价',\n",
       " '外型 美观 加热 师付 认真负责 安装费 够 高 轻体 墙 架子 安装费 一共 花 八角 阀 提供 压力 阀 处 滴水 咨询 影响 美观',\n",
       " '家里 装修 选 信赖 品牌 全家 满意 物流 安装 到位 好评',\n",
       " '物流 赞 小时 家 建议 一级 能耗 失策 耗电 大户',\n",
       " '顾客 一段时间 评价 顾客 说出 水 效果 外形 好看 服务 棒棒',\n",
       " '喜欢 遥控器 太 简陋 装 好用 原因',\n",
       " '父母 现货 听 父母 不错 按装 师傅 按装 态度 满星 好评',\n",
       " '发货 安排 上门 安装 安装 师傅 服务周到 断电 保温 一日 不错',\n",
       " '品牌 值得 信赖 送货 安装 师傅 专业 服务态度 安装 师傅 全 五星 好评',\n",
       " '送货 商品 收到 送 上楼 真心 不错 样子 美观 杠杠 好评',\n",
       " '物品 收到 质量 不错 价格 实惠 送货 速度 下单 第二天 收到 货 信赖 五星 好评',\n",
       " '升 预约 洗浴 无线 遥控 一段时间',\n",
       " '外表 新颖 价格 美丽 服务 送货 安装 态度 速度 特别 介绍',\n",
       " '朋友家 别墅 装修 六个 送货 安装 服务 产品质量 没得说 信赖',\n",
       " '产品 不错 购买 温度 设定 只能 一档 随意 调 混水',\n",
       " '送货 很快 安装 很快 安装 收费 真的 头疼 厂家 费用 加 产品 免得 安装工人 乱收费',\n",
       " '暂时 算 安装 入住 体验 实感 希望 好像 报 危险',\n",
       " '价格 便宜 带有 遥控器 省事 售后 安装 不错 态度 支持',\n",
       " '整体 不错 物美价廉 样子 特别 喜欢 简单 干净 服务 人员 安装 花 一百多 整体 特别 满意',\n",
       " '安装费 费太高 天呀 米 管子',\n",
       " '热水 机 东西 值得 信奈 不关 安装 售后 不错 东西',\n",
       " '安装 师傅 特别 上门 安装 服务到位 脾气 一万个 赞 我家 偏远 难 找 超级 耐心',\n",
       " '太好了 质量 没的说 安装工人 不爽 挂 花钱 安装 太小',\n",
       " '发货 速度 很快 特别 装修 师傅 红心 乱收费 服务态度 特别 设计 耐心 设计 半天 点 赞',\n",
       " '第一次 送货 速度 嗖嗖 当天 送达 当天 安装 材料费 标准 收取 全家 喜欢',\n",
       " '性价比 高 遥控 遥控 经济 经济 超级 实用',\n",
       " '收到 货后 发现 摇控器 坏 售后 真的 预想 不到 安排 维修 师傅 差 态度 好无语',\n",
       " '客服 服务态度 调 中保 温度 度 问 客服 搞错',\n",
       " '东西 不错 配送 员 态度 冰箱 满意 购物 值得 信赖',\n",
       " '国庆 在家 家里 送货 挺快 村里 送货上门 送货 预约 安装 挺快 家里 老爸 好用',\n",
       " '两台 性价比 功率 加热 多分钟 慢 家庭',\n",
       " '老家 安 好不好 爸爸 希望 耐用',\n",
       " '正品 配货 农村 送货到 家 安装 服务态度 试 感觉 出水量',\n",
       " '加热 速度 稍微 慢 一点 售后 安装 东西 五金店 售后 安装 花钱',\n",
       " '物流 力 质量 朋友 放心 购物 满意',\n",
       " '搞 活动 速度 态度 满意 下次 东西',\n",
       " '外 直径 外 直径 是升 牌子 保温层 薄',\n",
       " '好用 预感 温度 订好 电 断开 晚上 热水 太',\n",
       " '连续 多天 阴雨天 太阳能 作用 还好 师傅 上门 安装 真不错',\n",
       " '服务 周到 帮 搬 上楼 免费 安装 两根 软管',\n",
       " '安装费 太贵 机子 挂 墙 接 两条 换 十六 安 面板 收 一百',\n",
       " '感觉 行 加热 速度 进水 设计 洗 一半 冷水 热水 混起来 变冷',\n",
       " '满意 购物 实体店 合算 到货 安装 安装 师傅 态度',\n",
       " '奔 品牌 商城 记得 信赖 售后服务 方便快捷 顺便 帮 朋友',\n",
       " '安装 师傅 态度 真的 满意',\n",
       " '新房 装修 安装 快递 小哥 服务 安装 安装 装 追加',\n",
       " '东西 装 漂亮 安装 空间 有限 安装 师傅 发挥 聪明才智 巧妙 解决',\n",
       " '物流 很快 服务 到位 机子 很漂亮 真的 喜欢 家电',\n",
       " '安装 晚上 试试',\n",
       " '昨天 到货 师傅 装 态度 售后 做 特别',\n",
       " '质量 产品 力 送货 师傅 服务态度 信赖 上买 家电 满意 货到付款 赞',\n",
       " '国内 品牌 质量 保证 价格比 实体店 便宜 好多 外观设计 很棒 没错',\n",
       " '安装 师傅 安装 安装 很快 服务 到位 售后 保障',\n",
       " '速度 买到 老家 没想到 送到 乡下 服务 家 赞',\n",
       " '漏水 现象 家 漏水 漏下 泡 责任 评评理',\n",
       " '不错 不错 烧水 速度 保温 时间 长 晚上 十点 关电 第二天 晚上 用水 热 不错',\n",
       " '东西 收到 物流 准时 售后服务 人员 安装 找 帮忙',\n",
       " '送货 很快 安装 师傅 服务 到位 态度 收费 负责 家电 首选',\n",
       " '不错 第二个 帮 大嫂 包装箱 里 发现 遥控 架子 那款',\n",
       " '物流 很快 东西 特别 包装 实体店 优惠 东西 正品',\n",
       " '品牌 值得 信赖 安装 师傅 服务态度 安装 细心',\n",
       " '洗澡 杠杠',\n",
       " '安装 没用',\n",
       " '样子 不错 评价',\n",
       " '派送 送货上门 派件 员 敲门 送货 真心 货品 质量保证 信赖',\n",
       " '满意 实惠 安装 太丑 售后 到位 遥控 坏 店家 补发',\n",
       " '装 昨天 下单 电器 服务',\n",
       " '质量 电子 屏幕 大气 上档次 送货 速度 很快 快递 小哥 服务态度 更好 十分满意',\n",
       " '品牌 质量 性能 很棒 真心 赞 一步 空调 油烟机',\n",
       " '宝贝 收到 质量 物美价廉 值得 推荐 好评 好评',\n",
       " '不错 安装 人员 负责 点 赞 希望 一如 继往 顾客 售后 体验',\n",
       " '昨天 下单 快递 安装 遥控 控制 操作 减单 全家 喜欢',\n",
       " '家电 物美价廉 放心 舒心',\n",
       " '配送 大哥 态度 辛苦 安装 师傅 辛苦 忙活 晚上 两家 服务 赞',\n",
       " '货是 收到 找 安装 拉萨 投诉 电话 货 退回去 后期 售后服务 跟不上',\n",
       " '产品 外貌 好看 产品质量 正品 行货 谢谢 亲 下次',\n",
       " '外观 很漂亮 主板 多长时间 总体 不错 价格 浮动',\n",
       " '两个 月 烧水 慢些 从度 到度 一个多 小时 着用 不行',\n",
       " '保温 效果 甚是 升 自带 喷头 淋上 过瘾',\n",
       " '送货 速度 服务 热情 安装 讲解 期待 效果 服务',\n",
       " '好好 看似 失败 失败 阿白阿 白阿白 阿白 阿白阿 白阿白 阿白阿 白阿白 阿白阿 白阿白 阿白',\n",
       " '东西 太 快递 大哥 一车 拉不下 分 两次 给送 东西 实惠',\n",
       " '品牌 送货 速度 质量 过关 热 出水 率 高 满意',\n",
       " '真心 不错 送 装 售后 师傅 安装 力 品牌 质量',\n",
       " '安装 费用 四米 管子 关闭 加热 显示 温度 人性化 机能 温度',\n",
       " '信赖 品质 品质 不错 想不 字',\n",
       " '安装 感觉 高级 师傅 安装 态度 价格 价格 高',\n",
       " '送货 贵 外观 按装好 效果 货 值得 信赖',\n",
       " '电器 看着 质量 保证 希望 这回 不错 哈哈哈哈 哈哈哈哈',\n",
       " '东西 安装 师傅 特别 用心 特别 负责人 中午 吃饭 尽职尽责 装完',\n",
       " '不错 安装 规整 价格 超过',\n",
       " '产品 不错 很好 服务 值得 赞 性价比 超级 高 愉快 消费 体验',\n",
       " '下单 送往 乡下 物流 系统 物流 转 委托 公司 送货 太慢 一个月 时间 乡镇 费用 找 货车 拉 字 农村 太 难 搞定',\n",
       " '发货 速度 超快 几天 感谢 体验 急速 往后 乐趣 谢谢 谢谢',\n",
       " '安装 师傅 服务 棒棒 棒',\n",
       " '不错',\n",
       " '宝贝 收到 满意 送货 服务态度 力',\n",
       " '物流 挺快 第二天 服务周到 安装 安装 评价',\n",
       " '东西 晒 不错 值得 拥有 推荐 品牌 不错',\n",
       " '一段时间 总体 效果 不错 额外 收取 材料费 太贵 伤',\n",
       " '没用 品牌 值得 信赖 价格合理 送货 服务态度',\n",
       " '安装 麻烦 安装 情况 行 热水 充足',\n",
       " '品牌 行 通电 售后 维修 总 保障',\n",
       " '产品 信任',\n",
       " '收到 快递 过程 中 破损 等用 再来 追评',\n",
       " '国庆节 回家 里 老妈 送货 超级 加热',\n",
       " '送货 外面 漂亮 按装好 效果 品牌 值得 信赖',\n",
       " '快递 大哥 辛苦',\n",
       " '物流 速度 超出 想想 三线 城市 先天 下单 第二天 到货 中 点 赞',\n",
       " '一段时间 不错 便宜 家电 希望 质量 保障',\n",
       " '评论 感觉 不错 外观 漂亮 挺不错 物美价廉 喜欢 谢谢 强 不错',\n",
       " '商品 还好 安装 收取 备件 费 接头 管子 吊架 收 感觉 收取 费用 不合理',\n",
       " '收到 安装 不错 谢谢 送货 小哥 送货上门',\n",
       " '支持 国产 品牌 外观 质量 价位 到位 完美 美美 美',\n",
       " '收到 快递 很快 拆 师傅 说装 拆 不知 评价',\n",
       " '升 预约 洗浴 无线 遥控',\n",
       " '正品 价格 实惠 服务 送货 下午 第二天',\n",
       " '东西 不错 安装 花 材料费',\n",
       " '收到 货物 很快 安装 快递 师傅 力 期待 效果 没错',\n",
       " '送货 门 服务态度 质量 满意 质量 不错 很好 满意',\n",
       " '东西 不错 送货 师傅 安装 师傅 态度 特别 安装 师傅 下班 两个 小时',\n",
       " '美观大方 经济 实惠 省电 好用 商城 发货 快速 安装 到位 好极了',\n",
       " '物流 速度 很快 宝贝 实惠 很好 购物 体验',\n",
       " '不错 淋浴 太 送货 收到',\n",
       " '前一天 剩下 第二天 早上 节省 电 安装 服务周到 客气',\n",
       " '配送 师付 服务',\n",
       " '加热 很快 满意 我家 承重墙 挂架 管件 有点儿 小贵',\n",
       " '服务周到 家中 老人 小孩 送 上楼 点 赞 加油',\n",
       " '喜欢',\n",
       " '舒适 功率 看清楚 希望 亲们 看清楚 下单',\n",
       " '价格 实惠 满意 发货 挺快 物超所值 全 五分 送',\n",
       " '东京 送货到 家 物流 很快 物流 服务 满意 售货 安装 愉快 投诉 售后',\n",
       " '配送 售后服务 订购 三天 安装 满意',\n",
       " '品牌 值得 信耐 东西 很好 快递 超快 安装 师傅 很快 上门 安装 不错',\n",
       " '安装 专业 宝贝 不错 保温 不错 昨天晚上 热水 保留 断电',\n",
       " '一周 不错 省心 服务 杠杠 没量 尺寸 买大 装 申请 退货 拍 处理速度 很快 耽误 大赞',\n",
       " '那天 帮忙 安装 朋友 告诉 漏电 咨询 一大 圈 地线 产品 毛病 好评',\n",
       " '还行',\n",
       " '安装 人员 服务 满意 安装 还给 打扫 干干净净 大气 下次',\n",
       " '昨天 收到 售后 电话 安装 颜色 好看 读数 棒棒 哒',\n",
       " '超值 划算 满意 购物 一如既往 支持 商城',\n",
       " '送到 帮忙 装好 地方 服务 更好',\n",
       " '很好 实体店 便宜 安装 师傅 服务态度',\n",
       " '质量 功率 算是 省 点 一点',\n",
       " '喜欢 购物 正品 行货 送货 速度 一流 服务 一流',\n",
       " '烧水 很快 静音 安装 很大 气 推荐',\n",
       " '递给 力 老家 泥巴路 车子 不能到达 快递 人员 扛 家 快递 人员 点 赞',\n",
       " '帮 朋友 帮 朋友 帮 朋友',\n",
       " '家电 质量 价格低 老百姓 家电 城 制热 效果 品牌 值得 信赖 噪音',\n",
       " '放心 安装 服务 满意 犹豫 小伙伴 赶紧 下单',\n",
       " '安装 师傅 专业 耐心 送货 师傅 服务 没得说 后期 质量 追评',\n",
       " '送货 服务 安装 太慢 几天 没人 安装 有待 提高',\n",
       " '安装 服务 到位 常年 三位数 特惠 合适',\n",
       " '大小 合适 商品 满意 送货 速度 很快 家电',\n",
       " '配送 包装 完好 质量 保证 认准 信赖',\n",
       " '宝贝 售后 安装 人员 安装 很好 值得 购买',\n",
       " '家里 终于 不用 煤气 爸妈 放心',\n",
       " '送货 服务 使用方便 经济 满意',\n",
       " '不错 好看 加热 安装 师傅 技术',\n",
       " '货物 刚刚 收到 没卡盟 试 过后 吃货 吃货',\n",
       " '产品 产品 产品 产品 产品 产品',\n",
       " '快递 太 给力 下午 拍 第二天 上午 货 送到 家 特别 快递 帅哥 一口气 扛 我家 楼 微笑 热情 细致 服务 太 感动 快递 帅哥 大赞 好评 安装 第三天 上午 安好 安装 师傅 安装 教 房间 打扫 干干净净 师傅 点 赞 好评 昨天 满意',\n",
       " '外观 好看 遥控 控制 好用 硬道理',\n",
       " '货好 物流 安装 遥控器 超过 米',\n",
       " '服务 质量 品牌 值 信赖 推荐 做',\n",
       " '物流 特别 高端 大气 上档次 满意 下次 购买',\n",
       " '价格 实惠 物流 很快 服务 家 正品 低价 家电',\n",
       " '自营 东西 值得 信赖 物流 速度 杠杠 支持 支持 支持 支持',\n",
       " '送货 安装 热情 服务 不错 值得 信赖',\n",
       " '商品 不错 每次 购买 电器 总会 收费 项目',\n",
       " '大小 合适 加热 送到 货 安装 师傅 上门 安装',\n",
       " '家电 质量 保证 送货 安装 售后 放心',\n",
       " '质量 品质 保证 喜欢 送货 速度 很快',\n",
       " '客户 提醒 节能 补贴 省 钱 点 赞 当天 送货 当天 安装',\n",
       " '宝贝 收到 第一次 试水 烧 冬天 热水',\n",
       " '质量 送货 很快 服务态度 购物 选 毛病',\n",
       " '很好 两个 洗澡 废水 洗完 热水',\n",
       " '真的 帮 朋友 几台 安装 售后服务 安装 师傅 服务',\n",
       " '第二个 第一次 家 帮 姑姑 性价比 高 家里 电器 信赖',\n",
       " '不错 产品质量 杠杠 品质 选择',\n",
       " '质量 送货 速度 第二天 到货 产品 满意 安装 师傅 力 满意',\n",
       " '到货 安装 触屏 开关 不错 预约 功能 品牌',\n",
       " '不错 送货 超快 原因 售后 贴心 安装 人员 沟通 安排 更改 时间',\n",
       " '品牌 值得 信赖 方便快捷 安装',\n",
       " '正品 送货 快递 员 值得 信赖',\n",
       " '机子 比较满意 淋浴 喷头 重',\n",
       " '不错 忘 功率 热 比较慢 小时',\n",
       " '不愧 做 熱 水器 真的 特別 預約',\n",
       " '整体 不错 安装 专业 态度 唯一 感觉 遥控器 一般般',\n",
       " '很好 热 质量 安装 服务 支持',\n",
       " '老家 年',\n",
       " '东西 行 几天 开 耗电量 有待 考证',\n",
       " '热水 机 价格 实惠 发货 速度 安装 师傅 细心',\n",
       " '到货 很快 发现 上门 安装 师傅 力',\n",
       " '第二天 客服 电话 预约 安装 安装 很快 服务 满意',\n",
       " '安装 材料费 贵 几个 接头 就块 无奈 安',\n",
       " '不错 安装 服务 人员 接错 线 找 来装 不错',\n",
       " '收到 师傅 送 挺快 早上 打开',\n",
       " '特意 评价 质量 热 保温 效果 挺好',\n",
       " '质量 图片 介绍 一莫 物流 很快 赞 下次 店 购买',\n",
       " '头 天下 单隔 送货 隔 安装 服务满意 牌子',\n",
       " '安装 完毕 简洁 大方 价格 实惠 物流 送货 上楼 检验 评价',\n",
       " '服务态度 送货上门 耐心 取货 希望 服务',\n",
       " '一段时间 很好 拍 降价 收到 时 确认 收货 时 显示 价格 降',\n",
       " '送货 安装 很快 家电 购买 售后 放心',\n",
       " '帮 朋友 朋友 不错 下次',\n",
       " '送货 师傅 服务 太晚 送来 晚上 十点 送来 农村 早就 睡觉',\n",
       " '第二天 安装 师傅 看着 高大 购买',\n",
       " '配送 速度 很快 售后 服务 电话 安装 师傅 坐等',\n",
       " '好久 评价 确实 物美价廉 热水 时间 短 洗澡 舒服',\n",
       " '物流 很快 售后服务 挺好 太阳能 搞清楚',\n",
       " '美观 水热 反正 关过 耗电 咋样 希望 很久',\n",
       " '拆开 老房子 插座 进水口 只能 退',\n",
       " '安装 师傅 力 专业 值得 信赖',\n",
       " '不错 很大 外观 美观 加热 品质 服务 赞',\n",
       " '收到 没装 牌子 质量 不错 快递 小哥 服务态度 热情 好评',\n",
       " '第二件 不错 值得 信赖 第一个 升 超值',\n",
       " '物流 很快 快递 师傅 敬业 非常感谢 安上 评价',\n",
       " '装 一段时间 评价 商品 总体 比较满意 售后 结实',\n",
       " '不错 物流 服务 真心 力 非常感谢 售后 安装 师傅 满意',\n",
       " '降价 单元 下单 便宜 关注 产品 抢购',\n",
       " '网 购 认 产品 正品 售后 力',\n",
       " '东西 收到 安装 看着 不错 安好',\n",
       " '妈妈 好用 价格 实惠 售后 安装 态度 满意',\n",
       " '隔天 再用 启动 一颗 星不谢 保修 牌子 真的 完蛋 同事 家 电器 清一色 后悔 听',\n",
       " '安装 配 两个 安装 空间 安装 位置 洗手间 外面 隔 一堵 墙 米 之内 下层 墙 材料 请 安装 人员 挂 墙壁 请 离开 管道 安装 省 大洋 晚上 邻居 告诉 两个 安装 人员 路上 嘀咕 早上 白跑 一趟 抠 业主 早 不来 几天 配 花 洒 漏水 郁闷',\n",
       " '愉快 网购 几天 舒服 下单 付款 半小时 客服 打电话 当天 送货 心喜 请假 回家 等待 小时 物流 打电话 所在区域 第二天 送 语 天 工资 人员 电话 情况 商家 下文 第二天 点 安装 师傅 安装 一看 安排 送货 中 告知 货 惠州 下午 点 送到 郁闷 下午 点 安装 师傅 告知 点 还好 点货 电话 安装 师傅 点 点 无人 接听 点 终于 安排 太 忙 点 无人 天 洗澡 感冒 冷水 洗 点 师傅 说好 再晚 找 宾馆 解决 第三天 中午 安装 面对 面对 安装 师傅 无语 楼下 商场 逛 价格 付款 送货 安装 送 一盒 安琪 月饼 无语 希望 蒸蒸日上 每况愈下 服务',\n",
       " '消费 令 生气 安装 服务 广州 海珠区 新港 西 地区 太 差 周三 预约 周五 点 上门 安装 周五 点 安装 人员 打电话 预约 电话 时间 下午 安装 打电话 提早 两天 预约 时间 安排 差 恶虐 借口 请假 在家 上午 几个 吵 很久 肯 中午 电话 预约 时 特意 问 明白 要否 收费 客服 水管 收费 收费 上门 零件 收费 转弯 接口 收元 打劫 安装 出示 收费 标准 小册子 零件 图片 全 拉伸 变形 小图标 识别 零件 实际上 开价 安装 人员 装 水管 时 有意 装 两个 弯位 估计 多用 几个 转弯 接口 难看 糟糕 出水 水压 冷水 降低 安装 人员 承认 安装 两个 储水 发现 安装 人员 一共 收 安装 人员 电话 回访 时 记得 好评 心想 便宜 想 占 电话 回访 投诉 应付 打交道',\n",
       " '时说 免费 安装 到货 安装 免费 配件 钱 找遍 店家 详情页 费用 字 未 提 配件 配件 全国 统一价 装 漏水 保修 逼 花 这份 钱 哪们 子 免费 安装 实体店 免费 安装 机器 价钱 一毛不花 实体店 安完 配件 图 几个 东西 值 几个 钱 看吧 师傅 提货 上楼 时 货物 楼梯 滚下去 师傅 说换 一台 分钟 换回来 速度 挺快 换 换货 查询 客服 查询 不到 担心',\n",
       " '时间 设定 预约 只能 预约 几个 小时 请 看好 安装 费用 安装费 包括 两个 角阀 两 支架 请 看好 安装 费用 安装费 包括 两个 角阀 两 支架 请 看好 安装 费用 安装费 包括 两个 角阀 两 支架',\n",
       " '电话 客服 忙 关注 微信 平台 安装 试 好几个 手机 打不开 安装 维修 页面 尝试 安装 人员 天 麻烦 请 告知 安装 方法 联系方法',\n",
       " '下图 安装 安装公司 加收 八十块 接头 做 水电 肯定 装 打电话 装是 保修 装 公司 安装 漏电 电死人 操 公司 客服 电话 找 工程师 解答 技术 漏洞 安装 漏电 半天 回复 家里 三台 水 本来 导电介质 装 花钱 漏电 机器 回家 气死人 建议 三思',\n",
       " '漏水 安装 师傅 坏 找 客服 客服 专业 师傅 检验 完开 确认 单再 申请 退换货 申请 天 发货 广东 月 天 一周 时间 期间 凉水 冲澡 高估 品质 服务 放 自来水 几十分钟 客服 电话 糟糕 采购 良心 评价 想 采购 慎重',\n",
       " '月初 下单 抢 很快 送上门 安装 设定 度 断电 情况 自动 升温 度 小时 下降 度 启动 打电话 维修 师傅 说度 以内 师傅 走 当天 晚上 设定 度 没人 断电 情况 下降 到度 幅度 高达度 当天 保修 维修 师傅 说度 真 想 问问 没人 断电 情况 设定 自动 回落 到度 温差 度 告诉 浮动 度 专业 人员 做 检测 周 了连 个影 再也 回来 东西 真 想 问问 刘 强 东 承诺 品牌',\n",
       " '安装 收费 别信 安装 免费 电器 安装 免费 实体店 真 免费 商品 实体店 便宜 安装费 离谱 这类 东西 总 坏 装 装上 凑合',\n",
       " '安装 师傅 太 死 脑袋 太石 脑瓜子 我家 安装 厨房 里 不行 装 非 装 卫生间 家装 装 厨房 卫生间 装 厨房 安装 装 卫生间 里 气死我了 没装 安装 怎么回事 不想 太 过格 服务态度 太不像话 走 没给 安装 请问 客服',\n",
       " '东西 售后 真 不行 第一天 没装 调整 位置 两天 头条 下午 预约 第二天 早就 安装 赶工期 答应 第二天 安装 洁具 工人 几个 小时 不见 打电话 下午 气死 打电话 调节 几分钟 回复 这一 推 没影 安装工人 打算 投诉 电话 打来 有人 装车 装 上车 安装 路程 半个 小时 下午 一点半 诚信 管件 杂 牌子 原装 配套 质量 垃圾',\n",
       " '特 堵心 网购 商家 服务 电话 确认 送货 时间 快递 一如既往 五星 好评 售后 安装 服务 中 太气 第一天 中午 安装 夜里 爆裂 跑 水 岁 老人 在家 半夜 吓死人 水 卫生间 四面 喷 夜里 售后服务 人工 台 留言 售后服务 部 第二天 回复 安排 安装工 维修 名 安装工 收取 材料 钱 第一次 安装 公司 用户 表示歉意 用户 提供 优质服务 目地 诺大 公司 差 钱 开 收据 用户 找 赔偿 用户 安装工 售后服务 一部分 真心话 售后服务 海尔 差远了',\n",
       " '远离 平台 服务 太 差 好评 给与 售后服务 赞 购买 此款 家庭 线路 电压 稳 连续 调整 导致 卧室 吊灯 烧毁 售后 协助 确认 电压 稳 特 申请 天无 理由 退货 天无 理由 退货 打折 退货 只能 退 八折 退货 态度强硬 电压 无关 平台 东西 天无 理由 全款 衣服 适合 全款 退 折退 鸟 规则 最终 协调 售后 最终 售后 态度 诚恳 服务 家庭 大大小小 台 产品 远离',\n",
       " '安装 第二天 热水 品质 第一天 好好 洗完 澡 关 没想到 第二天 提前 烧 小时 洗澡 发现 怎么弄 热水 不想 做 解释',\n",
       " '越来越 差 再也 不用 反正 时代 电器 牌子 更好 多着 电器 费电 加热 慢 安装 材料 推荐 购买 建议 购买',\n",
       " '免费 安装 变相 收费 一米 管子 两个 接头 加块 固定 板收 两百多 块钱 材料费 纯属 霸王 条款 选购 需谨慎 免 安装费 建议 购买 亲去 两种 材料 买来 让售 装',\n",
       " '送来 安装 两天 扔 客厅 里 没人管 客服 说法 放到 保修期 安装 装',\n",
       " '感觉 坑 真不知道 包 安装 支架 一大笔钱 真心 不想 安装 张 安装 费用 真 晕 不想',\n",
       " '安装 多块 穷 疯 抢钱 墙体 不行 安装 支架 支架 金子 做 安装 空调 架子 镀锌 安装 支架 保修 霸王 条款 强烈建议 安装 抢钱',\n",
       " '自营 号 下单 号 崔 号 崔 号 晚上 八点钟 送到 装 装好 两个 安装 人员 材料 装 一点 不乐意 专业 旧 西门子 折下来 折要 折费 工具 包 安装 挂 墙上 管路 接 简洁',\n",
       " '东西 行 上门 安装 一塌糊涂 装个 装 三个 小时 转头 洞 装进去 膨胀 螺丝 松松垮垮 墙上 还给 两个 洞 新 新 房子 醉',\n",
       " ...]"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['pos'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ['neg'],\n",
       " ...]"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#第一步：构造特征空间和标签\n",
    "\n",
    "Y=[]\n",
    "for ind in review_long_clean.index_content.unique():\n",
    "    y=[ word for word in review_long_clean.content_type[review_long_clean.index_content==ind].unique() ]\n",
    "    Y.append(y)\n",
    "len(Y)\n",
    "\n",
    "X=[]\n",
    "for ind in review_long_clean.index_content.unique():\n",
    "    term=[ word for word in review_long_clean.word[review_long_clean.index_content==ind].values ]\n",
    "    X.append(' '.join(term))\n",
    "len(X)\n",
    "\n",
    "X\n",
    "Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=5,\n",
       "                       max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort=False,\n",
       "                       random_state=None, splitter='best')"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "在训练集上的准确率：0.72\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         neg       0.63      0.96      0.76       197\n",
      "         pos       0.92      0.44      0.60       196\n",
      "\n",
      "    accuracy                           0.70       393\n",
      "   macro avg       0.78      0.70      0.68       393\n",
      "weighted avg       0.77      0.70      0.68       393\n",
      "\n",
      "在测试集上的准确率：0.70\n"
     ]
    }
   ],
   "source": [
    "#第二步：训练集、测试集划分\n",
    "x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.2,random_state=7)\n",
    "\n",
    "#第三步：词转向量，01矩阵\n",
    "count_vec=CountVectorizer(binary=True) \n",
    "x_train=count_vec.fit_transform(x_train)\n",
    "x_test=count_vec.transform(x_test)  \n",
    "\n",
    "#第四步：构建决策树\n",
    "dtc=tree.DecisionTreeClassifier(max_depth=5)\n",
    "dtc.fit(x_train,y_train)\n",
    "print('在训练集上的准确率：%.2f'% accuracy_score(y_train,dtc.predict(x_train)))\n",
    "\n",
    "y_true=y_test\n",
    "y_pred=dtc.predict(x_test)\n",
    "print(classification_report(y_true,y_pred))\n",
    "print('在测试集上的准确率：%.2f'% accuracy_score(y_true,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\86180\\\\CQX_视频_Python算法实战\\\\视频4_电商产品评论数据情感分析\\\\tree.svg'"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\r\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\r\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n",
       "<!-- Generated by graphviz version 2.38.0 (20140413.2041)\r\n",
       " -->\r\n",
       "<!-- Title: Tree Pages: 1 -->\r\n",
       "<svg width=\"953pt\" height=\"581pt\"\r\n",
       " viewBox=\"0.00 0.00 952.50 581.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 577)\">\r\n",
       "<title>Tree</title>\r\n",
       "<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-577 948.5,-577 948.5,4 -4,4\"/>\r\n",
       "<!-- 0 -->\r\n",
       "<g id=\"node1\" class=\"node\"><title>0</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"750,-573 632,-573 632,-505 750,-505 750,-573\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"691\" y=\"-557.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">不错 &lt;= 0.5</text>\r\n",
       "<text text-anchor=\"middle\" x=\"691\" y=\"-542.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.5</text>\r\n",
       "<text text-anchor=\"middle\" x=\"691\" y=\"-527.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 1571</text>\r\n",
       "<text text-anchor=\"middle\" x=\"691\" y=\"-512.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [790, 781]</text>\r\n",
       "</g>\r\n",
       "<!-- 1 -->\r\n",
       "<g id=\"node2\" class=\"node\"><title>1</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"662,-469 544,-469 544,-401 662,-401 662,-469\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"603\" y=\"-453.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">很快 &lt;= 0.5</text>\r\n",
       "<text text-anchor=\"middle\" x=\"603\" y=\"-438.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.49</text>\r\n",
       "<text text-anchor=\"middle\" x=\"603\" y=\"-423.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 1352</text>\r\n",
       "<text text-anchor=\"middle\" x=\"603\" y=\"-408.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [773, 579]</text>\r\n",
       "</g>\r\n",
       "<!-- 0&#45;&gt;1 -->\r\n",
       "<g id=\"edge1\" class=\"edge\"><title>0&#45;&gt;1</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M662.429,-504.884C654.744,-495.976 646.34,-486.235 638.335,-476.957\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"640.911,-474.585 631.729,-469.299 635.611,-479.157 640.911,-474.585\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"629.892\" y=\"-490.532\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">True</text>\r\n",
       "</g>\r\n",
       "<!-- 18 -->\r\n",
       "<g id=\"node19\" class=\"node\"><title>18</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"835.5,-469 724.5,-469 724.5,-401 835.5,-401 835.5,-469\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"780\" y=\"-453.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">本来 &lt;= 0.5</text>\r\n",
       "<text text-anchor=\"middle\" x=\"780\" y=\"-438.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.143</text>\r\n",
       "<text text-anchor=\"middle\" x=\"780\" y=\"-423.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 219</text>\r\n",
       "<text text-anchor=\"middle\" x=\"780\" y=\"-408.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [17, 202]</text>\r\n",
       "</g>\r\n",
       "<!-- 0&#45;&gt;18 -->\r\n",
       "<g id=\"edge18\" class=\"edge\"><title>0&#45;&gt;18</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M719.896,-504.884C727.668,-495.976 736.167,-486.235 744.263,-476.957\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"747.007,-479.135 750.945,-469.299 741.733,-474.533 747.007,-479.135\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"752.642\" y=\"-490.542\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">False</text>\r\n",
       "</g>\r\n",
       "<!-- 2 -->\r\n",
       "<g id=\"node3\" class=\"node\"><title>2</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"491,-365 373,-365 373,-297 491,-297 491,-365\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"432\" y=\"-349.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">信赖 &lt;= 0.5</text>\r\n",
       "<text text-anchor=\"middle\" x=\"432\" y=\"-334.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.48</text>\r\n",
       "<text text-anchor=\"middle\" x=\"432\" y=\"-319.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 1280</text>\r\n",
       "<text text-anchor=\"middle\" x=\"432\" y=\"-304.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [768, 512]</text>\r\n",
       "</g>\r\n",
       "<!-- 1&#45;&gt;2 -->\r\n",
       "<g id=\"edge2\" class=\"edge\"><title>1&#45;&gt;2</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M547.481,-400.884C531.121,-391.125 513.084,-380.366 496.226,-370.31\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"497.914,-367.242 487.533,-365.125 494.328,-373.253 497.914,-367.242\"/>\r\n",
       "</g>\r\n",
       "<!-- 11 -->\r\n",
       "<g id=\"node12\" class=\"node\"><title>11</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"652,-365 554,-365 554,-297 652,-297 652,-365\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"603\" y=\"-349.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">情况 &lt;= 0.5</text>\r\n",
       "<text text-anchor=\"middle\" x=\"603\" y=\"-334.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.129</text>\r\n",
       "<text text-anchor=\"middle\" x=\"603\" y=\"-319.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 72</text>\r\n",
       "<text text-anchor=\"middle\" x=\"603\" y=\"-304.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [5, 67]</text>\r\n",
       "</g>\r\n",
       "<!-- 1&#45;&gt;11 -->\r\n",
       "<g id=\"edge11\" class=\"edge\"><title>1&#45;&gt;11</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M603,-400.884C603,-392.778 603,-383.982 603,-375.472\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"606.5,-375.299 603,-365.299 599.5,-375.299 606.5,-375.299\"/>\r\n",
       "</g>\r\n",
       "<!-- 3 -->\r\n",
       "<g id=\"node4\" class=\"node\"><title>3</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"365,-261 247,-261 247,-193 365,-193 365,-261\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"306\" y=\"-245.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">实惠 &lt;= 0.5</text>\r\n",
       "<text text-anchor=\"middle\" x=\"306\" y=\"-230.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.469</text>\r\n",
       "<text text-anchor=\"middle\" x=\"306\" y=\"-215.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 1229</text>\r\n",
       "<text text-anchor=\"middle\" x=\"306\" y=\"-200.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [768, 461]</text>\r\n",
       "</g>\r\n",
       "<!-- 2&#45;&gt;3 -->\r\n",
       "<g id=\"edge3\" class=\"edge\"><title>2&#45;&gt;3</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M391.091,-296.884C379.648,-287.62 367.091,-277.455 355.221,-267.845\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"357.109,-264.871 347.135,-261.299 352.705,-270.312 357.109,-264.871\"/>\r\n",
       "</g>\r\n",
       "<!-- 10 -->\r\n",
       "<g id=\"node11\" class=\"node\"><title>10</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"481,-253.5 383,-253.5 383,-200.5 481,-200.5 481,-253.5\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"432\" y=\"-238.3\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.0</text>\r\n",
       "<text text-anchor=\"middle\" x=\"432\" y=\"-223.3\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 51</text>\r\n",
       "<text text-anchor=\"middle\" x=\"432\" y=\"-208.3\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [0, 51]</text>\r\n",
       "</g>\r\n",
       "<!-- 2&#45;&gt;10 -->\r\n",
       "<g id=\"edge10\" class=\"edge\"><title>2&#45;&gt;10</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M432,-296.884C432,-286.326 432,-274.597 432,-263.854\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"435.5,-263.52 432,-253.52 428.5,-263.52 435.5,-263.52\"/>\r\n",
       "</g>\r\n",
       "<!-- 4 -->\r\n",
       "<g id=\"node5\" class=\"node\"><title>4</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"241,-157 123,-157 123,-89 241,-89 241,-157\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"182\" y=\"-141.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">放心 &lt;= 0.5</text>\r\n",
       "<text text-anchor=\"middle\" x=\"182\" y=\"-126.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.463</text>\r\n",
       "<text text-anchor=\"middle\" x=\"182\" y=\"-111.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 1207</text>\r\n",
       "<text text-anchor=\"middle\" x=\"182\" y=\"-96.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [767, 440]</text>\r\n",
       "</g>\r\n",
       "<!-- 3&#45;&gt;4 -->\r\n",
       "<g id=\"edge4\" class=\"edge\"><title>3&#45;&gt;4</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M265.741,-192.884C254.479,-183.62 242.122,-173.455 230.44,-163.845\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"232.428,-160.949 222.482,-157.299 227.981,-166.355 232.428,-160.949\"/>\r\n",
       "</g>\r\n",
       "<!-- 7 -->\r\n",
       "<g id=\"node8\" class=\"node\"><title>7</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"357,-157 259,-157 259,-89 357,-89 357,-157\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"308\" y=\"-141.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">太贵 &lt;= 0.5</text>\r\n",
       "<text text-anchor=\"middle\" x=\"308\" y=\"-126.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.087</text>\r\n",
       "<text text-anchor=\"middle\" x=\"308\" y=\"-111.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 22</text>\r\n",
       "<text text-anchor=\"middle\" x=\"308\" y=\"-96.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [1, 21]</text>\r\n",
       "</g>\r\n",
       "<!-- 3&#45;&gt;7 -->\r\n",
       "<g id=\"edge7\" class=\"edge\"><title>3&#45;&gt;7</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M306.649,-192.884C306.808,-184.778 306.981,-175.982 307.148,-167.472\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"310.65,-167.366 307.347,-157.299 303.652,-167.229 310.65,-167.366\"/>\r\n",
       "</g>\r\n",
       "<!-- 5 -->\r\n",
       "<g id=\"node6\" class=\"node\"><title>5</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"118,-53 0,-53 0,-0 118,-0 118,-53\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"59\" y=\"-37.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.459</text>\r\n",
       "<text text-anchor=\"middle\" x=\"59\" y=\"-22.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 1191</text>\r\n",
       "<text text-anchor=\"middle\" x=\"59\" y=\"-7.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [767, 424]</text>\r\n",
       "</g>\r\n",
       "<!-- 4&#45;&gt;5 -->\r\n",
       "<g id=\"edge5\" class=\"edge\"><title>4&#45;&gt;5</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M138.981,-88.9485C126.478,-79.3431 112.853,-68.8747 100.449,-59.345\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"102.561,-56.5537 92.4986,-53.2367 98.2961,-62.1046 102.561,-56.5537\"/>\r\n",
       "</g>\r\n",
       "<!-- 6 -->\r\n",
       "<g id=\"node7\" class=\"node\"><title>6</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"234,-53 136,-53 136,-0 234,-0 234,-53\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"185\" y=\"-37.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.0</text>\r\n",
       "<text text-anchor=\"middle\" x=\"185\" y=\"-22.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 16</text>\r\n",
       "<text text-anchor=\"middle\" x=\"185\" y=\"-7.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [0, 16]</text>\r\n",
       "</g>\r\n",
       "<!-- 4&#45;&gt;6 -->\r\n",
       "<g id=\"edge6\" class=\"edge\"><title>4&#45;&gt;6</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M183.049,-88.9485C183.311,-80.7153 183.592,-71.848 183.858,-63.4814\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"187.364,-63.3428 184.183,-53.2367 180.367,-63.1206 187.364,-63.3428\"/>\r\n",
       "</g>\r\n",
       "<!-- 8 -->\r\n",
       "<g id=\"node9\" class=\"node\"><title>8</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"355,-53 257,-53 257,-0 355,-0 355,-53\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"306\" y=\"-37.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.0</text>\r\n",
       "<text text-anchor=\"middle\" x=\"306\" y=\"-22.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 21</text>\r\n",
       "<text text-anchor=\"middle\" x=\"306\" y=\"-7.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [0, 21]</text>\r\n",
       "</g>\r\n",
       "<!-- 7&#45;&gt;8 -->\r\n",
       "<g id=\"edge8\" class=\"edge\"><title>7&#45;&gt;8</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M307.3,-88.9485C307.126,-80.7153 306.939,-71.848 306.762,-63.4814\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"310.256,-63.1604 306.545,-53.2367 303.257,-63.3086 310.256,-63.1604\"/>\r\n",
       "</g>\r\n",
       "<!-- 9 -->\r\n",
       "<g id=\"node10\" class=\"node\"><title>9</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"464.5,-53 373.5,-53 373.5,-0 464.5,-0 464.5,-53\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"419\" y=\"-37.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.0</text>\r\n",
       "<text text-anchor=\"middle\" x=\"419\" y=\"-22.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 1</text>\r\n",
       "<text text-anchor=\"middle\" x=\"419\" y=\"-7.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [1, 0]</text>\r\n",
       "</g>\r\n",
       "<!-- 7&#45;&gt;9 -->\r\n",
       "<g id=\"edge9\" class=\"edge\"><title>7&#45;&gt;9</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M346.822,-88.9485C357.89,-79.526 369.933,-69.2731 380.954,-59.8906\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"383.424,-62.3842 388.77,-53.2367 378.886,-57.0542 383.424,-62.3842\"/>\r\n",
       "</g>\r\n",
       "<!-- 12 -->\r\n",
       "<g id=\"node13\" class=\"node\"><title>12</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"597,-261 499,-261 499,-193 597,-193 597,-261\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"548\" y=\"-245.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">进不去 &lt;= 0.5</text>\r\n",
       "<text text-anchor=\"middle\" x=\"548\" y=\"-230.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.082</text>\r\n",
       "<text text-anchor=\"middle\" x=\"548\" y=\"-215.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 70</text>\r\n",
       "<text text-anchor=\"middle\" x=\"548\" y=\"-200.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [3, 67]</text>\r\n",
       "</g>\r\n",
       "<!-- 11&#45;&gt;12 -->\r\n",
       "<g id=\"edge12\" class=\"edge\"><title>11&#45;&gt;12</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M585.143,-296.884C580.58,-288.422 575.612,-279.207 570.837,-270.352\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"573.782,-268.44 565.956,-261.299 567.621,-271.762 573.782,-268.44\"/>\r\n",
       "</g>\r\n",
       "<!-- 17 -->\r\n",
       "<g id=\"node18\" class=\"node\"><title>17</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"706.5,-253.5 615.5,-253.5 615.5,-200.5 706.5,-200.5 706.5,-253.5\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"661\" y=\"-238.3\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.0</text>\r\n",
       "<text text-anchor=\"middle\" x=\"661\" y=\"-223.3\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 2</text>\r\n",
       "<text text-anchor=\"middle\" x=\"661\" y=\"-208.3\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [2, 0]</text>\r\n",
       "</g>\r\n",
       "<!-- 11&#45;&gt;17 -->\r\n",
       "<g id=\"edge17\" class=\"edge\"><title>11&#45;&gt;17</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M621.831,-296.884C628.085,-285.886 635.061,-273.617 641.373,-262.517\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"644.588,-263.943 646.489,-253.52 638.503,-260.483 644.588,-263.943\"/>\r\n",
       "</g>\r\n",
       "<!-- 13 -->\r\n",
       "<g id=\"node14\" class=\"node\"><title>13</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"586,-157 488,-157 488,-89 586,-89 586,-157\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"537\" y=\"-141.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">架子 &lt;= 0.5</text>\r\n",
       "<text text-anchor=\"middle\" x=\"537\" y=\"-126.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.056</text>\r\n",
       "<text text-anchor=\"middle\" x=\"537\" y=\"-111.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 69</text>\r\n",
       "<text text-anchor=\"middle\" x=\"537\" y=\"-96.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [2, 67]</text>\r\n",
       "</g>\r\n",
       "<!-- 12&#45;&gt;13 -->\r\n",
       "<g id=\"edge13\" class=\"edge\"><title>12&#45;&gt;13</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M544.429,-192.884C543.554,-184.778 542.606,-175.982 541.688,-167.472\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"545.143,-166.866 540.591,-157.299 538.184,-167.617 545.143,-166.866\"/>\r\n",
       "</g>\r\n",
       "<!-- 16 -->\r\n",
       "<g id=\"node17\" class=\"node\"><title>16</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"695.5,-149.5 604.5,-149.5 604.5,-96.5 695.5,-96.5 695.5,-149.5\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"650\" y=\"-134.3\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.0</text>\r\n",
       "<text text-anchor=\"middle\" x=\"650\" y=\"-119.3\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 1</text>\r\n",
       "<text text-anchor=\"middle\" x=\"650\" y=\"-104.3\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [1, 0]</text>\r\n",
       "</g>\r\n",
       "<!-- 12&#45;&gt;16 -->\r\n",
       "<g id=\"edge16\" class=\"edge\"><title>12&#45;&gt;16</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M581.116,-192.884C592.664,-181.336 605.613,-168.387 617.14,-156.86\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"619.884,-159.066 624.48,-149.52 614.934,-154.116 619.884,-159.066\"/>\r\n",
       "</g>\r\n",
       "<!-- 14 -->\r\n",
       "<g id=\"node15\" class=\"node\"><title>14</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"585,-53 487,-53 487,-0 585,-0 585,-53\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"536\" y=\"-37.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.029</text>\r\n",
       "<text text-anchor=\"middle\" x=\"536\" y=\"-22.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 68</text>\r\n",
       "<text text-anchor=\"middle\" x=\"536\" y=\"-7.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [1, 67]</text>\r\n",
       "</g>\r\n",
       "<!-- 13&#45;&gt;14 -->\r\n",
       "<g id=\"edge14\" class=\"edge\"><title>13&#45;&gt;14</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M536.65,-88.9485C536.563,-80.7153 536.469,-71.848 536.381,-63.4814\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"539.878,-63.1991 536.272,-53.2367 532.878,-63.2732 539.878,-63.1991\"/>\r\n",
       "</g>\r\n",
       "<!-- 15 -->\r\n",
       "<g id=\"node16\" class=\"node\"><title>15</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"694.5,-53 603.5,-53 603.5,-0 694.5,-0 694.5,-53\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"649\" y=\"-37.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.0</text>\r\n",
       "<text text-anchor=\"middle\" x=\"649\" y=\"-22.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 1</text>\r\n",
       "<text text-anchor=\"middle\" x=\"649\" y=\"-7.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [1, 0]</text>\r\n",
       "</g>\r\n",
       "<!-- 13&#45;&gt;15 -->\r\n",
       "<g id=\"edge15\" class=\"edge\"><title>13&#45;&gt;15</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M576.172,-88.9485C587.34,-79.526 599.491,-69.2731 610.611,-59.8906\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"613.111,-62.3605 618.497,-53.2367 608.597,-57.0104 613.111,-62.3605\"/>\r\n",
       "</g>\r\n",
       "<!-- 19 -->\r\n",
       "<g id=\"node20\" class=\"node\"><title>19</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"835.5,-365 724.5,-365 724.5,-297 835.5,-297 835.5,-365\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"780\" y=\"-349.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">打孔 &lt;= 0.5</text>\r\n",
       "<text text-anchor=\"middle\" x=\"780\" y=\"-334.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.114</text>\r\n",
       "<text text-anchor=\"middle\" x=\"780\" y=\"-319.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 215</text>\r\n",
       "<text text-anchor=\"middle\" x=\"780\" y=\"-304.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [13, 202]</text>\r\n",
       "</g>\r\n",
       "<!-- 18&#45;&gt;19 -->\r\n",
       "<g id=\"edge19\" class=\"edge\"><title>18&#45;&gt;19</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M780,-400.884C780,-392.778 780,-383.982 780,-375.472\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"783.5,-375.299 780,-365.299 776.5,-375.299 783.5,-375.299\"/>\r\n",
       "</g>\r\n",
       "<!-- 26 -->\r\n",
       "<g id=\"node27\" class=\"node\"><title>26</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"944.5,-357.5 853.5,-357.5 853.5,-304.5 944.5,-304.5 944.5,-357.5\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"899\" y=\"-342.3\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.0</text>\r\n",
       "<text text-anchor=\"middle\" x=\"899\" y=\"-327.3\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 4</text>\r\n",
       "<text text-anchor=\"middle\" x=\"899\" y=\"-312.3\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [4, 0]</text>\r\n",
       "</g>\r\n",
       "<!-- 18&#45;&gt;26 -->\r\n",
       "<g id=\"edge26\" class=\"edge\"><title>18&#45;&gt;26</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M818.636,-400.884C832.365,-389.116 847.791,-375.894 861.429,-364.203\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"863.912,-366.685 869.227,-357.52 859.356,-361.37 863.912,-366.685\"/>\r\n",
       "</g>\r\n",
       "<!-- 20 -->\r\n",
       "<g id=\"node21\" class=\"node\"><title>20</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"835.5,-261 724.5,-261 724.5,-193 835.5,-193 835.5,-261\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"780\" y=\"-245.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">连着 &lt;= 0.5</text>\r\n",
       "<text text-anchor=\"middle\" x=\"780\" y=\"-230.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.106</text>\r\n",
       "<text text-anchor=\"middle\" x=\"780\" y=\"-215.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 214</text>\r\n",
       "<text text-anchor=\"middle\" x=\"780\" y=\"-200.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [12, 202]</text>\r\n",
       "</g>\r\n",
       "<!-- 19&#45;&gt;20 -->\r\n",
       "<g id=\"edge20\" class=\"edge\"><title>19&#45;&gt;20</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M780,-296.884C780,-288.778 780,-279.982 780,-271.472\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"783.5,-271.299 780,-261.299 776.5,-271.299 783.5,-271.299\"/>\r\n",
       "</g>\r\n",
       "<!-- 25 -->\r\n",
       "<g id=\"node26\" class=\"node\"><title>25</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"944.5,-253.5 853.5,-253.5 853.5,-200.5 944.5,-200.5 944.5,-253.5\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"899\" y=\"-238.3\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.0</text>\r\n",
       "<text text-anchor=\"middle\" x=\"899\" y=\"-223.3\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 1</text>\r\n",
       "<text text-anchor=\"middle\" x=\"899\" y=\"-208.3\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [1, 0]</text>\r\n",
       "</g>\r\n",
       "<!-- 19&#45;&gt;25 -->\r\n",
       "<g id=\"edge25\" class=\"edge\"><title>19&#45;&gt;25</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M818.636,-296.884C832.365,-285.116 847.791,-271.894 861.429,-260.203\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"863.912,-262.685 869.227,-253.52 859.356,-257.37 863.912,-262.685\"/>\r\n",
       "</g>\r\n",
       "<!-- 21 -->\r\n",
       "<g id=\"node22\" class=\"node\"><title>21</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"827.5,-157 716.5,-157 716.5,-89 827.5,-89 827.5,-157\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"772\" y=\"-141.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">差评 &lt;= 0.5</text>\r\n",
       "<text text-anchor=\"middle\" x=\"772\" y=\"-126.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.098</text>\r\n",
       "<text text-anchor=\"middle\" x=\"772\" y=\"-111.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 213</text>\r\n",
       "<text text-anchor=\"middle\" x=\"772\" y=\"-96.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [11, 202]</text>\r\n",
       "</g>\r\n",
       "<!-- 20&#45;&gt;21 -->\r\n",
       "<g id=\"edge21\" class=\"edge\"><title>20&#45;&gt;21</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M777.403,-192.884C776.767,-184.778 776.077,-175.982 775.41,-167.472\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"778.883,-166.995 774.612,-157.299 771.904,-167.542 778.883,-166.995\"/>\r\n",
       "</g>\r\n",
       "<!-- 24 -->\r\n",
       "<g id=\"node25\" class=\"node\"><title>24</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"936.5,-149.5 845.5,-149.5 845.5,-96.5 936.5,-96.5 936.5,-149.5\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"891\" y=\"-134.3\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.0</text>\r\n",
       "<text text-anchor=\"middle\" x=\"891\" y=\"-119.3\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 1</text>\r\n",
       "<text text-anchor=\"middle\" x=\"891\" y=\"-104.3\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [1, 0]</text>\r\n",
       "</g>\r\n",
       "<!-- 20&#45;&gt;24 -->\r\n",
       "<g id=\"edge24\" class=\"edge\"><title>20&#45;&gt;24</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M816.039,-192.884C828.725,-181.226 842.965,-168.141 855.598,-156.532\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"858.233,-158.863 863.228,-149.52 853.497,-153.709 858.233,-158.863\"/>\r\n",
       "</g>\r\n",
       "<!-- 22 -->\r\n",
       "<g id=\"node23\" class=\"node\"><title>22</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"825.5,-53 714.5,-53 714.5,-0 825.5,-0 825.5,-53\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"770\" y=\"-37.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.09</text>\r\n",
       "<text text-anchor=\"middle\" x=\"770\" y=\"-22.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 212</text>\r\n",
       "<text text-anchor=\"middle\" x=\"770\" y=\"-7.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [10, 202]</text>\r\n",
       "</g>\r\n",
       "<!-- 21&#45;&gt;22 -->\r\n",
       "<g id=\"edge22\" class=\"edge\"><title>21&#45;&gt;22</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M771.3,-88.9485C771.126,-80.7153 770.939,-71.848 770.762,-63.4814\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"774.256,-63.1604 770.545,-53.2367 767.257,-63.3086 774.256,-63.1604\"/>\r\n",
       "</g>\r\n",
       "<!-- 23 -->\r\n",
       "<g id=\"node24\" class=\"node\"><title>23</title>\r\n",
       "<polygon fill=\"none\" stroke=\"black\" points=\"934.5,-53 843.5,-53 843.5,-0 934.5,-0 934.5,-53\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"889\" y=\"-37.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.0</text>\r\n",
       "<text text-anchor=\"middle\" x=\"889\" y=\"-22.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 1</text>\r\n",
       "<text text-anchor=\"middle\" x=\"889\" y=\"-7.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [1, 0]</text>\r\n",
       "</g>\r\n",
       "<!-- 21&#45;&gt;23 -->\r\n",
       "<g id=\"edge23\" class=\"edge\"><title>21&#45;&gt;23</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M812.921,-88.9485C824.7,-79.4346 837.527,-69.074 849.235,-59.6175\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"851.555,-62.2429 857.136,-53.2367 847.157,-56.7973 851.555,-62.2429\"/>\r\n",
       "</g>\r\n",
       "</g>\r\n",
       "</svg>\r\n"
      ],
      "text/plain": [
       "<graphviz.files.Source at 0x1c428636308>"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#第五步：画决策树\n",
    "\n",
    "cwd=os.getcwd()\n",
    "dot_data=tree.export_graphviz(dtc\n",
    "                              ,out_file=None\n",
    "                              ,feature_names=count_vec.get_feature_names())\n",
    "graph=graphviz.Source(dot_data)\n",
    "graph.format='svg'\n",
    "graph.render(cwd+'/tree',view=True)\n",
    "graph"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### （二）情感分析"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "数据预处理的思路与目标\n",
    "\n",
    "![image.png](attachment:image.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(1)导入评价情感词"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "#来自知网发布的情感分析用词语集\n",
    "\n",
    "pos_comment=pd.read_csv('./正面评价词语（中文）.txt',header=None,sep='\\n',encoding='utf-8') \n",
    "neg_comment=pd.read_csv('./负面评价词语（中文）.txt',header=None,sep='\\n',encoding='utf-8')\n",
    "\n",
    "pos_emotion=pd.read_csv('./正面情感词语（中文）.txt',header=None,sep='\\n',encoding='utf-8')\n",
    "neg_emotion=pd.read_csv('./负面情感词语（中文）.txt',header=None,sep='\\n',encoding='utf-8')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3743, 1)"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(3138, 1)"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(833, 1)"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(1251, 1)"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pos_comment.shape\n",
    "neg_comment.shape\n",
    "\n",
    "pos_emotion.shape\n",
    "neg_emotion.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4576, 1)"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(4389, 1)"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pos=pd.concat([pos_comment,pos_emotion],axis=0)\n",
    "pos.shape\n",
    "\n",
    "neg=pd.concat([neg_comment,neg_emotion],axis=0)\n",
    "neg.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(2)增加新词"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c='点赞'\n",
    "c in pos.values\n",
    "\n",
    "d='歇菜'\n",
    "d in neg.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4577, 1)"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(4390, 1)"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_pos=pd.Series(['点赞'])\n",
    "new_neg=pd.Series(['歇菜'])\n",
    "positive=pd.concat([pos,new_pos],axis=0)\n",
    "positive.shape\n",
    "\n",
    "negative=pd.concat([neg,new_neg],axis=0)\n",
    "negative.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>侻</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>俶傥</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>僄</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>劼</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>嫕</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  review  weight\n",
       "0     侻        1\n",
       "1    俶傥        1\n",
       "2     僄        1\n",
       "3     劼        1\n",
       "4     嫕        1"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "positive.columns=['review']\n",
    "positive['weight']=pd.Series([1]*len(positive))\n",
    "positive.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>僄</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>啰啰唆唆</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>啰啰嗦嗦</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>啰里啰唆</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>啰里啰嗦</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  review  weight\n",
       "0     僄       -1\n",
       "1  啰啰唆唆       -1\n",
       "2  啰啰嗦嗦       -1\n",
       "3  啰里啰唆       -1\n",
       "4  啰里啰嗦       -1"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative.columns=['review']\n",
    "negative['weight']=pd.Series([-1]*len(negative))\n",
    "negative.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8967, 2)"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pos_neg=pd.concat([positive,negative],axis=0)\n",
    "pos_neg.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(3)合并到review_long_clean中"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25172, 7)"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index_content</th>\n",
       "      <th>word</th>\n",
       "      <th>nature</th>\n",
       "      <th>content_type</th>\n",
       "      <th>index_word</th>\n",
       "      <th>weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>东西</td>\n",
       "      <td>ns</td>\n",
       "      <td>pos</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>收到</td>\n",
       "      <td>v</td>\n",
       "      <td>pos</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>这么久</td>\n",
       "      <td>r</td>\n",
       "      <td>pos</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>忘</td>\n",
       "      <td>v</td>\n",
       "      <td>pos</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>好评</td>\n",
       "      <td>v</td>\n",
       "      <td>pos</td>\n",
       "      <td>5</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index_content word nature content_type  index_word  weight\n",
       "0              1   东西     ns          pos           1     0.0\n",
       "1              1   收到      v          pos           2     0.0\n",
       "2              1  这么久      r          pos           3     0.0\n",
       "3              1    忘      v          pos           4     0.0\n",
       "4              1   好评      v          pos           5     1.0"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#表联接\n",
    "\n",
    "data=review_long_clean.copy()\n",
    "review_mltype=pd.merge(data,pos_neg,how='left',left_on='word',right_on='review')\n",
    "review_mltype.shape\n",
    "\n",
    "review_mltype=review_mltype.drop(['review'],axis=1)\n",
    "review_mltype=review_mltype.replace(np.nan,0)\n",
    "review_mltype.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(4)修正情感倾向，\n",
    "\n",
    "如有多重否定，那么奇数否定是否定，偶数否定是肯定\n",
    "\n",
    "看该情感词前2个词，来判罚否定的语气。如果在句首，则没有否词，如果在句子的第二次词，则看前1个词，来判断否定的语气。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(21, 1)"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>term</th>\n",
       "      <th>freq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>不</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>没</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>无</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>非</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>莫</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  term  freq\n",
       "0    不     1\n",
       "1    没     1\n",
       "2    无     1\n",
       "3    非     1\n",
       "4    莫     1"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "notdict=pd.read_csv('./not.csv')\n",
    "notdict.shape\n",
    "\n",
    "notdict['freq']=[1]*len(notdict)\n",
    "notdict.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index_content</th>\n",
       "      <th>word</th>\n",
       "      <th>nature</th>\n",
       "      <th>content_type</th>\n",
       "      <th>index_word</th>\n",
       "      <th>weight</th>\n",
       "      <th>amend_weight</th>\n",
       "      <th>id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>东西</td>\n",
       "      <td>ns</td>\n",
       "      <td>pos</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>收到</td>\n",
       "      <td>v</td>\n",
       "      <td>pos</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>这么久</td>\n",
       "      <td>r</td>\n",
       "      <td>pos</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>忘</td>\n",
       "      <td>v</td>\n",
       "      <td>pos</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>好评</td>\n",
       "      <td>v</td>\n",
       "      <td>pos</td>\n",
       "      <td>5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index_content word nature content_type  index_word  weight  amend_weight  \\\n",
       "0              1   东西     ns          pos           1     0.0           0.0   \n",
       "1              1   收到      v          pos           2     0.0           0.0   \n",
       "2              1  这么久      r          pos           3     0.0           0.0   \n",
       "3              1    忘      v          pos           4     0.0           0.0   \n",
       "4              1   好评      v          pos           5     1.0           1.0   \n",
       "\n",
       "   id  \n",
       "0   0  \n",
       "1   1  \n",
       "2   2  \n",
       "3   3  \n",
       "4   4  "
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#准备一\n",
    "review_mltype['amend_weight']=review_mltype['weight']\n",
    "review_mltype['id']=np.arange(0,review_mltype.shape[0])\n",
    "review_mltype.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1526, 8)"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index_content</th>\n",
       "      <th>word</th>\n",
       "      <th>nature</th>\n",
       "      <th>content_type</th>\n",
       "      <th>index_word</th>\n",
       "      <th>weight</th>\n",
       "      <th>amend_weight</th>\n",
       "      <th>id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>好评</td>\n",
       "      <td>v</td>\n",
       "      <td>pos</td>\n",
       "      <td>5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>值得</td>\n",
       "      <td>v</td>\n",
       "      <td>pos</td>\n",
       "      <td>7</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>信赖</td>\n",
       "      <td>n</td>\n",
       "      <td>pos</td>\n",
       "      <td>8</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>值得</td>\n",
       "      <td>v</td>\n",
       "      <td>pos</td>\n",
       "      <td>13</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>感谢</td>\n",
       "      <td>v</td>\n",
       "      <td>pos</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index_content word nature content_type  index_word  weight  amend_weight  \\\n",
       "0              1   好评      v          pos           5     1.0           1.0   \n",
       "1              1   值得      v          pos           7     1.0           1.0   \n",
       "2              1   信赖      n          pos           8     1.0           1.0   \n",
       "3              1   值得      v          pos          13     1.0           1.0   \n",
       "4              2   感谢      v          pos           4     1.0           1.0   \n",
       "\n",
       "   id  \n",
       "0   4  \n",
       "1   6  \n",
       "2   7  \n",
       "3  12  \n",
       "4  17  "
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 准备二，只保留有情感值的行\n",
    "\n",
    "only_review_mltype=review_mltype[review_mltype['weight']!=0]\n",
    "only_review_mltype.index=np.arange(0,only_review_mltype.shape[0]) #索引重置\n",
    "only_review_mltype.shape\n",
    "only_review_mltype.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index_content</th>\n",
       "      <th>word</th>\n",
       "      <th>nature</th>\n",
       "      <th>content_type</th>\n",
       "      <th>index_word</th>\n",
       "      <th>weight</th>\n",
       "      <th>amend_weight</th>\n",
       "      <th>id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>安装</td>\n",
       "      <td>v</td>\n",
       "      <td>pos</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>师傅</td>\n",
       "      <td>nr</td>\n",
       "      <td>pos</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>2</td>\n",
       "      <td>力</td>\n",
       "      <td>n</td>\n",
       "      <td>pos</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17</td>\n",
       "      <td>2</td>\n",
       "      <td>感谢</td>\n",
       "      <td>v</td>\n",
       "      <td>pos</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    index_content word nature content_type  index_word  weight  amend_weight  \\\n",
       "14              2   安装      v          pos           1     0.0           0.0   \n",
       "15              2   师傅     nr          pos           2     0.0           0.0   \n",
       "16              2    力      n          pos           3     0.0           0.0   \n",
       "17              2   感谢      v          pos           4     1.0           1.0   \n",
       "\n",
       "    id  \n",
       "14  14  \n",
       "15  15  \n",
       "16  16  \n",
       "17  17  "
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "i=4\n",
    "review_i=review_mltype[review_mltype['index_content']==only_review_mltype['index_content'][i]]\n",
    "review_i#第i个情感词的评论"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "#看该情感词前2个词，来判罚否定的语气。如果在句首，则没有否词，如果在句子的第二次词，则看前1个词，来判断否定的语气。\n",
    "\n",
    "index=only_review_mltype['id']\n",
    "\n",
    "for i in range(0,only_review_mltype.shape[0]):\n",
    "    \n",
    "    review_i=review_mltype[review_mltype['index_content']==only_review_mltype['index_content'][i]] #第i个情感词的评论\n",
    "    review_i.index=np.arange(0,review_i.shape[0])#重置索引后，索引值等价于index_word\n",
    "    word_ind = only_review_mltype['index_word'][i] #第i个情感值在该条评论的位置\n",
    "    \n",
    "    #第一种，在句首。则不用判断\n",
    "    #第二种，在评论的第2个为位置\n",
    "    if word_ind==2:\n",
    "        ne=sum( [ review_i['word'][word_ind-1] in notdict['term']  ] )\n",
    "        if ne==1:\n",
    "            review_mltype['amend_weight'][index[i]] = -( review_mltype['weight'][index[i]] )\n",
    "    #第三种，在评论的第2个位置以后       \n",
    "    elif word_ind > 2:\n",
    "        ne=sum( [ word in notdict['term'] for word in review_i['word'][[word_ind-1,word_ind-2]]  ] ) # 注意用中括号[word_ind-1,word_ind-2]\n",
    "        if ne==1:\n",
    "            review_mltype['amend_weight'][index[i]]=- ( review_mltype['weight'][index[i]] )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25172, 8)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index_content</th>\n",
       "      <th>word</th>\n",
       "      <th>nature</th>\n",
       "      <th>content_type</th>\n",
       "      <th>index_word</th>\n",
       "      <th>weight</th>\n",
       "      <th>amend_weight</th>\n",
       "      <th>id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [index_content, word, nature, content_type, index_word, weight, amend_weight, id]\n",
       "Index: []"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "review_mltype.shape\n",
    "review_mltype[(review_mltype['weight']-review_mltype['amend_weight'])!=0] #说明两列值一样"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(5)计算每条评论的情感值"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index_content</th>\n",
       "      <th>word</th>\n",
       "      <th>nature</th>\n",
       "      <th>content_type</th>\n",
       "      <th>index_word</th>\n",
       "      <th>weight</th>\n",
       "      <th>amend_weight</th>\n",
       "      <th>id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>25167</td>\n",
       "      <td>1999</td>\n",
       "      <td>差</td>\n",
       "      <td>a</td>\n",
       "      <td>neg</td>\n",
       "      <td>10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25168</td>\n",
       "      <td>2000</td>\n",
       "      <td>两个</td>\n",
       "      <td>m</td>\n",
       "      <td>neg</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25169</td>\n",
       "      <td>2000</td>\n",
       "      <td>送到</td>\n",
       "      <td>v</td>\n",
       "      <td>neg</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25170</td>\n",
       "      <td>2000</td>\n",
       "      <td>未</td>\n",
       "      <td>d</td>\n",
       "      <td>neg</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25171</td>\n",
       "      <td>2000</td>\n",
       "      <td>送到</td>\n",
       "      <td>v</td>\n",
       "      <td>neg</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25171</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       index_content word nature content_type  index_word  weight  \\\n",
       "25167           1999    差      a          neg          10     0.0   \n",
       "25168           2000   两个      m          neg           1     0.0   \n",
       "25169           2000   送到      v          neg           2     0.0   \n",
       "25170           2000    未      d          neg           3     0.0   \n",
       "25171           2000   送到      v          neg           4     0.0   \n",
       "\n",
       "       amend_weight     id  \n",
       "25167           0.0  25167  \n",
       "25168           0.0  25168  \n",
       "25169           0.0  25169  \n",
       "25170           0.0  25170  \n",
       "25171           0.0  25171  "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "review_mltype.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index_content</th>\n",
       "      <th>amend_weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index_content  amend_weight\n",
       "0              1           4.0\n",
       "1              2           1.0\n",
       "2              3           1.0\n",
       "3              4           4.0\n",
       "4              5           1.0"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emotion_value=review_mltype.groupby('index_content',as_index=False)['amend_weight'].sum()\n",
    "emotion_value.head()\n",
    "emotion_value.to_csv('./1_emotion_value',index=True,header=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(6)查看情感分析效果"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1964, 2)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  import sys\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(938, 3)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index_content</th>\n",
       "      <th>amend_weight</th>\n",
       "      <th>ml_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4.0</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4.0</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index_content  amend_weight ml_type\n",
       "0              1           4.0     pos\n",
       "1              2           1.0     pos\n",
       "2              3           1.0     pos\n",
       "3              4           4.0     pos\n",
       "4              5           1.0     pos"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#每条评论的amend_weight总和不等于零\n",
    "\n",
    "content_emotion_value=emotion_value.copy()\n",
    "content_emotion_value.shape\n",
    "content_emotion_value=content_emotion_value[content_emotion_value['amend_weight']!=0]\n",
    "content_emotion_value['ml_type']=''\n",
    "content_emotion_value['ml_type'][content_emotion_value['amend_weight']>0]='pos'\n",
    "content_emotion_value['ml_type'][content_emotion_value['amend_weight']<0]='neg'\n",
    "\n",
    "content_emotion_value.shape\n",
    "content_emotion_value.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index_content</th>\n",
       "      <th>amend_weight</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>8</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>14</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    index_content  amend_weight\n",
       "6               7           0.0\n",
       "7               8           0.0\n",
       "8               9           0.0\n",
       "11             12           0.0\n",
       "13             14           0.0"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "'价格合理，配置挺高，物美价值'"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "'老师按装是快的，装修中。没试。希望是正常的！'"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "'五分是习惯\\r\\n送的快，装的也快，很好，不过装修进行中，为了吊顶只装了热水器，其它后话吧。\\r\\n我也是醉了，热水器遥控器没电池，还是安装哥车里有一个备用的给装上了。\\r\\n要赠送的电动牙刷，空气净化器等待配送中&hellip;&hellip;。\\r\\n一天时间冰箱降100、洗衣机降40、热水器降100、小厨宝降30、烟灶套降100。不过客服说上报解决，电话通知等待中&hellip;&hellip;'"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#每条评论的amend_weight总和等于零\n",
    "#这个方法其实不好用，有一半以上的评论区分不出正、负情感。\n",
    "\n",
    "content_emotion_value0=emotion_value.copy()\n",
    "content_emotion_value0=content_emotion_value0[content_emotion_value0['amend_weight']==0]\n",
    "content_emotion_value0.head()\n",
    "\n",
    "raw_data.content[6]\n",
    "raw_data.content[7]\n",
    "raw_data.content[8]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25172, 8)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(25172, 8)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index_content</th>\n",
       "      <th>word</th>\n",
       "      <th>nature</th>\n",
       "      <th>content_type</th>\n",
       "      <th>index_word</th>\n",
       "      <th>weight</th>\n",
       "      <th>amend_weight</th>\n",
       "      <th>ml_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>东西</td>\n",
       "      <td>ns</td>\n",
       "      <td>pos</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>收到</td>\n",
       "      <td>v</td>\n",
       "      <td>pos</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>这么久</td>\n",
       "      <td>r</td>\n",
       "      <td>pos</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>忘</td>\n",
       "      <td>v</td>\n",
       "      <td>pos</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>好评</td>\n",
       "      <td>v</td>\n",
       "      <td>pos</td>\n",
       "      <td>5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index_content word nature content_type  index_word  weight  amend_weight  \\\n",
       "0              1   东西     ns          pos           1     0.0           0.0   \n",
       "1              1   收到      v          pos           2     0.0           0.0   \n",
       "2              1  这么久      r          pos           3     0.0           0.0   \n",
       "3              1    忘      v          pos           4     0.0           0.0   \n",
       "4              1   好评      v          pos           5     1.0           1.0   \n",
       "\n",
       "  ml_type  \n",
       "0     pos  \n",
       "1     pos  \n",
       "2     pos  \n",
       "3     pos  \n",
       "4     pos  "
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#合并到大表中\n",
    "\n",
    "content_emotion_value=content_emotion_value.drop(['amend_weight'],axis=1)\n",
    "review_mltype.shape\n",
    "review_mltype=pd.merge(review_mltype,content_emotion_value,how='left',left_on='index_content',right_on='index_content')\n",
    "review_mltype=review_mltype.drop(['id'],axis=1)\n",
    "review_mltype.shape\n",
    "review_mltype.head()\n",
    "\n",
    "review_mltype.to_csv('./1_review_mltype',index=True,header=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>ml_type</th>\n",
       "      <th>neg</th>\n",
       "      <th>pos</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>content_type</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>neg</td>\n",
       "      <td>379</td>\n",
       "      <td>58</td>\n",
       "      <td>437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>pos</td>\n",
       "      <td>41</td>\n",
       "      <td>460</td>\n",
       "      <td>501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>All</td>\n",
       "      <td>420</td>\n",
       "      <td>518</td>\n",
       "      <td>938</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "ml_type       neg  pos  All\n",
       "content_type               \n",
       "neg           379   58  437\n",
       "pos            41  460  501\n",
       "All           420  518  938"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cate=['index_content','content_type','ml_type']\n",
    "data_type=review_mltype[cate].drop_duplicates()\n",
    "\n",
    "confusion_matrix=pd.crosstab(data_type['content_type'],data_type['ml_type'],margins=True)\n",
    "confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "         neg       0.90      0.87      0.88       437\n",
      "         pos       0.89      0.92      0.90       501\n",
      "\n",
      "    accuracy                           0.89       938\n",
      "   macro avg       0.90      0.89      0.89       938\n",
      "weighted avg       0.89      0.89      0.89       938\n",
      "\n"
     ]
    }
   ],
   "source": [
    "data=data_type[['content_type','ml_type']]\n",
    "data=data.dropna(axis=0)\n",
    "print( classification_report(data['content_type'],data['ml_type']) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(7)制作词云图"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 只看情感词"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "data=review_mltype.copy()\n",
    "data=data[data['amend_weight']!=0]\n",
    "\n",
    "word_data_pos=data[data['ml_type']=='pos']\n",
    "word_data_neg=data[data['ml_type']=='neg']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<wordcloud.wordcloud.WordCloud at 0x1c42b326108>"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1080x504 with 0 Axes>"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1c429f26208>"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(-0.5, 525.5, 253.5, -0.5)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1080x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "font=r\"C:\\Windows\\Fonts\\msyh.ttc\"\n",
    "\n",
    "background_image=plt.imread('./p5smile.jpg')\n",
    "wordcloud = WordCloud(font_path=font, max_words = 100, mode='RGBA' ,background_color='white',mask=background_image) #width=1600,height=1200\n",
    "wordcloud.generate_from_frequencies(Counter(word_data_pos.word.values))\n",
    "\n",
    "plt.figure(figsize=(15,7))\n",
    "plt.imshow(wordcloud)\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<wordcloud.wordcloud.WordCloud at 0x1c42b316788>"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1080x504 with 0 Axes>"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1c429e00108>"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(-0.5, 525.5, 253.5, -0.5)"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
       "<Figure size 1080x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "font=r\"C:\\Windows\\Fonts\\msyh.ttc\"\n",
    "\n",
    "background_image=plt.imread('./p6sad.jpg')\n",
    "wordcloud = WordCloud(font_path=font, max_words = 100, mode='RGBA' ,background_color='white',mask=background_image) #width=1600,height=1200\n",
    "wordcloud.generate_from_frequencies(Counter(word_data_neg.word.values))\n",
    "\n",
    "plt.figure(figsize=(15,7))\n",
    "plt.imshow(wordcloud)\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 看所有词"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<wordcloud.wordcloud.WordCloud at 0x1c42b31f888>"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1080x504 with 0 Axes>"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1c429e57708>"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(-0.5, 525.5, 253.5, -0.5)"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1080x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<wordcloud.wordcloud.WordCloud at 0x1c429e75d48>"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1080x504 with 0 Axes>"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1c429eb4b48>"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(-0.5, 525.5, 253.5, -0.5)"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1080x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data=review_mltype.copy()\n",
    "\n",
    "word_data_pos=data[data['ml_type']=='pos']\n",
    "word_data_neg=data[data['ml_type']=='neg']\n",
    "\n",
    "font=r\"C:\\Windows\\Fonts\\msyh.ttc\"\n",
    "\n",
    "background_image=plt.imread('./p5smile.jpg')\n",
    "wordcloud = WordCloud(font_path=font, max_words = 100, mode='RGBA' ,background_color='white',mask=background_image) #width=1600,height=1200\n",
    "wordcloud.generate_from_frequencies(Counter(word_data_pos.word.values))\n",
    "\n",
    "plt.figure(figsize=(15,7))\n",
    "plt.imshow(wordcloud)\n",
    "plt.axis('off')\n",
    "plt.show()\n",
    "\n",
    "background_image=plt.imread('./p6sad.jpg')\n",
    "wordcloud = WordCloud(font_path=font, max_words = 100, mode='RGBA' ,background_color='white',mask=background_image) #width=1600,height=1200\n",
    "wordcloud.generate_from_frequencies(Counter(word_data_neg.word.values))\n",
    "\n",
    "plt.figure(figsize=(15,7))\n",
    "plt.imshow(wordcloud)\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### （三）基于LDA模型的主题分析\n",
    "\n",
    "优点：不需要人工调试，用相对少的迭代找到最优的主题结构。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "（1）建立词典、语料库"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'ml_type'",
     "output_type": "error",
     "traceback": [
     ]
    }
   ],
   "source": [
    "data=review_mltype.copy()\n",
    "\n",
    "word_data_pos=data[data['ml_type']=='pos']\n",
    "word_data_neg=data[data['ml_type']=='neg']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "#建立词典，去重\n",
    "\n",
    "pos_dict=corpora.Dictionary([ [i] for i in word_data_pos.word]) #shape=(n,1)\n",
    "neg_dict=corpora.Dictionary([ [i] for i in word_data_neg.word])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dictionary(1679 unique tokens: ['东西', '收到', '这么久', '忘', '好评']...)\n"
     ]
    }
   ],
   "source": [
    "print(pos_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "#建立语料库\n",
    "\n",
    "pos_corpus=[ pos_dict.doc2bow(j) for j in [ [i] for i in word_data_pos.word] ] #shape=(n,(2,1))\n",
    "neg_corpus=[ neg_dict.doc2bow(j) for j in [ [i] for i in word_data_neg.word] ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6737"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "1679"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "6737"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[[(0, 1)],\n",
       " [(1, 1)],\n",
       " [(2, 1)],\n",
       " [(3, 1)],\n",
       " [(4, 1)],\n",
       " [(5, 1)],\n",
       " [(6, 1)],\n",
       " [(7, 1)],\n",
       " [(0, 1)],\n",
       " [(8, 1)],\n",
       " [(9, 1)],\n",
       " [(10, 1)],\n",
       " [(6, 1)],\n",
       " [(11, 1)],\n",
       " [(12, 1)],\n",
       " [(13, 1)],\n",
       " [(14, 1)],\n",
       " [(15, 1)],\n",
       " [(12, 1)],\n",
       " [(16, 1)],\n",
       " [(1, 1)],\n",
       " [(17, 1)],\n",
       " [(18, 1)],\n",
       " [(19, 1)],\n",
       " [(20, 1)],\n",
       " [(21, 1)],\n",
       " [(22, 1)],\n",
       " [(12, 1)],\n",
       " [(23, 1)],\n",
       " [(24, 1)],\n",
       " [(25, 1)],\n",
       " [(26, 1)],\n",
       " [(27, 1)],\n",
       " [(28, 1)],\n",
       " [(17, 1)],\n",
       " [(6, 1)],\n",
       " [(7, 1)],\n",
       " [(6, 1)],\n",
       " [(29, 1)],\n",
       " [(17, 1)],\n",
       " [(30, 1)],\n",
       " [(31, 1)],\n",
       " [(32, 1)],\n",
       " [(16, 1)],\n",
       " [(33, 1)],\n",
       " [(34, 1)],\n",
       " [(35, 1)],\n",
       " [(36, 1)],\n",
       " [(37, 1)],\n",
       " [(38, 1)],\n",
       " [(39, 1)],\n",
       " [(40, 1)],\n",
       " [(41, 1)],\n",
       " [(42, 1)],\n",
       " [(43, 1)],\n",
       " [(44, 1)],\n",
       " [(12, 1)],\n",
       " [(45, 1)],\n",
       " [(46, 1)],\n",
       " [(47, 1)],\n",
       " [(48, 1)],\n",
       " [(49, 1)],\n",
       " [(50, 1)],\n",
       " [(51, 1)],\n",
       " [(38, 1)],\n",
       " [(52, 1)],\n",
       " [(33, 1)],\n",
       " [(20, 1)],\n",
       " [(53, 1)],\n",
       " [(10, 1)],\n",
       " [(38, 1)],\n",
       " [(12, 1)],\n",
       " [(54, 1)],\n",
       " [(55, 1)],\n",
       " [(56, 1)],\n",
       " [(57, 1)],\n",
       " [(58, 1)],\n",
       " [(12, 1)],\n",
       " [(57, 1)],\n",
       " [(59, 1)],\n",
       " [(12, 1)],\n",
       " [(10, 1)],\n",
       " [(60, 1)],\n",
       " [(61, 1)],\n",
       " [(28, 1)],\n",
       " [(62, 1)],\n",
       " [(63, 1)],\n",
       " [(64, 1)],\n",
       " [(54, 1)],\n",
       " [(65, 1)],\n",
       " [(66, 1)],\n",
       " [(67, 1)],\n",
       " [(68, 1)],\n",
       " [(69, 1)],\n",
       " [(5, 1)],\n",
       " [(70, 1)],\n",
       " [(71, 1)],\n",
       " [(72, 1)],\n",
       " [(73, 1)],\n",
       " [(74, 1)],\n",
       " [(74, 1)],\n",
       " [(75, 1)],\n",
       " [(76, 1)],\n",
       " [(77, 1)],\n",
       " [(12, 1)],\n",
       " [(13, 1)],\n",
       " [(78, 1)],\n",
       " [(33, 1)],\n",
       " [(79, 1)],\n",
       " [(71, 1)],\n",
       " [(16, 1)],\n",
       " [(80, 1)],\n",
       " [(81, 1)],\n",
       " [(82, 1)],\n",
       " [(83, 1)],\n",
       " [(84, 1)],\n",
       " [(85, 1)],\n",
       " [(86, 1)],\n",
       " [(87, 1)],\n",
       " [(12, 1)],\n",
       " [(88, 1)],\n",
       " [(16, 1)],\n",
       " [(89, 1)],\n",
       " [(90, 1)],\n",
       " [(91, 1)],\n",
       " [(12, 1)],\n",
       " [(92, 1)],\n",
       " [(93, 1)],\n",
       " [(94, 1)],\n",
       " [(37, 1)],\n",
       " [(95, 1)],\n",
       " [(12, 1)],\n",
       " [(20, 1)],\n",
       " [(79, 1)],\n",
       " [(96, 1)],\n",
       " [(97, 1)],\n",
       " [(98, 1)],\n",
       " [(10, 1)],\n",
       " [(99, 1)],\n",
       " [(100, 1)],\n",
       " [(101, 1)],\n",
       " [(102, 1)],\n",
       " [(3, 1)],\n",
       " [(103, 1)],\n",
       " [(25, 1)],\n",
       " [(10, 1)],\n",
       " [(12, 1)],\n",
       " [(104, 1)],\n",
       " [(105, 1)],\n",
       " [(6, 1)],\n",
       " [(7, 1)],\n",
       " [(106, 1)],\n",
       " [(107, 1)],\n",
       " [(10, 1)],\n",
       " [(64, 1)],\n",
       " [(108, 1)],\n",
       " [(109, 1)],\n",
       " [(110, 1)],\n",
       " [(28, 1)],\n",
       " [(111, 1)],\n",
       " [(4, 1)],\n",
       " [(106, 1)],\n",
       " [(10, 1)],\n",
       " [(25, 1)],\n",
       " [(5, 1)],\n",
       " [(66, 1)],\n",
       " [(112, 1)],\n",
       " [(113, 1)],\n",
       " [(114, 1)],\n",
       " [(115, 1)],\n",
       " [(70, 1)],\n",
       " [(10, 1)],\n",
       " [(116, 1)],\n",
       " [(117, 1)],\n",
       " [(118, 1)],\n",
       " [(119, 1)],\n",
       " [(120, 1)],\n",
       " [(121, 1)],\n",
       " [(65, 1)],\n",
       " [(122, 1)],\n",
       " [(65, 1)],\n",
       " [(123, 1)],\n",
       " [(124, 1)],\n",
       " [(12, 1)],\n",
       " [(20, 1)],\n",
       " [(125, 1)],\n",
       " [(126, 1)],\n",
       " [(126, 1)],\n",
       " [(38, 1)],\n",
       " [(127, 1)],\n",
       " [(12, 1)],\n",
       " [(13, 1)],\n",
       " [(38, 1)],\n",
       " [(105, 1)],\n",
       " [(128, 1)],\n",
       " [(129, 1)],\n",
       " [(130, 1)],\n",
       " [(12, 1)],\n",
       " [(131, 1)],\n",
       " [(132, 1)],\n",
       " [(133, 1)],\n",
       " [(134, 1)],\n",
       " [(135, 1)],\n",
       " [(4, 1)],\n",
       " [(136, 1)],\n",
       " [(137, 1)],\n",
       " [(138, 1)],\n",
       " [(139, 1)],\n",
       " [(140, 1)],\n",
       " [(0, 1)],\n",
       " [(10, 1)],\n",
       " [(89, 1)],\n",
       " [(141, 1)],\n",
       " [(142, 1)],\n",
       " [(33, 1)],\n",
       " [(79, 1)],\n",
       " [(143, 1)],\n",
       " [(144, 1)],\n",
       " [(145, 1)],\n",
       " [(146, 1)],\n",
       " [(147, 1)],\n",
       " [(148, 1)],\n",
       " [(149, 1)],\n",
       " [(150, 1)],\n",
       " [(151, 1)],\n",
       " [(12, 1)],\n",
       " [(86, 1)],\n",
       " [(152, 1)],\n",
       " [(153, 1)],\n",
       " [(154, 1)],\n",
       " [(122, 1)],\n",
       " [(155, 1)],\n",
       " [(13, 1)],\n",
       " [(12, 1)],\n",
       " [(13, 1)],\n",
       " [(156, 1)],\n",
       " [(10, 1)],\n",
       " [(157, 1)],\n",
       " [(158, 1)],\n",
       " [(159, 1)],\n",
       " [(160, 1)],\n",
       " [(161, 1)],\n",
       " [(162, 1)],\n",
       " [(134, 1)],\n",
       " [(135, 1)],\n",
       " [(66, 1)],\n",
       " [(95, 1)],\n",
       " [(163, 1)],\n",
       " [(64, 1)],\n",
       " [(111, 1)],\n",
       " [(164, 1)],\n",
       " [(165, 1)],\n",
       " [(166, 1)],\n",
       " [(46, 1)],\n",
       " [(167, 1)],\n",
       " [(168, 1)],\n",
       " [(169, 1)],\n",
       " [(170, 1)],\n",
       " [(171, 1)],\n",
       " [(172, 1)],\n",
       " [(173, 1)],\n",
       " [(10, 1)],\n",
       " [(4, 1)],\n",
       " [(16, 1)],\n",
       " [(46, 1)],\n",
       " [(174, 1)],\n",
       " [(175, 1)],\n",
       " [(176, 1)],\n",
       " [(177, 1)],\n",
       " [(178, 1)],\n",
       " [(12, 1)],\n",
       " [(179, 1)],\n",
       " [(180, 1)],\n",
       " [(12, 1)],\n",
       " [(104, 1)],\n",
       " [(181, 1)],\n",
       " [(182, 1)],\n",
       " [(107, 1)],\n",
       " [(183, 1)],\n",
       " [(184, 1)],\n",
       " [(185, 1)],\n",
       " [(12, 1)],\n",
       " [(104, 1)],\n",
       " [(186, 1)],\n",
       " [(158, 1)],\n",
       " [(187, 1)],\n",
       " [(188, 1)],\n",
       " [(4, 1)],\n",
       " [(70, 1)],\n",
       " [(189, 1)],\n",
       " [(190, 1)],\n",
       " [(191, 1)],\n",
       " [(16, 1)],\n",
       " [(192, 1)],\n",
       " [(25, 1)],\n",
       " [(193, 1)],\n",
       " [(194, 1)],\n",
       " [(19, 1)],\n",
       " [(20, 1)],\n",
       " [(195, 1)],\n",
       " [(196, 1)],\n",
       " [(197, 1)],\n",
       " [(198, 1)],\n",
       " [(199, 1)],\n",
       " [(94, 1)],\n",
       " [(200, 1)],\n",
       " [(20, 1)],\n",
       " [(79, 1)],\n",
       " [(16, 1)],\n",
       " [(71, 1)],\n",
       " [(1, 1)],\n",
       " [(12, 1)],\n",
       " [(201, 1)],\n",
       " [(70, 1)],\n",
       " [(10, 1)],\n",
       " [(202, 1)],\n",
       " [(94, 1)],\n",
       " [(203, 1)],\n",
       " [(204, 1)],\n",
       " [(117, 1)],\n",
       " [(16, 1)],\n",
       " [(205, 1)],\n",
       " [(173, 1)],\n",
       " [(107, 1)],\n",
       " [(10, 1)],\n",
       " [(34, 1)],\n",
       " [(206, 1)],\n",
       " [(207, 1)],\n",
       " [(208, 1)],\n",
       " [(209, 1)],\n",
       " [(6, 1)],\n",
       " [(29, 1)],\n",
       " [(20, 1)],\n",
       " [(210, 1)],\n",
       " [(211, 1)],\n",
       " [(65, 1)],\n",
       " [(212, 1)],\n",
       " [(213, 1)],\n",
       " [(214, 1)],\n",
       " [(215, 1)],\n",
       " [(216, 1)],\n",
       " [(150, 1)],\n",
       " [(217, 1)],\n",
       " [(218, 1)],\n",
       " [(219, 1)],\n",
       " [(220, 1)],\n",
       " [(221, 1)],\n",
       " [(12, 1)],\n",
       " [(28, 1)],\n",
       " [(79, 1)],\n",
       " [(222, 1)],\n",
       " [(223, 1)],\n",
       " [(12, 1)],\n",
       " [(13, 1)],\n",
       " [(12, 1)],\n",
       " [(224, 1)],\n",
       " [(225, 1)],\n",
       " [(225, 1)],\n",
       " [(226, 1)],\n",
       " [(112, 1)],\n",
       " [(227, 1)],\n",
       " [(25, 1)],\n",
       " [(0, 1)],\n",
       " [(99, 1)],\n",
       " [(99, 1)],\n",
       " [(38, 1)],\n",
       " [(228, 1)],\n",
       " [(5, 1)],\n",
       " [(229, 1)],\n",
       " [(230, 1)],\n",
       " [(25, 1)],\n",
       " [(231, 1)],\n",
       " [(12, 1)],\n",
       " [(39, 1)],\n",
       " [(40, 1)],\n",
       " [(73, 1)],\n",
       " [(89, 1)],\n",
       " [(232, 1)],\n",
       " [(233, 1)],\n",
       " [(234, 1)],\n",
       " [(235, 1)],\n",
       " [(236, 1)],\n",
       " [(170, 1)],\n",
       " [(12, 1)],\n",
       " [(13, 1)],\n",
       " [(79, 1)],\n",
       " [(237, 1)],\n",
       " [(156, 1)],\n",
       " [(238, 1)],\n",
       " [(239, 1)],\n",
       " [(86, 1)],\n",
       " [(163, 1)],\n",
       " [(159, 1)],\n",
       " [(240, 1)],\n",
       " [(241, 1)],\n",
       " [(242, 1)],\n",
       " [(196, 1)],\n",
       " [(243, 1)],\n",
       " [(244, 1)],\n",
       " [(23, 1)],\n",
       " [(245, 1)],\n",
       " [(234, 1)],\n",
       " [(246, 1)],\n",
       " [(247, 1)],\n",
       " [(5, 1)],\n",
       " [(248, 1)],\n",
       " [(249, 1)],\n",
       " [(250, 1)],\n",
       " [(16, 1)],\n",
       " [(42, 1)],\n",
       " [(13, 1)],\n",
       " [(251, 1)],\n",
       " [(61, 1)],\n",
       " [(12, 1)],\n",
       " [(13, 1)],\n",
       " [(10, 1)],\n",
       " [(252, 1)],\n",
       " [(64, 1)],\n",
       " [(210, 1)],\n",
       " [(253, 1)],\n",
       " [(79, 1)],\n",
       " [(254, 1)],\n",
       " [(255, 1)],\n",
       " [(121, 1)],\n",
       " [(12, 1)],\n",
       " [(256, 1)],\n",
       " [(6, 1)],\n",
       " [(29, 1)],\n",
       " [(257, 1)],\n",
       " [(258, 1)],\n",
       " [(259, 1)],\n",
       " [(260, 1)],\n",
       " [(261, 1)],\n",
       " [(262, 1)],\n",
       " [(263, 1)],\n",
       " [(264, 1)],\n",
       " [(265, 1)],\n",
       " [(143, 1)],\n",
       " [(266, 1)],\n",
       " [(263, 1)],\n",
       " [(267, 1)],\n",
       " [(34, 1)],\n",
       " [(268, 1)],\n",
       " [(269, 1)],\n",
       " [(148, 1)],\n",
       " [(270, 1)],\n",
       " [(271, 1)],\n",
       " [(272, 1)],\n",
       " [(273, 1)],\n",
       " [(274, 1)],\n",
       " [(12, 1)],\n",
       " [(13, 1)],\n",
       " [(275, 1)],\n",
       " [(276, 1)],\n",
       " [(48, 1)],\n",
       " [(277, 1)],\n",
       " [(278, 1)],\n",
       " [(279, 1)],\n",
       " [(280, 1)],\n",
       " [(281, 1)],\n",
       " [(233, 1)],\n",
       " [(282, 1)],\n",
       " [(283, 1)],\n",
       " [(5, 1)],\n",
       " [(6, 1)],\n",
       " [(7, 1)],\n",
       " [(284, 1)],\n",
       " [(285, 1)],\n",
       " [(32, 1)],\n",
       " [(19, 1)],\n",
       " [(20, 1)],\n",
       " [(79, 1)],\n",
       " [(286, 1)],\n",
       " [(124, 1)],\n",
       " [(12, 1)],\n",
       " [(12, 1)],\n",
       " [(104, 1)],\n",
       " [(287, 1)],\n",
       " [(288, 1)],\n",
       " [(289, 1)],\n",
       " [(185, 1)],\n",
       " [(223, 1)],\n",
       " [(6, 1)],\n",
       " [(7, 1)],\n",
       " [(33, 1)],\n",
       " [(290, 1)],\n",
       " [(291, 1)],\n",
       " [(292, 1)],\n",
       " [(139, 1)],\n",
       " [(293, 1)],\n",
       " [(71, 1)],\n",
       " [(294, 1)],\n",
       " [(254, 1)],\n",
       " [(295, 1)],\n",
       " [(296, 1)],\n",
       " [(71, 1)],\n",
       " [(204, 1)],\n",
       " [(14, 1)],\n",
       " [(71, 1)],\n",
       " [(204, 1)],\n",
       " [(14, 1)],\n",
       " [(297, 1)],\n",
       " [(42, 1)],\n",
       " [(137, 1)],\n",
       " [(298, 1)],\n",
       " [(299, 1)],\n",
       " [(24, 1)],\n",
       " [(300, 1)],\n",
       " [(150, 1)],\n",
       " [(104, 1)],\n",
       " [(301, 1)],\n",
       " [(243, 1)],\n",
       " [(302, 1)],\n",
       " [(12, 1)],\n",
       " [(12, 1)],\n",
       " [(13, 1)],\n",
       " [(303, 1)],\n",
       " [(304, 1)],\n",
       " [(12, 1)],\n",
       " [(305, 1)],\n",
       " [(276, 1)],\n",
       " [(306, 1)],\n",
       " [(95, 1)],\n",
       " [(292, 1)],\n",
       " [(307, 1)],\n",
       " [(241, 1)],\n",
       " [(95, 1)],\n",
       " [(16, 1)],\n",
       " [(71, 1)],\n",
       " [(49, 1)],\n",
       " [(308, 1)],\n",
       " [(5, 1)],\n",
       " [(6, 1)],\n",
       " [(7, 1)],\n",
       " [(309, 1)],\n",
       " [(310, 1)],\n",
       " [(311, 1)],\n",
       " [(46, 1)],\n",
       " [(38, 1)],\n",
       " [(312, 1)],\n",
       " [(12, 1)],\n",
       " [(104, 1)],\n",
       " [(128, 1)],\n",
       " [(313, 1)],\n",
       " [(314, 1)],\n",
       " [(315, 1)],\n",
       " [(316, 1)],\n",
       " [(317, 1)],\n",
       " [(16, 1)],\n",
       " [(71, 1)],\n",
       " [(50, 1)],\n",
       " [(17, 1)],\n",
       " [(18, 1)],\n",
       " [(11, 1)],\n",
       " [(318, 1)],\n",
       " [(319, 1)],\n",
       " [(320, 1)],\n",
       " [(321, 1)],\n",
       " [(322, 1)],\n",
       " [(50, 1)],\n",
       " [(42, 1)],\n",
       " [(144, 1)],\n",
       " [(323, 1)],\n",
       " [(324, 1)],\n",
       " [(325, 1)],\n",
       " [(50, 1)],\n",
       " [(7, 1)],\n",
       " [(17, 1)],\n",
       " [(326, 1)],\n",
       " [(286, 1)],\n",
       " [(327, 1)],\n",
       " [(328, 1)],\n",
       " [(148, 1)],\n",
       " [(10, 1)],\n",
       " [(42, 1)],\n",
       " [(12, 1)],\n",
       " [(10, 1)],\n",
       " [(329, 1)],\n",
       " [(16, 1)],\n",
       " [(326, 1)],\n",
       " [(286, 1)],\n",
       " [(327, 1)],\n",
       " [(328, 1)],\n",
       " [(148, 1)],\n",
       " [(10, 1)],\n",
       " [(330, 1)],\n",
       " [(89, 1)],\n",
       " [(331, 1)],\n",
       " [(332, 1)],\n",
       " [(13, 1)],\n",
       " [(12, 1)],\n",
       " [(94, 1)],\n",
       " [(10, 1)],\n",
       " [(5, 1)],\n",
       " [(333, 1)],\n",
       " [(20, 1)],\n",
       " [(79, 1)],\n",
       " [(5, 1)],\n",
       " [(6, 1)],\n",
       " [(7, 1)],\n",
       " [(334, 1)],\n",
       " [(50, 1)],\n",
       " [(33, 1)],\n",
       " [(20, 1)],\n",
       " [(335, 1)],\n",
       " [(113, 1)],\n",
       " [(42, 1)],\n",
       " [(12, 1)],\n",
       " [(12, 1)],\n",
       " [(13, 1)],\n",
       " [(147, 1)],\n",
       " [(186, 1)],\n",
       " [(336, 1)],\n",
       " [(13, 1)],\n",
       " [(337, 1)],\n",
       " [(338, 1)],\n",
       " [(339, 1)],\n",
       " [(192, 1)],\n",
       " [(16, 1)],\n",
       " [(340, 1)],\n",
       " [(188, 1)],\n",
       " [(10, 1)],\n",
       " [(341, 1)],\n",
       " [(342, 1)],\n",
       " [(343, 1)],\n",
       " [(344, 1)],\n",
       " [(345, 1)],\n",
       " [(89, 1)],\n",
       " [(140, 1)],\n",
       " [(223, 1)],\n",
       " [(346, 1)],\n",
       " [(6, 1)],\n",
       " [(347, 1)],\n",
       " [(89, 1)],\n",
       " [(223, 1)],\n",
       " [(348, 1)],\n",
       " [(349, 1)],\n",
       " [(228, 1)],\n",
       " [(1, 1)],\n",
       " [(350, 1)],\n",
       " [(107, 1)],\n",
       " [(326, 1)],\n",
       " [(351, 1)],\n",
       " [(352, 1)],\n",
       " [(109, 1)],\n",
       " [(353, 1)],\n",
       " [(142, 1)],\n",
       " [(10, 1)],\n",
       " [(16, 1)],\n",
       " [(71, 1)],\n",
       " [(354, 1)],\n",
       " [(4, 1)],\n",
       " [(1, 1)],\n",
       " [(257, 1)],\n",
       " [(355, 1)],\n",
       " [(185, 1)],\n",
       " [(356, 1)],\n",
       " [(357, 1)],\n",
       " [(286, 1)],\n",
       " [(12, 1)],\n",
       " [(79, 1)],\n",
       " [(358, 1)],\n",
       " [(359, 1)],\n",
       " [(13, 1)],\n",
       " [(360, 1)],\n",
       " [(361, 1)],\n",
       " [(12, 1)],\n",
       " [(362, 1)],\n",
       " [(363, 1)],\n",
       " [(5, 1)],\n",
       " [(6, 1)],\n",
       " [(7, 1)],\n",
       " [(0, 1)],\n",
       " [(10, 1)],\n",
       " [(70, 1)],\n",
       " [(364, 1)],\n",
       " [(365, 1)],\n",
       " [(257, 1)],\n",
       " [(262, 1)],\n",
       " [(366, 1)],\n",
       " [(230, 1)],\n",
       " [(25, 1)],\n",
       " [(367, 1)],\n",
       " [(368, 1)],\n",
       " [(254, 1)],\n",
       " [(198, 1)],\n",
       " [(13, 1)],\n",
       " [(369, 1)],\n",
       " [(5, 1)],\n",
       " [(370, 1)],\n",
       " [(198, 1)],\n",
       " [(12, 1)],\n",
       " [(112, 1)],\n",
       " [(371, 1)],\n",
       " [(286, 1)],\n",
       " [(12, 1)],\n",
       " [(12, 1)],\n",
       " [(48, 1)],\n",
       " [(10, 1)],\n",
       " [(86, 1)],\n",
       " [(363, 1)],\n",
       " [(224, 1)],\n",
       " [(372, 1)],\n",
       " [(373, 1)],\n",
       " [(374, 1)],\n",
       " [(375, 1)],\n",
       " [(281, 1)],\n",
       " [(70, 1)],\n",
       " [(10, 1)],\n",
       " [(5, 1)],\n",
       " [(6, 1)],\n",
       " [(7, 1)],\n",
       " [(12, 1)],\n",
       " [(13, 1)],\n",
       " [(105, 1)],\n",
       " [(376, 1)],\n",
       " [(364, 1)],\n",
       " [(25, 1)],\n",
       " [(6, 1)],\n",
       " [(377, 1)],\n",
       " [(48, 1)],\n",
       " [(378, 1)],\n",
       " [(379, 1)],\n",
       " [(380, 1)],\n",
       " [(5, 1)],\n",
       " [(6, 1)],\n",
       " [(7, 1)],\n",
       " [(42, 1)],\n",
       " [(381, 1)],\n",
       " [(65, 1)],\n",
       " [(121, 1)],\n",
       " [(359, 1)],\n",
       " [(382, 1)],\n",
       " [(1, 1)],\n",
       " [(383, 1)],\n",
       " [(257, 1)],\n",
       " [(384, 1)],\n",
       " [(257, 1)],\n",
       " [(10, 1)],\n",
       " [(146, 1)],\n",
       " [(385, 1)],\n",
       " [(386, 1)],\n",
       " [(10, 1)],\n",
       " [(64, 1)],\n",
       " [(387, 1)],\n",
       " [(388, 1)],\n",
       " [(173, 1)],\n",
       " [(16, 1)],\n",
       " [(10, 1)],\n",
       " [(389, 1)],\n",
       " [(390, 1)],\n",
       " [(382, 1)],\n",
       " [(13, 1)],\n",
       " [(12, 1)],\n",
       " [(33, 1)],\n",
       " [(79, 1)],\n",
       " [(12, 1)],\n",
       " [(391, 1)],\n",
       " [(42, 1)],\n",
       " [(12, 1)],\n",
       " [(361, 1)],\n",
       " [(224, 1)],\n",
       " [(95, 1)],\n",
       " [(50, 1)],\n",
       " [(224, 1)],\n",
       " [(392, 1)],\n",
       " [(224, 1)],\n",
       " [(393, 1)],\n",
       " [(133, 1)],\n",
       " [(394, 1)],\n",
       " [(43, 1)],\n",
       " [(395, 1)],\n",
       " [(12, 1)],\n",
       " [(13, 1)],\n",
       " [(156, 1)],\n",
       " [(65, 1)],\n",
       " [(66, 1)],\n",
       " [(396, 1)],\n",
       " [(397, 1)],\n",
       " [(7, 1)],\n",
       " [(76, 1)],\n",
       " [(46, 1)],\n",
       " [(13, 1)],\n",
       " [(342, 1)],\n",
       " [(398, 1)],\n",
       " [(399, 1)],\n",
       " [(72, 1)],\n",
       " [(68, 1)],\n",
       " [(198, 1)],\n",
       " [(12, 1)],\n",
       " [(48, 1)],\n",
       " [(400, 1)],\n",
       " [(401, 1)],\n",
       " [(402, 1)],\n",
       " [(70, 1)],\n",
       " [(403, 1)],\n",
       " [(118, 1)],\n",
       " [(118, 1)],\n",
       " [(72, 1)],\n",
       " [(249, 1)],\n",
       " [(404, 1)],\n",
       " [(405, 1)],\n",
       " [(31, 1)],\n",
       " [(12, 1)],\n",
       " [(13, 1)],\n",
       " [(174, 1)],\n",
       " [(70, 1)],\n",
       " [(10, 1)],\n",
       " [(406, 1)],\n",
       " [(178, 1)],\n",
       " [(12, 1)],\n",
       " [(13, 1)],\n",
       " [(407, 1)],\n",
       " [(180, 1)],\n",
       " [(46, 1)],\n",
       " [(10, 1)],\n",
       " [(81, 1)],\n",
       " [(408, 1)],\n",
       " [(354, 1)],\n",
       " [(4, 1)],\n",
       " [(409, 1)],\n",
       " [(10, 1)],\n",
       " [(64, 1)],\n",
       " [(410, 1)],\n",
       " [(411, 1)],\n",
       " [(412, 1)],\n",
       " [(142, 1)],\n",
       " [(413, 1)],\n",
       " [(31, 1)],\n",
       " [(376, 1)],\n",
       " [(357, 1)],\n",
       " [(414, 1)],\n",
       " [(223, 1)],\n",
       " [(66, 1)],\n",
       " [(204, 1)],\n",
       " [(14, 1)],\n",
       " [(1, 1)],\n",
       " [(24, 1)],\n",
       " [(415, 1)],\n",
       " [(70, 1)],\n",
       " [(10, 1)],\n",
       " [(416, 1)],\n",
       " [(12, 1)],\n",
       " [(46, 1)],\n",
       " [(40, 1)],\n",
       " [(417, 1)],\n",
       " [(107, 1)],\n",
       " [(16, 1)],\n",
       " [(49, 1)],\n",
       " [(418, 1)],\n",
       " [(76, 1)],\n",
       " [(76, 1)],\n",
       " [(419, 1)],\n",
       " [(5, 1)],\n",
       " [(6, 1)],\n",
       " [(7, 1)],\n",
       " [(256, 1)],\n",
       " [(420, 1)],\n",
       " [(421, 1)],\n",
       " [(37, 1)],\n",
       " [(422, 1)],\n",
       " [(156, 1)],\n",
       " [(38, 1)],\n",
       " [(423, 1)],\n",
       " [(20, 1)],\n",
       " [(254, 1)],\n",
       " [(185, 1)],\n",
       " [(198, 1)],\n",
       " [(12, 1)],\n",
       " [(79, 1)],\n",
       " [(424, 1)],\n",
       " [(425, 1)],\n",
       " [(20, 1)],\n",
       " [(66, 1)],\n",
       " [(19, 1)],\n",
       " [(195, 1)],\n",
       " [(426, 1)],\n",
       " [(89, 1)],\n",
       " [(141, 1)],\n",
       " [(150, 1)],\n",
       " [(156, 1)],\n",
       " [(1, 1)],\n",
       " [(427, 1)],\n",
       " [(428, 1)],\n",
       " [(415, 1)],\n",
       " [(266, 1)],\n",
       " [(429, 1)],\n",
       " [(195, 1)],\n",
       " [(430, 1)],\n",
       " [(431, 1)],\n",
       " [(398, 1)],\n",
       " [(70, 1)],\n",
       " [(432, 1)],\n",
       " [(433, 1)],\n",
       " [(106, 1)],\n",
       " [(10, 1)],\n",
       " [(434, 1)],\n",
       " [(192, 1)],\n",
       " [(25, 1)],\n",
       " [(256, 1)],\n",
       " [(254, 1)],\n",
       " [(185, 1)],\n",
       " [(435, 1)],\n",
       " [(192, 1)],\n",
       " [(436, 1)],\n",
       " [(192, 1)],\n",
       " [(6, 1)],\n",
       " [(50, 1)],\n",
       " [(195, 1)],\n",
       " [(437, 1)],\n",
       " [(438, 1)],\n",
       " [(46, 1)],\n",
       " [(14, 1)],\n",
       " [(94, 1)],\n",
       " [(38, 1)],\n",
       " [(19, 1)],\n",
       " [(20, 1)],\n",
       " [(150, 1)],\n",
       " [(38, 1)],\n",
       " [(369, 1)],\n",
       " [(198, 1)],\n",
       " [(431, 1)],\n",
       " [(4, 1)],\n",
       " [(4, 1)],\n",
       " [(25, 1)],\n",
       " [(106, 1)],\n",
       " [(380, 1)],\n",
       " [(438, 1)],\n",
       " [(150, 1)],\n",
       " [(46, 1)],\n",
       " [(104, 1)],\n",
       " [(315, 1)],\n",
       " [(439, 1)],\n",
       " [(439, 1)],\n",
       " [(156, 1)],\n",
       " [(19, 1)],\n",
       " [(204, 1)],\n",
       " [(122, 1)],\n",
       " [(79, 1)],\n",
       " [(120, 1)],\n",
       " [(141, 1)],\n",
       " [(438, 1)],\n",
       " [(275, 1)],\n",
       " [(440, 1)],\n",
       " [(441, 1)],\n",
       " [(66, 1)],\n",
       " [(204, 1)],\n",
       " [(442, 1)],\n",
       " [(156, 1)],\n",
       " [(431, 1)],\n",
       " [(398, 1)],\n",
       " [(443, 1)],\n",
       " [(444, 1)],\n",
       " [(252, 1)],\n",
       " [(121, 1)],\n",
       " [(42, 1)],\n",
       " [(204, 1)],\n",
       " [(445, 1)],\n",
       " [(446, 1)],\n",
       " [(44, 1)],\n",
       " [(126, 1)],\n",
       " [(61, 1)],\n",
       " [(447, 1)],\n",
       " [(204, 1)],\n",
       " [(445, 1)],\n",
       " [(12, 1)],\n",
       " [(355, 1)],\n",
       " [(188, 1)],\n",
       " [(0, 1)],\n",
       " [(14, 1)],\n",
       " [(448, 1)],\n",
       " [(449, 1)],\n",
       " [(450, 1)],\n",
       " [(451, 1)],\n",
       " [(28, 1)],\n",
       " [(16, 1)],\n",
       " [(48, 1)],\n",
       " [(10, 1)],\n",
       " [(12, 1)],\n",
       " [(13, 1)],\n",
       " [(452, 1)],\n",
       " [(453, 1)],\n",
       " [(452, 1)],\n",
       " [(454, 1)],\n",
       " [(455, 1)],\n",
       " [(456, 1)],\n",
       " [(86, 1)],\n",
       " [(198, 1)],\n",
       " [(20, 1)],\n",
       " [(6, 1)],\n",
       " [(7, 1)],\n",
       " [(12, 1)],\n",
       " [(12, 1)],\n",
       " [(13, 1)],\n",
       " [(124, 1)],\n",
       " [(12, 1)],\n",
       " [(457, 1)],\n",
       " [(280, 1)],\n",
       " [(458, 1)],\n",
       " [(459, 1)],\n",
       " ...]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(word_data_pos.word)\n",
    "len(pos_dict)\n",
    "len(pos_corpus)\n",
    "pos_corpus  #元素是元组，元组（x,y),x是在词典中的位置，y是1表示存在。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(2)主题数寻优\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "#构造主题数寻优函数\n",
    "\n",
    "def cos(vector1,vector2):\n",
    "    '''\n",
    "    函数功能：余玄相似度函数\n",
    "    '''\n",
    "    dot_product=0.0\n",
    "    normA=0.0\n",
    "    normB=0.0\n",
    "    for a,b in zip(vector1,vector2):\n",
    "        dot_product +=a*b\n",
    "        normA +=a**2\n",
    "        normB +=b**2\n",
    "    if normA==0.0 or normB==0.0:\n",
    "        return None\n",
    "    else:\n",
    "        return ( dot_product/((normA*normB)**0.5) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "#主题数寻优\n",
    "#这个函数可以重复调用，解决其他项目的问题\n",
    "\n",
    "def LDA_k(x_corpus,x_dict):\n",
    "    '''\n",
    "    函数功能：\n",
    "    '''\n",
    "    #初始化平均余玄相似度\n",
    "    mean_similarity=[]\n",
    "    mean_similarity.append(1)\n",
    "    \n",
    "    #循环生成主题并计算主题间相似度\n",
    "    for i in np.arange(2,11):\n",
    "        lda=models.LdaModel(x_corpus,num_topics=i,id2word=x_dict) #LDA模型训练\n",
    "        \n",
    "        for j in np.arange(i):\n",
    "            term=lda.show_topics(num_words=50)\n",
    "        \n",
    "        #提取各主题词\n",
    "        top_word=[] #shape=(i,50)\n",
    "        for k in np.arange(i):\n",
    "            top_word.append( [''.join(re.findall('\"(.*)\"',i)) for i in term[k][1].split('+')]) #列出所有词\n",
    "        \n",
    "        #构造词频向量\n",
    "        word=sum(top_word,[]) #列车所有词\n",
    "        unique_word=set(word) #去重\n",
    "        \n",
    "        #构造主题词列表，行表示主题号，列表示各主题词\n",
    "        mat=[] #shape=(i,len(unique_word))\n",
    "        for j in np.arange(i):\n",
    "            top_w=top_word[j]\n",
    "            mat.append( tuple([ top_w.count(k) for k in unique_word ])) #统计list中元素的频次，返回元组\n",
    "        \n",
    "        #两两组合。方法一\n",
    "        p=list(itertools.permutations(list(np.arange(i)),2)) #返回可迭代对象的所有数学全排列方式。\n",
    "        y=len(p) # y=i*(i-1)\n",
    "        top_similarity=[0]\n",
    "        for w in np.arange(y):\n",
    "            vector1=mat[p[w][0]]\n",
    "            vector2=mat[p[w][1]]\n",
    "            top_similarity.append(cos(vector1,vector2))\n",
    "\n",
    "#        #两两组合，方法二\n",
    "#        for x in range(i-1):\n",
    "#            for y in range(x,i):\n",
    "            \n",
    "        #计算平均余玄相似度\n",
    "        mean_similarity.append(sum(top_similarity)/ y)\n",
    "    return mean_similarity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1,\n",
       " 0.08,\n",
       " 0.006666666666666667,\n",
       " 0.006666666666666667,\n",
       " 0.01,\n",
       " 0.012000000000000004,\n",
       " 0.016190476190476193,\n",
       " 0.027142857142857156,\n",
       " 0.04055555555555558,\n",
       " 0.060000000000000005]"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[1,\n",
       " 0.0,\n",
       " 0.0,\n",
       " 0.0,\n",
       " 0.002,\n",
       " 0.0026666666666666666,\n",
       " 0.0038095238095238095,\n",
       " 0.0064285714285714285,\n",
       " 0.006111111111111112,\n",
       " 0.021777777777777788]"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#计算主题平均余玄相似度\n",
    "\n",
    "pos_k=LDA_k(pos_corpus,pos_dict)\n",
    "neg_k=LDA_k(neg_corpus,neg_dict)\n",
    "\n",
    "pos_k\n",
    "neg_k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1404658b7c8>"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, '正面评论LDA主题数寻优')"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.Series(pos_k,index=range(1,11)).plot()\n",
    "plt.title('正面评论LDA主题数寻优')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x14045e4a4c8>"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, '负面评论LDA主题数寻优')"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.Series(neg_k,index=range(1,11)).plot()\n",
    "plt.title('负面评论LDA主题数寻优')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0,\n",
       "  '0.087*\"安装\" + 0.021*\"送货\" + 0.020*\"很快\" + 0.014*\"售后\" + 0.013*\"客服\" + 0.012*\"东西\" + 0.011*\"信赖\" + 0.011*\"物流\" + 0.010*\"师傅\" + 0.009*\"购物\"'),\n",
       " (1,\n",
       "  '0.039*\"满意\" + 0.020*\"师傅\" + 0.018*\"服务\" + 0.018*\"不错\" + 0.014*\"好评\" + 0.013*\"值得\" + 0.011*\"人员\" + 0.009*\"送\" + 0.009*\"太\" + 0.008*\"家里\"')]"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[(0,\n",
       "  '0.021*\"垃圾\" + 0.018*\"差\" + 0.013*\"不好\" + 0.013*\"加热\" + 0.012*\"小时\" + 0.012*\"收\" + 0.011*\"收费\" + 0.011*\"安装\" + 0.011*\"打电话\" + 0.011*\"装\"'),\n",
       " (1,\n",
       "  '0.081*\"安装\" + 0.020*\"售后\" + 0.020*\"师傅\" + 0.019*\"太\" + 0.016*\"安装费\" + 0.015*\"慢\" + 0.014*\"东西\" + 0.013*\"客服\" + 0.011*\"贵\" + 0.011*\"太慢\"')]"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pos_lda=models.LdaModel(pos_corpus,num_topics=2,id2word=pos_dict)\n",
    "neg_lda=models.LdaModel(neg_corpus,num_topics=2,id2word=neg_dict)\n",
    "\n",
    "pos_lda.print_topics(num_topics=10)\n",
    "neg_lda.print_topics(num_topics=10)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
